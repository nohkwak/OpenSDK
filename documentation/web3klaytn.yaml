openapi: 3.0.2
info:
  title: web3rpc
  version: 0.9.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8551
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /klay/account/accountCreated:
    post:
      operationId: accountCreated
      summary: '[Account-accountCreated]'
      description: |
        Returns `true` if the account associated with the address is created. It returns `false` otherwise.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_accountCreated`
      tags:
        - klay
      parameters:
        - name: account
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: blockNumberOrHash
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayAccountCreatedReq'
      responses:
        '200':
          description: The existence of an input address
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        description: The existence of an input address
                        type: boolean
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/accountCreated' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_accountCreated",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xa4f42d4d2a3a13874406435500950c9bf2d783db",
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayAccountCreatedResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayAccountCreatedExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayAccountCreatedExample() throws IOException {
                    KlayAccountCreatedResponse ar = w3.klayAccountCreated(
                        "0xa4f42d4d2a3a13874406435500950c9bf2d783db",
                        "latest")
                    .send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                const address = '0xa4f42d4d2a3a13874406435500950c9bf2d783db'
                const blockTag = 'latest'
                sdk.klay.accountCreated(address, blockTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xa4f42d4d2a3a13874406435500950c9bf2d783db"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.account_created(address, blockTag)

            print(klay_response)
  /klay/account/accounts:
    post:
      operationId: accounts
      summary: '[Account-accounts]'
      description: |
        Returns a list of addresses owned by client.

        **JSONRPC:** `klay_accounts`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: klay_accounts
      responses:
        '200':
          description: Returns a list of addresses owned by client.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayAccountsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
            'https://api.baobab.klaytn.net:8651/klay/accounts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_accounts",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayAccountsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayAccountsExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayAccountsExample() throws IOException {
                    KlayAccountsResponse ar = w3.klayAccounts().send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.klay.accounts({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.accounts()

            print(klay_response)
  /klay/account/decodeAccountKey:
    post:
      operationId: decodeAccountKey
      summary: '[Account-decodeAccountKey]'
      description: |
        Decodes an RLP encoded account key.

        **JSONRPC:** `klay_decodeAccountKey`
      tags:
        - klay
      parameters:
        - name: encodedAccountKey
          in: query
          description: RLP encoded account key
          required: true
          schema:
            type: string
            format: DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayDecodeAccountKeyReq'
      responses:
        '200':
          description: Decodes an RLP encoded account key.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayDecodeAccountKeyResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/decodeAccountKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_decodeAccountKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayDecodeAccountKeyResponse;

            import java.io.IOException;

            public class KlayDecodeAccountKeyExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayDecodeAccountKeyExample() throws IOException {
                    String accountKey = "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447";
                    KlayDecodeAccountKeyResponse ar = w3.klayDecodeAccountKey(
                                    accountKey)
                            .send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                const encodedAccountKey = "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447"

                sdk.klay.decodeAccountKey(encodedAccountKey, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            accountKey = "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.decode_account_key(accountKey)

            print(klay_response)
  /klay/account/encodeAccountKey:
    post:
      operationId: encodeAccountKey
      summary: '[Account-encodeAccountKey]'
      description: |
        Encodes an account key using the Recursive Length Prefix (RLP) encoding scheme.

        **JSONRPC:** `klay_encodeAccountKey`
      tags:
        - klay
      parameters:
        - name: object
          in: query
          description: object
          required: true
          schema:
            type: object
            properties:
              keytype:
                type: integer
                description: Integer value indicating account key type. For the value of each account key type, see AccountKey.
              key:
                type: object
                description: Account key object
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayEncodeAccountKeyReq'
      responses:
        '200':
          description: Return RLP encoded account key
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayEncodeAccountKeyResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/encodeAccountKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_encodeAccountKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"keyType": 0, "key": {}}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import com.fasterxml.jackson.databind.ObjectMapper;
            import com.fasterxml.jackson.databind.node.ObjectNode;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayEncodeAccountKeyResponse;

            import java.io.IOException;

            public class KlayEncodeAccountKeyExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void klayEncodeAccountKeyExample() throws IOException {
                    ObjectMapper objectMapper = new ObjectMapper();
                    ObjectNode node = objectMapper.createObjectNode();
                    node.put("keyType", 0);
                    node.putNull("key");

                    KlayEncodeAccountKeyResponse response = w3.klayEncodeAccountKey(node).send();

                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const accountKey = { "keyType": 0, "key": {} }

                sdk.klay.encodeAccountKey(accountKey, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            accountKey = {
                "keyType": 0,
                "key": {}
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.encode_account_key(accountKey)

            print(klay_response)
  /klay/account/getAccount:
    post:
      operationId: getAccount
      summary: '[Account-getAccount]'
      description: |
        Returns the account information of a given address. There are two different account types in Klaytn: Externally Owned Account (EOA) and Smart Contract Account. See Klaytn Accounts.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*`

        **JSONRPC:** `klay_getAccount`
      tags:
        - klay
      parameters:
        - name: address
          in: query
          description: Address
          required: true
          schema:
            $ref: '#/components/schemas/Address'
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetAccountReq'
      responses:
        '200':
          description: Returns the account information of a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetAccountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x3111a0577f322e8fb54f78d9982a26ae7ca0f722", "latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetAccountExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetAccountExample() throws IOException {
                    KlayGetAccountResponse ar = w3.klayGetAccount(
                        "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec",
                        "latest")
                    .send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0x1cbd3b2770909d4e10f157cabc84c7264073c9ec'
                const blockNumberOrHash = 'latest'
                
                sdk.klay.getAccount(address, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722"
            blockNumberOrHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_account(address, blockNumberOrHash)

            print(klay_response)
  /klay/account/getAccountKey:
    post:
      operationId: getAccountKey
      summary: '[Account-getAccountKey]'
      description: |
        Returns the account key of the Externally Owned Account (EOA) of a given address. If the account has AccountKeyLegacy or the account of the given address is a Smart Contract Account, it will return an empty key value.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available*

        **JSONRPC:** `klay_getAccountKey`
      tags:
        - klay
      parameters:
        - name: address
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetAccountKeyReq'
      responses:
        '200':
          description: Returns the account key or an empty key value.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetAccountKeyResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getAccountKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getAccountKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x3111a0577f322e8fb54f78d9982a26ae7ca0f722", "latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetAccountKeyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetAccountKeyExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetAccountKeyExample() throws IOException {
                    String address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722";
                    String blockNumberOrHashOrTag = "latest";
                    KlayGetAccountKeyResponse response = w3.klayGetAccountKey(address, blockNumberOrHashOrTag).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = '0xa36a5fdc679ecaabe057556ccec2f3558068bdc8'
                const blockNumberOrHash = 'latest'

                sdk.klay.getAccountKey(address, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_account_key(address, blockTag)

            print(klay_response)
  /klay/account/getBalance:
    post:
      operationId: getBalance
      summary: '[Account-getBalance]'
      description: |
        Returns the balance of the account of given address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*`

        **JSONRPC:** `klay_getBalance`
      tags:
        - klay
      parameters:
        - name: address
          in: query
          description: Address
          required: true
          schema:
            $ref: '#/components/schemas/Address'
        - name: blockNumberOrHash
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBalanceReq'
      responses:
        '200':
          description: Returns the balance of the account of given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBalanceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBalance' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBalance",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x3111a0577f322e8fb54f78d9982a26ae7ca0f722", "latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBalanceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBalanceExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBalanceExample() throws IOException {
                    KlayGetBalanceResponse gr = w3.klayGetBalance(
                        "0xc94770007dda54cF92009BFF0dE90c06F603a09f",
                        "latest")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = '0x1cbd3b2770909d4e10f157cabc84c7264073c9ec'
                const blockNumberOrHash = 'latest'

                sdk.klay.getBalance(address, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_balance(address, blockTag)

            print(klay_response)
  /klay/account/getCode:
    post:
      operationId: getCode
      summary: '[Account-getCode]'
      description: |
        Returns code at a given address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCode`
      tags:
        - klay
      parameters:
        - name: account
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCodeReq'
      responses:
        '200':
          description: Returns code at a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: The code from the given address.
                        example: '0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCode' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCode",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b", "0x2"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetCodeResponse;

            import java.io.IOException;

            public class KlayGetCodeExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetCodeExample() throws IOException {
                    KlayGetCodeResponse gr = w3.klayGetCode(
                                    "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                                    "0x2")
                            .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const account = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"
                const blockNumberOrHash = "0x2"
                
                sdk.klay.getCode(account, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"
            blockTag = "0x2"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_code(address, blockTag)

            print(klay_response)
  /klay/account/getTransactionCount:
    post:
      operationId: getTransactionCount
      summary: '[Account-getTransactionCount]'
      description: |
        Returns the number of transactions sent from an address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available*

        **JSONRPC:** `klay_getTransactionCount`
      tags:
        - klay
      parameters:
        - name: Address
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionCountReq'
      responses:
        '200':
          description: Returns the number of transactions sent from an address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionCountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionCount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionCount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionCountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionCountExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetTransactionCountExample() throws IOException {
                    KlayGetTransactionCountResponse response = w3.klayGetTransactionCount(
                            "0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"
                    ).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
                const blockNumberOrHashOrTag = 'latest'
                
                sdk.klay.getTransactionCount(address, blockNumberOrHashOrTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_count(address, blockTag)

            print(klay_response)
  /klay/account/isContractAccount:
    post:
      operationId: isContractAccount
      summary: '[Account-isContractAccount]'
      description: |
        Returns true if an input account has a non-empty codeHash at the time of a specific block number. It returns false if the account is an EOA or a smart contract account which doesn't have codeHash.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available*

        **JSONRPC:** `klay_isContractAccount`
      tags:
        - klay
      parameters:
        - name: Address
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayGetTransactionCountReq'
      responses:
        '200':
          description: Returns true if an input account has a non-empty codeHash at the time of a specific block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayGetTransactionCountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/isContractAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_isContractAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayIsContractAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayIsContractAccountExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    KlayIsContractAccountResponse response = w3.klayIsContractAccount(
                            "0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const account = '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
                const blockNumberOrHashOrTag = 'latest'

                sdk.klay.isContractAccount(account, blockNumberOrHashOrTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.is_contract_account(address, blockTag)

            print(klay_response)
  /klay/account/sign:
    post:
      operationId: sign
      summary: '[Account-sign]'
      description: |
        The sign method calculates a Klaytn-specific signature with:

        sign(keccak256("\x19Klaytn Signed Message:\n" + len(message) + message)))

        Adding a prefix to the message makes the calculated signature recognizable as a Klaytn-specific signature. This prevents misuse where a malicious dApp can sign arbitrary data, e.g., transaction, and use the signature to impersonate the victim.

        `klay_sign` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_sign`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_sign`
      tags:
        - klay
      parameters:
        - name: account
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: message
          required: true
          schema:
            type: string
            format: N-byte DATA
          description: Message to sign
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySignReq'
      responses:
        '200':
          description: Return signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: Signature
                        example: '0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sign' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sign",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x9b2055d370f73ec7d8a03e965129118dc8f5bf83",
                "0xdeadbeaf"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySignResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;


            public class KlaySignExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klaySignExample() throws IOException {
                    String address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
                    String message = "0xdeadbeaf";
                    KlaySignResponse response = w3.klaySign(address, message).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0x487f2dfef230c2120b8cc55c5087b103146536ec'
                const message = '0xdeadbeaf'

                sdk.klay.sign(address, message, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"
            message = "0xdeadbeaf"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sign(address, message)

            print(klay_response)
  /klay/block/blockNumber:
    post:
      operationId: blockNumber
      summary: '[Block-blockNumber]'
      description: |
        Returns the number of most recent block.

        **JSONRPC:** `klay_blockNumber`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_blockNumber
      responses:
        '200':
          description: Returns the number of most recent block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Integer of the current block number the client is on.
                        example: '0xc94'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/blockNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_blockNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayBlockNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayBlockNumberExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayBlockNumberExample() throws IOException {
                    KlayBlockNumberResponse br = w3.klayBlockNumber().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                sdk.klay.blockNumber({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.block_number()

            print(klay_response)
  /klay/block/getBlockByHash:
    post:
      operationId: getBlockByHash
      summary: '[Block-getBlockByHash]'
      description: |
        Returns information about a block by hash. This API works only on RPC call, not on JavaScript console.

        **JSONRPC:** `klay_getBlockByHash`
      tags:
        - klay
      parameters:
        - name: hashOfBlock
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a block
          in: query
        - name: returnTransactionObject
          in: query
          description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockByHashReq'
      responses:
        '200':
          description: Returns information about a block by hash
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577", true]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockByHashExample() throws IOException {
                    KlayGetBlockByHashResponse gr = w3.klayGetBlockByHash(
                        "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577",
                        true)
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-

            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
                const returnTransactionObject = true
                
                sdk.klay.getBlockByHash(blockHash, returnTransactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"
            returnTransactionObject = True

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_by_hash(blockHash, returnTransactionObject)

            print(klay_response)
  /klay/block/getBlockByNumber:
    post:
      operationId: getBlockByNumber
      summary: '[Block-getBlockByNumber]'
      description: |
        Returns information about a block by block number. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getBlockByNumber`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          in: query
        - name: boolean
          in: query
          description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockByNumberReq'
      responses:
        '200':
          description: Returns information about a block by block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4", true]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockByNumberExample() throws IOException {
                    KlayGetBlockByNumberResponse gr = w3.klayGetBlockByNumber(
                        "0x1b4",
                        true)
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 1
                const returnTransactionObject = true
                
                sdk.klay.getBlockByNumber(blockNumber, returnTransactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"
            boolean = True

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_by_number(blockTag, boolean)

            print(klay_response)
  /klay/block/getBlockReceipts:
    post:
      operationId: getBlockReceipts
      summary: '[Block-getBlockReceipts]'
      description: |
        Returns receipts included in a block identified by block hash.

        **JSONRPC:** `klay_getBlockReceipts`
      tags:
        - klay
      parameters:
        - name: hashOfBlock
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a block
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockReceiptsReq'
      responses:
        '200':
          description: Receipts included in a block. If the target block contains no transaction, an empty array [] is returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockReceiptsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockReceipts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockReceipts",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;


            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockReceiptsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockReceiptsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockReceiptsExample() throws IOException {
                    String blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";
                    KlayGetBlockReceiptsResponse response = w3.klayGetBlockReceipts(blockHash).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'

                sdk.klay.getBlockReceipts(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_receipts(blockHash)

            print(klay_response)
  /klay/block/getBlockTransactionCountByHash:
    post:
      operationId: getBlockTransactionCountByHash
      summary: '[Block-getBlockTransactionCountByHash]'
      description: |
        Returns the number of transactions in a block from a block that matches the given hash.

        **JSONRPC:** `klay_getBlockTransactionCountByHash`
      tags:
        - klay
      parameters:
        - name: hashOfBlock
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a block
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getBlockTransactionCountByHash
                    params:
                      type: array
                      description: Hash of a block
                      items:
                        title: hashOfBlock
                        type: string
                        format: 32-byte DATA
                        description: Hash of a block
                        example:
                          - '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
      responses:
        '200':
          description: Return integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Integer of the number of transactions in this block.
                        format: hex
                        example: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockTransactionCountByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockTransactionCountByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockTransactionCountByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockTransactionCountByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockTransactionCountByHashExample() throws IOException {
                    KlayGetBlockTransactionCountByHashResponse gr = w3.klayGetBlockTransactionCountByHash(
                        "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
                
                sdk.klay.getBlockTransactionCountByHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_transaction_count_by_hash(blockHash)

            print(klay_response)
  /klay/block/getBlockTransactionCountByNumber:
    post:
      operationId: getBlockTransactionCountByNumber
      summary: '[Block-getBlockTransactionCountByNumber]'
      description: |
        Returns the number of transactions in a block matching the given block number.

        **NOTE:**  In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_getBlockTransactionCountByNumber`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockTransactionCountByNumberReq'
      responses:
        '200':
          description: Returns integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the number of transactions in this block.
                        example: '0xa'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockTransactionCountByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockTransactionCountByNumber",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xe8"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockTransactionCountByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockTransactionCountByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockTransactionCountByNumberExample() throws IOException {
                    KlayGetBlockTransactionCountByNumberResponse gr = w3.klayGetBlockTransactionCountByNumber(
                        "0xe8")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 1
                sdk.klay.getBlockTransactionCountByNumber(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });


            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_transaction_count_by_number(blockTag)

            print(klay_response)
  /klay/block/getBlockWithConsensusInfoByHash:
    post:
      operationId: getBlockWithConsensusInfoByHash
      summary: '[Block-getBlockWithConsensusInfoByHash]'
      description: |
        Returns a block with consensus information that matches the given hash.

        **JSONRPC:** `klay_getBlockWithConsensusInfoByHash`
      tags:
        - klay
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByHashReq'
      responses:
        '200':
          description: Returns a block with consensus information that matches the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockWithConsensusInfoByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockWithConsensusInfoByHash",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockWithConsensusInfoByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockWithConsensusInfoByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockWithConsensusInfoByHashExample() throws IOException {
                    KlayGetBlockWithConsensusInfoByHashResponse gr = w3.klayGetBlockWithConsensusInfoByHash(
                                    "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577")
                            .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
                sdk.klay.getBlockWithConsensusInfoByHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_with_consensus_info_by_hash(blockHash)

            print(klay_response)
  /klay/block/getBlockWithConsensusInfoByNumber:
    post:
      operationId: getBlockWithConsensusInfoByNumber
      summary: '[Block-getBlockWithConsensusInfoByNumber]'
      description: |
        Returns a block with consensus information that matches the given block number.

        **NOTE:**  In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available. 

        **JSONRPC:** `klay_getBlockWithConsensusInfoByNumber`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberReq'
      responses:
        '200':
          description: Returns a block with consensus information that matches the given block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockWithConsensusInfoByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockWithConsensusInfoByNumber",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0x6e0431"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockWithConsensusInfoByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockWithConsensusInfoByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetBlockWithConsensusInfoByNumberExample() throws IOException {
                    KlayGetBlockWithConsensusInfoByNumberResponse gr = w3.klayGetBlockWithConsensusInfoByNumber(
                        "0xe8")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 1;

                sdk.klay.getBlockWithConsensusInfoByNumber(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x6e0431"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_with_consensus_info_by_number(blockTag)

            print(klay_response)
  /klay/block/getBlockWithConsensusInfoByNumberRange:
    post:
      operationId: getBlockWithConsensusInfoByNumberRange
      summary: '[Block-getBlockWithConsensusInfoByNumberRange]'
      description: |
        Returns a block with consensus information matched by the given block hash or block number.

        **JSONRPC:** `klay_getBlockWithConsensusInfoByNumberRange`
      tags:
        - klay
      parameters:
        - name: blockHashOrBlockNumber
          in: query
          description: The block hash or block number. Or the string "genesis" or "latest".
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
        - name: range
          in: query
          description: The range
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberRangeReq'
      responses:
        '200':
          description: Returns a block with consensus information matched by the given block hash or block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberRangeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/klay_getBlockWithConsensusInfoByNumberRange' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockWithConsensusInfoByNumberRange",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [1, 1]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockWithConsensusInfoByNumberRangeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class KlayGetBlockWithConsensusInfoByNumberRangeExample {
                private Web3j w3 = new Web3j(new HttpService("https://api.baobab.klaytn.net:8651"));
                void klayGetBlockWithConsensusInfoByNumberRangeExample() throws IOException {
                    Integer blockNumber = 1;
                    Integer numberRange = 1;
                    KlayGetBlockWithConsensusInfoByNumberRangeResponse response = w3
                        .klayGetBlockWithConsensusInfoByNumberRange(
                            blockNumber,
                            numberRange)
                        .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHashOrBlockNumber = 1
                const range = 10
                
                sdk.klay.getBlockWithConsensusInfoByNumberRange(blockHashOrBlockNumber, range, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = 1
            numberRange = 10

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_with_consensus_info_by_number_range(blockHash, numberRange)

            print(klay_response)
  /klay/block/getCommittee:
    post:
      operationId: getCommittee
      summary: '[Block-getCommittee]'
      description: |
        Returns a list of all validators in the committee at the specified block. If the parameter is not set, returns a list of all validators in the committee at the latest block.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCommittee`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: (optional) Integer or hexadecimal block number, or the string "earliest" or "latest" as in the default block parameter.
          required: false
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCommitteeReq'
      responses:
        '200':
          description: Array - Array of addresses of all validators in the committee, or null when no committee was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetCommitteeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCommittee' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCommittee",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetCommitteeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCommitteeExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetCommitteeExample() throws IOException {
                    KlayGetCommitteeResponse gr = w3.klayGetCommittee(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumberOrTag = '0x1b4'

                sdk.klay.getCommittee(blockNumberOrTag, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_committee(blockTag)

            print(klay_response)
  /klay/block/getCommitteeSize:
    post:
      operationId: getCommitteeSize
      summary: '[Block-getCommitteeSize]'
      description: |
        Returns the size of the committee at the specified block. If the parameter is not set, returns the size of the committee at the latest block.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCommitteeSize`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: (optional) Integer or hexadecimal block number, or the string "earliest" or "latest" as in the default block parameter.
          required: false
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCommitteeSizeReq'
      responses:
        '200':
          description: Integer - The size of the committee, or -1 when no committee was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: The size of the committee
                        example: 4
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCommitteeSize' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCommitteeSize",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetCommitteeSizeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCommitteeSizeExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetCommitteeSizeExample() throws IOException {
                    KlayGetCommitteeSizeResponse gr = w3.klayGetCommitteeSize(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumberOrTag = '0x1b4'

                sdk.klay.getCommitteeSize({ blockNumberOrTag }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_committee_size(blockTag)

            print(klay_response)
  /klay/block/getCouncil:
    post:
      operationId: getCouncil
      summary: '[Block-getCouncil]'
      description: |
        Returns a list of all validators of the council at the specified block. If the parameter is not set, returns a list of all validators of the council at the latest block.

        **NOTE:** 

        *klay_getValidators is replaced with this method and is not supported anymore.*

        *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCouncil`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: (optional) Integer or hexadecimal block number, or the string "earliest" or "latest" as in the default block parameter.
          required: false
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCouncilReq'
      responses:
        '200':
          description: Array - Array of validator addresses of the council, or null when no council was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetCouncilResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCouncil' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCouncil",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetCouncilResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCouncilExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetCouncilExample() throws IOException {
                    KlayGetCouncilResponse gr = w3.klayGetCouncil(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumberOrTag = '0x1b4'
                sdk.klay.getCouncil(blockNumberOrTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_council(blockTag)

            print(klay_response)
  /klay/block/getCouncilSize:
    post:
      operationId: getCouncilSize
      summary: '[Block-getCouncilSize]'
      description: |
        Returns the size of the council at the specified block. If the parameter is not set, returns the size of the council at the latest block.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCouncilSize`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: (optional) Integer or hexadecimal block number, or the string "earliest" or "latest" as in the default block parameter.
          required: false
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCouncilSizeReq'
      responses:
        '200':
          description: Integer - The size of the council, or -1 when no council was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: The size of the council
                        example: 4
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCouncilSize' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCouncilSize",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetCouncilSizeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCouncilSizeExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetCouncilSizeExample() throws IOException {
                    KlayGetCouncilSizeResponse gr = w3.klayGetCouncilSize(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumberOrTag = '0x1b4'

                sdk.klay.getCouncilSize({ blockNumberOrTag }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_council_size(blockTag)

            print(klay_response)
  /klay/block/getHeaderByHash:
    post:
      operationId: getHeaderByHash
      summary: '[Block-getHeaderByHash]'
      description: |
        Returns information about a header by hash. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *This API is supported from Klaytn v1.7.0.*

        **JSONRPC:** `klay_getHeaderByHash`
      tags:
        - klay
      parameters:
        - name: hashOfBlock
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetHeaderByHashReq'
      responses:
        '200':
          description: Returns information about a header by hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetHeaderByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getHeaderByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getHeaderByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetHeaderByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetHeaderByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetHeaderByHashExample() throws IOException {
                    KlayGetHeaderByHashResponse gr = w3.klayGetHeaderByHash(
                        "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
                
                sdk.klay.getHeaderByHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_header_by_hash(blockHash)

            print(klay_response)
  /klay/block/getHeaderByNumber:
    post:
      operationId: getHeaderByNumber
      summary: '[Block-getHeaderByNumber]'
      description: |
        Returns information about a header by number. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *This API is supported from Klaytn v1.7.0.*

        **JSONRPC:** `klay_getHeaderByNumber`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetHeaderByNumberReq'
      responses:
        '200':
          description: Returns information about a header by number
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetHeaderByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getHeaderByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getHeaderByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetHeaderByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetHeaderByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetHeaderByNumberExample() throws IOException {
                    KlayGetHeaderByNumberResponse gr = w3.klayGetHeaderByNumber(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 1
                
                sdk.klay.getHeaderByNumber(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_header_by_number(blockTag)

            print(klay_response)
  /klay/block/getRewards:
    post:
      tags:
        - klay
      operationId: getRewards
      summary: '[Block-getRewards]'
      description: |
        Returns the reward distribution result about a block by block number, including the rewardees and their shares. If the parameter is not set, it returns the reward distribution at the latest block.

        **JSONRPC:** `klay_getRewards`
      parameters:
        - name: blockNumberOrTag
          in: query
          description: block number
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRewardsReq'
      responses:
        '200':
          description: block rewards information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRewardsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRewards' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRewards",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetRewardsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRewardsExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetRewardsExample() throws IOException {
                    KlayGetRewardsResponse gr = w3.klayGetRewards(
                        "0x1000")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumberOrTag = 'latest';
                sdk.klay.getRewards(blockNumberOrTag,{}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_rewards(blockTag)

            print(klay_response)
  /klay/block/getStorageAt:
    post:
      operationId: getStorageAt
      summary: '[Block-getStorageAt]'
      description: |
        Returns the value from a storage position at a given address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getStorageAt`
      tags:
        - klay
      parameters:
        - name: storageAddress
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address of the storage.
          in: query
        - name: position
          required: true
          schema:
            type: string
            format: hex
          description: Integer of the position in the storage.
          in: query
        - name: blockNumberOrHash
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetStorageAtReq'
      responses:
        '200':
          description: Returns the value from a storage position at a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: The value at this storage position.
                        example: '0x00000000000000000000000000000000000000000000000000000000000004d2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getStorageAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getStorageAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x295a70b2de5e3953354a6a8344e616ed314d7251", "0x0", "latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetStorageAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetStorageAtExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetStorageAtExample() throws IOException {
                    KlayGetStorageAtResponse gr = w3.klayGetStorageAt(
                        "0x295a70b2de5e3953354a6a8344e616ed314d7251",
                        "0x0",
                        "latest")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const storageAddress = '0x295a70b2de5e3953354a6a8344e616ed314d7251'
                const position = '0x0'
                const blockNumberOrHash = 'latest'
                
                sdk.klay.getStorageAt(storageAddress, position, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });


            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x295a70b2de5e3953354a6a8344e616ed314d7251"
            position = "0x0"
            blockHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_storage_at(address, position, blockHash)

            print(klay_response)
  /klay/block/syncing:
    post:
      operationId: syncing
      summary: '[Block-syncing]'
      description: |
        Returns an object with data about the sync status or false.

        **JSONRPC:** `klay_syncing`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_syncing
      responses:
        '200':
          description: Returns Object|Boolean, an object with sync status data or false when not syncing
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySyncingResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/syncing' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_syncing",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySyncingResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class KlaySyncingExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
              void klaySyncingExample() throws IOException {
                KlaySyncingResponse response = w3.klaySyncing().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.klay.syncing({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.syncing()

            print(klay_response)
  /klay/transaction/call:
    post:
      operationId: call
      summary: '[Transaction-call]'
      tags:
        - klay
      description: |
        Executes a new message call immediately without creating a transaction on the block chain. It returns data or an error object of JSON RPC if error occurs.

        If you deployed a contract, use klay_getTransactionReceipt to get the contract address.

        **NOTE** In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_call`
      parameters:
        - name: callObject
          in: query
          description: The transaction call object. See the next table for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/KlayCallObject'
        - name: blockNumberOrHash
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayCallReq'
      responses:
        '200':
          description: Return value of executed contract or returns an error object of JSON RPC if anything goes wrong
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayCallResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl 'https://api.baobab.klaytn.net:8651/klay/call' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_call",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                  "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "gas": "0x100000",
                  "gasPrice": "0x5d21dba00",
                  "value": "0x0",
                  "input": "0x8ada066e"
                },
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayCallResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class KlayCallExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayCallExample() throws IOException {
                    KlayCallObject callObject = new KlayCallObject();
                    callObject.setFrom("0x3f71029af4e252b25b9ab999f77182f0cd3bc085");
                    callObject.setTo("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    callObject.setGas("0x100000");
                    callObject.setGasPrice("0x5d21dba00");
                    callObject.setValue("0x0");
                    callObject.setInput("0x8ada066e");

                    KlayCallResponse cr = w3.klayCall(
                        callObject,
                        "latest")
                    .send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const callObject = {
                    "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                    "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                    "gas": "0x100000",
                    "gasPrice": "0x5d21dba00",
                    "value": "0x0",
                    "input": "0x8ada066e"
                }
                const blockTag = 'latest'
                sdk.klay.call(callObject, blockTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "gas": "0x100000",
                "gasPrice": "0x5d21dba00",
                "value": "0x0",
                "input": "0x8ada066e"
            }
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.call(callObject, blockTag)

            print(klay_response)
  /klay/transaction/createAccessList:
    post:
      operationId: createAccessList
      summary: '[Transaction-createAccessList]'
      description: |
        This method creates an accessList based on a given Transaction. The accessList contains all storage slots and addresses read and written by the transaction, except for the sender account and the precompiles. This method uses the same transaction call object and blockNumberOrTag object as caver.rpc.klay.call. An accessList can be used to release stuck contracts that became inaccessible due to gas cost increases. Adding an accessList to your transaction does not necessary result in lower gas usage compared to a transaction without an access list.

        **JSONRPC:** `klay_createAccessList`
      tags:
        - klay
      parameters:
        - name: callObject
          required: true
          schema:
            $ref: '#/components/schemas/KlayCallObject'
          description: A transaction call object. Please see caver.rpc.klay.call parameters.
          in: query
        - name: blockParameter
          in: query
          description: (optional) A block number, blockhash or the block tag string (latest or earliest). If omitted, latest will be used.
          required: false
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayCreateAccessListReq'
      responses:
        '200':
          description: returns an object includes an access list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayCreateAccessListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
            'https://api.baobab.klaytn.net:8651/klay/createAccessList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_createAccessList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
              {
                  "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                  "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7",
                  "gas": "0x3d0900",
                  "gasPrice": "0x3b9aca00",
                  "data": "0x20965255"
                },
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayCreateAccessListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayCreateAccessListExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayCreateAccessListExample() throws IOException {
                    KlayCallObject object = new KlayCallObject();
                    object.setFrom("0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312");
                    object.setTo("0x00f5f5f3a25f142fafd0af24a754fafa340f32c7");
                    object.setGas("0x3d0900");
                    object.setGasPrice("0x3b9aca00");
                    object.setInput("0x20965255");
                    KlayCreateAccessListResponse response = w3.klayCreateAccessList(object , "latest").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const callObject = {
                    "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                    "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7",
                    "gas": "0x3d0900",
                    "gasPrice": "0x3b9aca00",
                    "data": "0x20965255"
                }
                const blockParameter = 'latest'
                sdk.klay.createAccessList(callObject, { blockParameter }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                  "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                  "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7",
                  "gas": "0x3d0900",
                  "gasPrice": "0x3b9aca00",
                  "data": "0x20965255"
                }
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.create_access_list(callObject, blockTag)

            print(klay_response)
  /klay/transaction/estimateComputationCost:
    post:
      operationId: estimateComputationCost
      summary: '[Transaction-estimateComputationCost]'
      tags:
        - klay
      description: |
        Generates and returns an estimate of how much computation cost will be spent to execute the transaction. Klaytn limits the computation cost of a transaction to 100000000 currently not to take too much time by a single transaction. The transaction will not be added to the blockchain like klay_estimateGas

        **JSONRPC:** `klay_estimateComputationCost`
      parameters:
        - name: callObject
          in: query
          description: The transaction call object. See the next table for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/KlayCallObject'
        - name: blockNumberOrHash
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayEstimateComputationCostReq'
      responses:
        '200':
          description: Return the amount of computation cost used.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The amount of computation cost used.
                        example: '0x1e8b0ad'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/estimateComputationCost' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_estimateComputationCost",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from":"0x73718c4980728857f3aa5148e9d1b471efa3a7dd", "to":"0x069942a3ca0dabf495dba872533134205764bc9c", "value":"0x0", "input":"0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039"}, "latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayEstimateComputationCostResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayEstimateComputationCostExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayEstimateComputationCostExample() throws IOException {
                    KlayCallObject callObject = new KlayCallObject();
                    callObject.setFrom("0x73718c4980728857f3aa5148e9d1b471efa3a7dd");
                    callObject.setTo("0x069942a3ca0dabf495dba872533134205764bc9c");
                    callObject.setValue("0x0");
                    callObject.setInput("0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039");
                    callObject.setGas("0x9999");

                    KlayEstimateComputationCostResponse er = w3.klayEstimateComputationCost(
                                    callObject,
                                    "latest")
                            .send();
                    er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const callObject = { "from": "0x73718c4980728857f3aa5148e9d1b471efa3a7dd", "to": "0x069942a3ca0dabf495dba872533134205764bc9c", "value": "0x0", "input": "0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039" }
                const blockNumberOrHash = "latest"

                sdk.klay.estimateComputationCost(callObject, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x73718c4980728857f3aa5148e9d1b471efa3a7dd",
                "to": "0x069942a3ca0dabf495dba872533134205764bc9c",
                "value": "0x0",
                "input": "0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039"
            }
            blockNumberOrHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.estimate_computation_cost(callObject, blockNumberOrHash)

            print(klay_response)
  /klay/transaction/estimateGas:
    post:
      operationId: estimateGas
      summary: '[Transaction-estimateGas]'
      tags:
        - klay
      description: |
        Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including Klaytn Virtual Machine mechanics and node performance.

        **JSONRPC:** `klay_estimateGas`
      parameters:
        - name: callObject
          in: query
          description: The transaction call object. See the next table for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/KlayCallObject'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayEstimateGasReq'
      responses:
        '200':
          description: The amount of gas used.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayEstimateGasResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/estimateGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_estimateGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                  "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "gas": "0x100000",
                  "gasPrice":"0x5d21dba00",
                  "value": "0x0",
                  "input": "0x8ada066e"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayEstimateGasResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayEstimateGasExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayEstimateGasExample() throws IOException {
                    KlayCallObject callObject = new KlayCallObject();
                    callObject.setFrom("0x3f71029af4e252b25b9ab999f77182f0cd3bc085");
                    callObject.setTo("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    callObject.setGas("0x100000");
                    callObject.setGasPrice("0x5d21dba00");
                    callObject.setValue("0x0");
                    callObject.setInput("0x8ada066e");

                    KlayEstimateGasResponse er = w3.klayEstimateGas(
                                    callObject)
                            .send();
                    er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const callObject = {
                    "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                    "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                    "gas": "0x100000",
                    "gasPrice": "0x5d21dba00",
                    "value": "0x0",
                    "input": "0x8ada066e"
                }
                sdk.klay.estimateGas(callObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "gas": "0x100000",
                "gasPrice": "0x5d21dba00",
                "value": "0x0",
                "input": "0x8ada066e"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.estimate_gas(callObject)

            print(klay_response)
  /klay/transaction/getDecodedAnchoringTransactionByHash:
    post:
      operationId: getDecodedAnchoringTransactionByHash
      summary: '[Transaction-getDecodedAnchoringTransactionByHash]'
      description: |
        Returns the decoded anchored data in the transaction for the given transaction hash.

        **JSONRPC:** `klay_getDecodedAnchoringTransactionByHash`
      tags:
        - klay
      parameters:
        - name: hashOfTransaction
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a transaction.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetDecodedAnchoringTransactionByHashReq'
      responses:
        '200':
          description: Returns the decoded anchored data in the transaction for the given transaction hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetDecodedAnchoringTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getDecodedAnchoringTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getDecodedAnchoringTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x72cde80650c7c6745e4cf4c162e9ce1e5542f4d86112925faa6aa75f6a6142ec"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetDecodedAnchoringTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetDecodedAnchoringTransactionByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetDecodedAnchoringTransactionByHashExample() throws IOException {
                    KlayGetDecodedAnchoringTransactionByHashResponse gr = w3.klayGetDecodedAnchoringTransactionByHash(
                        "0x026b64e16b86633c0199f78f37a64840d3601d83e5c799f115b63024764524ca")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const hashOfTransaction = '0x026b64e16b86633c0199f78f37a64840d3601d83e5c799f115b63024764524ca'

                sdk.klay.getDecodedAnchoringTransactionByHash(hashOfTransaction, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            hashOfTransaction = "0x72cde80650c7c6745e4cf4c162e9ce1e5542f4d86112925faa6aa75f6a6142ec"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_decoded_anchoring_transaction_by_hash(hashOfTransaction)

            print(klay_response)
  /klay/transaction/getRawTransactionByBlockHashAndIndex:
    post:
      operationId: getRawTransactionByBlockHashAndIndex
      summary: '[Transaction-getRawTransactionByBlockHashAndIndex]'
      description: |
        GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.

        **JSONRPC:** `klay_getRawTransactionByBlockHashAndIndex`
      tags:
        - klay
      parameters:
        - name: blockHash
          required: true
          schema:
            type: string
            format: hex
          description: Hex representation of a Keccak 256 hash
          in: query
        - name: index
          in: query
          description: Hex representation of a uint
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRawTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block hash and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRawTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRawTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRawTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6","0x20965255"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetRawTransactionByBlockHashAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRawTransactionByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetRawTransactionByBlockHashAndIndexExample() throws IOException {
                    String blockHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6";
                    String index = "0x20965255";
                    KlayGetRawTransactionByBlockHashAndIndexResponse response = w3
                            .klayGetRawTransactionByBlockHashAndIndex( blockHash , index)
                            .send();
                    response.getResult();

                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be'
                const transactionIndexPosition = '0x0'
                
                sdk.klay.getRawTransactionByBlockHashAndIndex(blockHash, transactionIndexPosition, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"
            index = "0x20965255"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_block_hash_and_index(blockHash, index)

            print(klay_response)
  /klay/transaction/getRawTransactionByBlockNumberAndIndex:
    post:
      operationId: getRawTransactionByBlockNumberAndIndex
      summary: '[Transaction-getRawTransactionByBlockNumberAndIndex]'
      tags:
        - klay
      description: |
        GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.

        **JSONRPC:** `klay_getRawTransactionByBlockNumberAndIndex`
      parameters:
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
        - name: transactionIndex
          required: true
          schema:
            type: string
            format: hex
          description: The transaction index position.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRawTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block number and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRawTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRawTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRawTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x27", "0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetRawTransactionByBlockNumberAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRawTransactionByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetRawTransactionByBlockNumberAndIndexExample() throws IOException {
                    String blockTag = "0x27";
                    String index = "0x0";

                    KlayGetRawTransactionByBlockNumberAndIndexResponse response = w3
                            .klayGetRawTransactionByBlockNumberAndIndex(blockTag, index)
                            .send();
                    response.getResult();


                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 118593751
                const transactionIndexPosition = '0x0'
                
                sdk.klay.getRawTransactionByBlockNumberAndIndex(blockNumber, transactionIndexPosition, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x27"
            transactionIndex = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_block_number_and_index(blockTag, transactionIndex)

            print(klay_response)
  /klay/transaction/getRawTransactionByHash:
    post:
      operationId: getRawTransactionByHash
      summary: '[Transaction-getRawTransactionByHash]'
      description: |
        GetRawTransactionByHash returns the bytes of the transaction for the given hash.

        **JSONRPC:** `klay_getRawTransactionByHash`
      tags:
        - klay
      parameters:
        - name: hash
          required: true
          schema:
            type: string
            format: hex
          description: Hex representation of a Keccak 256 hash
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRawTransactionByHashReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRawTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRawTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRawTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetRawTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRawTransactionByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetRawTransactionByHashExample() throws IOException {
                    String transactionHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6";

                    KlayGetRawTransactionByHashResponse response = w3
                            .klayGetRawTransactionByHash(transactionHash)
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const transactionHash = '0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58'
                
                sdk.klay.getRawTransactionByHash(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_hash(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionByBlockHashAndIndex:
    post:
      operationId: getTransactionByBlockHashAndIndex
      summary: '[Transaction-getTransactionByBlockHashAndIndex]'
      tags:
        - klay
      description: |
        Returns information about a transaction by block hash and transaction index position. This API works only on RPC call, not on JavaScript console.

        **JSONRPC:** `klay_getTransactionByBlockHashAndIndex`
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: transactionIndexPosition
          in: query
          description: Integer of the transaction index position.
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block hash and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68", "0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionByBlockHashAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetTransactionByBlockHashAndIndexExample() throws IOException {
                    KlayGetTransactionByBlockHashAndIndexResponse response = w3.klayGetTransactionByBlockHashAndIndex(
                            "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68",
                            "0x0"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be'
                const transactionIndexPosition = '0x0'

                sdk.klay.getTransactionByBlockHashAndIndex(blockHash, transactionIndexPosition, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be"
            transactionIndexPosition = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_block_hash_and_index(blockHash, transactionIndexPosition)

            print(klay_response)
  /klay/transaction/getTransactionByBlockNumberAndIndex:
    post:
      operationId: getTransactionByBlockNumberAndIndex
      summary: '[Transaction-getTransactionByBlockNumberAndIndex]'
      description: |
        Returns information about a transaction by block number and transaction index position. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getTransactionByBlockNumberAndIndex`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
        - name: transactionIndex
          required: true
          schema:
            type: string
            format: hex
          description: The transaction index position.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block number and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [118593751, "0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionByBlockNumberAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetTransactionByBlockNumberAndIndexExample() throws IOException {
                    KlayGetTransactionByBlockNumberAndIndexResponse response = w3.klayGetTransactionByBlockNumberAndIndex(
                            "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68",
                            "0x0"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 118593751
                const transactionIndexPosition = '0x0'

                sdk.klay.getTransactionByBlockNumberAndIndex(blockNumber, transactionIndexPosition, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x27"
            transactionIndex = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_block_number_and_index(blockTag, transactionIndex)

            print(klay_response)
  /klay/transaction/getTransactionByHash:
    post:
      operationId: getTransactionByHash
      summary: '[Transaction-getTransactionByHash]'
      tags:
        - klay
      description: |
        Returns the information about a transaction requested by transaction hash. This API works only on RPC call, not on JavaScript console.

        **JSONRPC:** `klay_getTransactionByHash`
      parameters:
        - name: transactionHash
          schema:
            type: string
            format: 32-byte DATA
          in: query
          description: Hash of a transaction.
          required: true
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionByHashReq'
      responses:
        '200':
          description: Object - A transaction object, or null when no transaction was found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetTransactionByHashExample() throws IOException {
                    KlayGetTransactionByHashResponse response = w3.klayGetTransactionByHash(
                            "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionHash = '0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58'

                sdk.klay.getTransactionByHash(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_hash(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionBySenderTxHash:
    post:
      operationId: getTransactionBySenderTxHash
      summary: '[Transaction-getTransactionBySenderTxHash]'
      description: |
        Returns the information about a transaction requested by sender transaction hash. This API works only on RPC call, not on JavaScript console. Please note that this API returns correct result only if indexing feature is enabled by --sendertxhashindexing. This can be checked by call klay_isSenderTxHashIndexingEnabled.

        **JSONRPC:** `klay_getTransactionBySenderTxHash`
      tags:
        - klay
      parameters:
        - name: transactionHash
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a transaction that is signed only by the sender.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionBySenderTxHashReq'
      responses:
        '200':
          description: Returns information about a transaction by block number and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionBySenderTxHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionBySenderTxHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionBySenderTxHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionBySenderTxHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionBySenderTxHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetTransactionBySenderTxHashExample() throws IOException {
                    KlayGetTransactionBySenderTxHashResponse response = w3.klayGetTransactionBySenderTxHash(
                            "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionHash = "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"

                sdk.klay.getTransactionBySenderTxHash(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_sender_tx_hash(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionReceipt:
    post:
      operationId: getTransactionReceipt
      summary: '[Transaction-getTransactionReceipt]'
      description: |
        Returns the receipt of a transaction by transaction hash.

        **NOTE:** The receipt is not available for pending transactions.

        **JSONRPC:** `klay_getTransactionReceipt`
      tags:
        - klay
      parameters:
        - name: transactionHash
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a transaction.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionReceiptReq'
      responses:
        '200':
          description: Returns a transaction receipt object, or null when no receipt was found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionReceiptResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionReceipt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionReceipt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionReceiptResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionReceiptExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetTransactionReceiptExample() throws IOException {
                    KlayGetTransactionReceiptResponse response = w3.klayGetTransactionReceipt(
                            "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const transactionHash = '0x2781f2f57b2587f6d9ad80a9e5f60158439d2548eebbc23bd806ecb856fe724e'
                sdk.klay.getTransactionReceipt(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_receipt(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionReceiptBySenderTxHash:
    post:
      operationId: getTransactionReceiptBySenderTxHash
      summary: '[Transaction-getTransactionReceiptBySenderTxHash]'
      tags:
        - klay
      description: |
        Returns the receipt of a transaction by sender transaction hash.

        **NOTE:** The receipt is not available for pending transactions. Please note that this API returns correct result only if indexing feature is enabled by --sendertxhashindexing. This can be checked by call klay_isSenderTxHashIndexingEnabled.

        **JSONRPC:** `klay_getTransactionReceiptBySenderTxHash`
      parameters:
        - name: Hash
          schema:
            type: string
            format: 32-byte DATA
          in: query
          description: Hash of a transaction before signing of feePayer(senderTransactionHash).
          required: true
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayGetTransactionByHashReq'
      responses:
        '200':
          description: Returns the receipt of a transaction by sender transaction hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionReceiptBySenderTxHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionReceiptBySenderTxHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionReceiptBySenderTxHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionReceiptBySenderTxHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetTransactionReceiptBySenderTxHashExample() throws IOException {
                    KlayGetTransactionReceiptBySenderTxHashResponse response = w3.klayGetTransactionReceiptBySenderTxHash(
                            "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const senderTxHash = '0x2781f2f57b2587f6d9ad80a9e5f60158439d2548eebbc23bd806ecb856fe724e'
                
                sdk.klay.getTransactionReceiptBySenderTxHash(senderTxHash, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_receipt_by_sender_tx_hash(transactionHash)

            print(klay_response)
  /klay/transaction/pendingTransactions:
    post:
      operationId: pendingTransactions
      summary: '[Transaction-pendingTransactions]'
      tags:
        - klay
      description: |
        Returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages.

        **JSONRPC:** `klay_pendingTransactions`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayPendingTransactionsReq'
      responses:
        '200':
          description: Returns an array of transactions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayPendingTransactionsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/pendingTransactions' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_pendingTransactions",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayPendingTransactionsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayPendingTransactionsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayPendingTransactionsExample() throws IOException {
                    KlayPendingTransactionsResponse response = w3.klayPendingTransactions().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.klay.pendingTransactions({}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.pending_transactions()

            print(klay_response)
  /klay/transaction/resend:
    post:
      operationId: resend
      summary: '[Transaction-resend]'
      description: |
        Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit.

        **JSONRPC:** `klay_resend`
      tags:
        - klay
      parameters:
        - name: sendArgs
          required: true
          schema:
            $ref: '#/components/schemas/SendArgs'
          in: query
        - name: gasPrice
          in: query
          required: true
          description: Hex representation of the integer
          schema:
            type: string
            format: hex
        - name: gasLimit
          in: query
          required: true
          description: Hex representation of a uint64
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayResendReq'
      responses:
        '200':
          description: Resend accepts an existing transaction and a new gas price and limit.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Hex representation of a Keccak 256 hash
                        example: '0xced304149857009d8767c54b7e624f700c39afe8b93d61b970902d95ac6271d1'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/resend' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_resend",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6","to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee","value": "0x1","gas": "0x9999","maxFeePerGas": "0x5d21dba00","maxPriorityFeePerGas": "0x5d21dba00","nonce": "0xf"}, "0xba43b7500", "0xe8d4a50fff"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import java.io.IOException;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayResendResponse;
            import org.web3j.protocol.klaytn.core.method.response.SendArgs;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class KlayResendExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayResendExample() throws IOException {
                    SendArgs oldTrx = new SendArgs();
                    oldTrx.setFrom("0x65b47be3457ff26f2911cf89fd079cef0475a2e6");
                    oldTrx.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    oldTrx.setValue("0x1");
                    oldTrx.setGas("0x9999");
                    oldTrx.setNonce("0xd3");
                    oldTrx.setMaxPriorityFeePerGas("0x5d21dba00");
                    oldTrx.setMaxFeePerGas("0x5d21dba00");
                    String gasPrice = "0xba43b7500";
                    String gasLimit = "0xe8d4a50fff";

                    KlayResendResponse response = w3.klayResend(oldTrx, gasPrice, gasLimit).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const sendArgs = {
                    "from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "maxFeePerGas": "0x5d21dba00",
                    "maxPriorityFeePerGas": "0x5d21dba00",
                    "nonce": "0xd"
                }
                const gasPrice = "0xba43b7500";
                const gasLimit = "0xe8d4a50fff";
               
                sdk.klay.resend(sendArgs, gasPrice, gasLimit, {},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))

            sendArgs = {
                "from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00",
                "nonce": "0xd"
            }
            gasPrice = "0xba43b7500"
            gasLimit = "0xe8d4a50fff"

            klay_response = w3.klay.resend(sendArgs, gasPrice, gasLimit)

            print(klay_response)
  /klay/transaction/sendRawTransaction:
    post:
      operationId: sendRawTransaction
      summary: '[Transaction-sendRawTransaction]'
      description: |
        Creates a new message call transaction or a contract creation for signed transactions.

        **NOTE:** If you deployed a contract, use klay_getTransactionReceipt to get the contract address.

        **JSONRPC:** `klay_sendRawTransaction`
      tags:
        - klay
      parameters:
        - name: singedTransactionData
          required: true
          schema:
            type: string
            format: DATA
          description: The signed transaction data.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendRawTransactionReq'
      responses:
        '200':
          description: Returns the transaction hash or the zero hash if the transaction is not yet available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: The transaction hash or the zero hash if the transaction is not yet available.
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sendRawTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sendRawTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xf86680850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee01808207f4a092d389e81c665711cb71cb6decc33fda5f990b4a62a309a7f5ae704a24a9848fa0458e5e3ceceb05371241be9424ac8062fcefee8373ffdacf2935860e5cc7d9b1"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySendRawTransactionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySendRawTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klaySendRawTransactionExample() throws IOException {
                    String singedTransactionData = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";

                    KlaySendRawTransactionResponse response = w3.klaySendRawTransaction(singedTransactionData).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const singedTransactionData = '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
                
                sdk.klay.sendRawTransaction(singedTransactionData, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            singedTransactionData = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.send_raw_transaction(singedTransactionData)

            print(klay_response)
  /klay/transaction/sendTransaction:
    post:
      operationId: sendTransaction
      summary: '[Transaction-sendTransaction]'
      description: |
        Constructs a transaction with given parameters, signs the transaction with a sender's private key and propagates the transaction to Klaytn network.

        `klay_sendTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_sendTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_sendTransaction`
      tags:
        - klay
      parameters:
        - name: klaytnTransactionTypes
          required: true
          schema:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          description: The required parameters depend on the transaction type.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendTransactionReq'
      responses:
        '200':
          description: Returns the transaction hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: The transaction hash
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sendTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sendTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{
                "from": "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
                "to": "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
                "gas": "0x76c0",
                "gasPrice": "0x5d21dba00",
                "value": "0x9184e72a",
                "input": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"
              }]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySendTransactionResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySendTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klaySendTransactionExample() throws IOException {
                    String address = "0x413ba0e5f6f00664598b5c80042b1308f4ff1408";
                    KlaytnTransactionTypes type = new KlaytnTransactionTypes();
                    type.setFrom(address);
                    type.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    type.setValue("0x0");
                    type.setGas("0x9999");
                    KlaySendTransactionResponse transactionResponse = w3.klaySendTransaction(type).send();
                    transactionResponse.getResult();

                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionObject = {
                    "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "maxFeePerGas": "0x5d21dba00",
                    "maxPriorityFeePerGas": "0x5d21dba00"
                }
                
                sdk.klay.sendTransaction(transactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.send_transaction(transactionObject)

            print(klay_response)
  /klay/transaction/sendTransactionAsFeePayer:
    post:
      operationId: sendTransactionAsFeePayer
      summary: '[Transaction-sendTransactionAsFeePayer]'
      description: |
        Constructs a transaction with given parameters, signs the transaction with a fee payer's private key and propagates the transaction to Klaytn network. This API supports only fee delegated type (including partial fee delegated type) transactions.

        `klay_sendTransactionAsFeePayer` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_sendTransactionAsFeePayer`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_sendTransactionAsFeePayer`
      tags:
        - klay
      parameters:
        - name: klaytnTransactionTypes
          required: true
          schema:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          description: The required parameters depend on the transaction type.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendTransactionAsFeePayerReq'
      responses:
        '200':
          description: Returns the transaction hash
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        title: SendTransactionAsFeePayerResult
                        format: 32-byte DATA
                        description: The transaction hash
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sendTransactionAsFeePayer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sendTransactionAsFeePayer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{
                "typeInt": 18,
                "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                "gas": "0x4a380",
                "gasPrice": "0x5d21dba00",
                "nonce": "0x2c",
                "value": "0xf4",
                "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "feeRatio": 30,
                "signatures": [{
                  "V": "0x4e43",
                  "R": "0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9",
                  "S": "0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef"
                }]
              }]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySendTransactionAsFeePayerResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.klaytn.core.method.response.Signature;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.List;

            public class KlaySendTransactionAsFeePayerExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

              void klaySendTransactionAsFeePayerExample() throws IOException {
                KlaytnTransactionTypes tx = new KlaytnTransactionTypes();
                Signature signature = new Signature();
                signature.setV("0x4e43");
                signature.setR("0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9");
                signature.setS("0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef");
                tx.setTypeInt(18);
                tx.setFrom("0xcd01b2b44584fb143824c1ea0231bebaea826b9d");
                tx.setTo("0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075");
                tx.setGas("0x4a380");
                tx.setGasPrice("0x5d21dba00");
                tx.setNonce("0x2c");
                tx.setValue("0xf4");
                tx.setInput("0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001");
                tx.setFeePayer("0xcd01b2b44584fb143824c1ea0231bebaea826b9d");
                tx.setFeeRatio(30);
                tx.setSignatures(List.of(signature));
                KlaySendTransactionAsFeePayerResponse response = w3.klaySendTransactionAsFeePayer(tx).send();
                response.getResult();
              }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const txObject = {
                    "typeInt": 18,
                    "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                    "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                    "gas": "0x4a380",
                    "gasPrice": "0x5d21dba00",
                    "nonce": "0x2c",
                    "value": "0xf4",
                    "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                    "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                    "feeRatio": 30,
                    "signatures": [{
                        "V": "0x4e43",
                        "R": "0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9",
                        "S": "0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef"
                    }]
                }

                sdk.klay.sendTransactionAsFeePayer(txObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            txObject = {
                "typeInt": 18,
                "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                "gas": "0x4a380",
                "gasPrice": "0x5d21dba00",
                "nonce": "0x2c",
                "value": "0xf4",
                "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "feeRatio": 30,
                "signatures": [{
                    "V": "0x4e43",
                    "R": "0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9",
                    "S": "0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef"
                }]
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.send_transaction_as_fee_payer(txObject)

            print(klay_response)
  /klay/transaction/signTransaction:
    post:
      operationId: signTransaction
      summary: '[Transaction-signTransaction]'
      description: |
        Constructs a transaction with given parameters and signs the transaction with a sender's private key. This method can be used either to generate a sender signature or to make a final raw transaction that is ready to submit to Klaytn network.

        `klay_signTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_signTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_signTransaction`
      tags:
        - klay
      parameters:
        - name: transactionData
          required: true
          schema:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          description: Transaction data.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySignTransactionReq'
      responses:
        '200':
          description: Returns signed raw transaction and transaction object including the sender's signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySignTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/signTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_signTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from":"0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                  "nonce": "0x0",
                  "gasPrice": "0xba43b7400",
                  "gas": "0x9999",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySignTransactionResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.concurrent.ExecutionException;

            public class KlaySignTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klaySignTransactionExample() throws IOException, ExecutionException, InterruptedException {
                    KlaytnTransactionTypes type = new KlaytnTransactionTypes();
                    String address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
                    String nonce = "0x20";
                    type.setFrom(address);
                    type.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    type.setValue("0x10000");
                    type.setGas("0x1000000");
                    type.setGasPrice("0x25000000000");
                    type.setNonce(nonce);
                    KlaySignTransactionResponse response = w3.klaySignTransaction(type).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionObject = {
                    "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "nonce": "0x1"
                }

                sdk.klay.signTransaction(transactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "nonce": "0x1"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sign_transaction(transactionObject)

            print(klay_response)
  /klay/transaction/signTransactionAsFeePayer:
    post:
      operationId: signTransactionAsFeePayer
      summary: '[Transaction-signTransactionAsFeePayer]'
      description: |
        Constructs a transaction with given parameters and signs the transaction with a fee payer's private key. This method can be used either to generate a fee payer signature or to make a final raw transaction that is ready to submit to Klaytn network. In case you just want to extract the fee-payer signature, simply take the feePayerSignatures from the result. Note that the raw transaction is not final if the sender's signature is not attached (that is, signatures in tx is empty).

        `klay_signTransactionAsFeePayer` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_signTransactionAsFeePayer`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_signTransactionAsFeePayer`
      tags:
        - klay
      parameters:
        - name: transactionData
          required: true
          schema:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          description: Transaction data.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySignTransactionAsFeePayerReq'
      responses:
        '200':
          description: Returns signed raw transaction and transaction object including the fee payer's signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySignTransactionAsFeePayerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/signTransactionAsFeePayer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_signTransactionAsFeePayer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "typeInt": 17,
                  "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                  "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                  "gas": "0x76c0",
                  "gasPrice": "0x5d21dba00",
                  "value": "0xf4",
                  "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                  "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySignTransactionAsFeePayerResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySignTransactionAsFeePayerExample   {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klaySignTransactionAsFeePayerExample() throws IOException {
                    KlaytnTransactionTypes type = new KlaytnTransactionTypes();
                    String address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
                    String nonce = "0x1";
                    type.setTypeInt(17);
                    type.setFrom(address);
                    type.setTo("0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075");
                    type.setValue("0xf4");
                    type.setGas("0x76c0");
                    type.setGasPrice("0x5d21dba00");
                    type.setInput("0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001");
                    type.setFeePayer(address);
                    type.setNonce(nonce);
                    KlaySignTransactionAsFeePayerResponse response = w3.klaySignTransactionAsFeePayer(type).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const txObject = {
                    "typeInt": 17,
                    "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                    "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                    "gas": "0x76c0", "gasPrice": "0x5d21dba00",
                    "value": "0xf4",
                    "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                    "feePayer": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                    "nonce": "0x1",
                }

                sdk.klay.signTransactionAsFeePayer(txObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            txObject = {
                "typeInt": 17,
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                "gas": "0x76c0", "gasPrice": "0x5d21dba00",
                "value": "0xf4",
                "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                "feePayer": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "nonce": "0x1"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sign_transaction_as_fee_payer(txObject)

            print(klay_response)
  /klay/configuration/chainID:
    post:
      operationId: chainID
      summary: '[Configuration-chainID]'
      description: |
        Returns the chain ID of the chain.

        **JSONRPC:** `klay_chainID`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_chainID
      responses:
        '200':
          description: The chain ID of the chain.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Integer of the chain ID of the chain.
                        example: '0x7e2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/chainID' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_chainID",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayChainIDResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayChainIdExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayChainIdExample() throws IOException {
                    KlayChainIDResponse cr = w3.klayChainID().send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                sdk.klay.chainId({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.chain_id()

            print(klay_response)
  /klay/configuration/clientVersion:
    post:
      operationId: clientVersion
      summary: '[Configuration-clientVersion]'
      description: |
        Returns the current client version of a Klaytn node.

        **JSONRPC:** `klay_clientVersion`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_clientVersion
      responses:
        '200':
          description: The current client version of a Klaytn node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The current client version of a Klaytn node.
                        example: Klaytn/v0.9.1+3518232250/linux-amd64/go1.11.2
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/clientVersion' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_clientVersion",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayClientVersionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayClientVersionExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayClientVersionExample() throws IOException {
                    KlayClientVersionResponse cr = w3.klayClientVersion().send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                sdk.klay.clientVersion({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.client_version()

            print(klay_response)
  /klay/configuration/gasPrice:
    post:
      operationId: gasPrice
      summary: '[Configuration-gasPrice]'
      description: |
        Returns a suggestion for a gas price in peb.

        **JSONRPC:** `klay_gasPrice`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_gasPrice
      responses:
        '200':
          description: Returns a suggestion for a gas price in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current gas price in peb
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/gasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_gasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGasPriceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGasPriceExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGasPriceExample() throws IOException {
                    KlayGasPriceResponse gr = w3.klayGasPrice().send();
                    gr.getResult();
                }
            }
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.gas_price()

            print(klay_response)
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                sdk.klay.gasPrice({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
  /klay/configuration/gasPriceAt:
    post:
      operationId: gasPriceAt
      summary: '[Configuration-gasPriceAt]'
      description: |
        Returns different values based on the condition described below. The unit of the return value is peb.

        - If baseFee is undefined in the header, it returns the unit price from the governance parameter

        - If the block is a pending block, it returns the gas price of the txpool.

        - Otherwise, it returns the base fee of the given block.

        **JSONRPC:** `klay_gasPriceAt`
      tags:
        - klay
      parameters:
        - name: blockNumber
          in: query
          description: Block number. If omitted, latest unit price will be returned.
          schema:
            oneOf:
              - $ref: '#/components/schemas/IntegerBlockNumber'
              - $ref: '#/components/schemas/HexadecimalBlockNumber'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGasPriceAtReq'
      responses:
        '200':
          description: Integer of the current gas price in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current gas price in peb.
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/gasPriceAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_gasPriceAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x64"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.KlayGasPriceAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGasPriceAtExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGasPriceAtExample() throws IOException {
            //        KlayGasPriceAtResponse gr = w3.klayGasPriceAt(
            //            "0x64")
            //        .send();
            //        gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-

            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 1;
                sdk.klay.gasPriceAt({ blockNumber }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            baseFee = "0x64"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.gas_price_at(baseFee)

            print(klay_response)
  /klay/configuration/getChainConfig:
    post:
      operationId: .getChainConfig
      summary: '[Configuration-getChainConfig]'
      description: |
        Returns the configuration of the chain.

        **JSONRPC:** `klay_getChainConfig`
      tags:
        - klay
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: false
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetChainConfigReq'
      responses:
        '200':
          description: The chain configuration of the chain.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetChainConfigResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getChainConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getChainConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [100]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetChainConfigResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetChainConfigExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetChainConfigExample() throws IOException {
                    Integer blogNumberOrTag = 100;
                    KlayGetChainConfigResponse response = w3.klayGetChainConfig(blogNumberOrTag).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumberOrTag = 100
                sdk.klay.getChainConfig({ blockNumberOrTag }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = 100

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_chain_config()

            print(klay_response)
  /klay/configuration/isParallelDBWrite:
    post:
      operationId: isParallelDBWrite
      summary: '[Configuration-isParallelDBWrite]'
      description: |
        Returns true if the node is writing blockchain data in parallel manner. It is enabled by default.

        **JSONRPC:** `klay_isParallelDBWrite`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_isParallelDBWrite
      responses:
        '200':
          description: Returns true if the node is writing blockchain data in parallel manner.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true means the node is writing blockchain data in parallel manner. It is false if the node is writing the data in serial manner.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/isParallelDBWrite' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_isParallelDBWrite",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayIsParallelDBWriteResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayIsParallelDBWriteExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void klayIsParallelDBWriteExample() throws IOException {
                    KlayIsParallelDBWriteResponse response = w3.klayIsParallelDBWrite().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.klay.isParallelDBWrite({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.is_parallel_db_write()

            print(klay_response)
  /klay/configuration/isSenderTxHashIndexingEnabled:
    post:
      operationId: isSenderTxHashIndexingEnabled
      summary: '[Configuration-isSenderTxHashIndexingEnabled]'
      description: |
        Returns true if the node is indexing sender transaction hash to transaction hash mapping information. It is disabled by default and can be enabled by --sendertxhashindexing.

        **JSONRPC:** `klay_isSenderTxHashIndexingEnabled`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_isSenderTxHashIndexingEnabled
      responses:
        '200':
          description: Returns true if the node is indexing sender transaction hash to transaction hash mapping information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: '`true` means the node is indexing sender transaction hash to transaction hash mapping information.'
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/isSenderTxHashIndexingEnabled' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_isSenderTxHashIndexingEnabled",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayIsSenderTxHashIndexingEnabledResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayIsSenderTxHashIndexingEnabledExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayIsSenderTxHashIndexingEnabledExample() throws IOException {
                    KlayIsSenderTxHashIndexingEnabledResponse response = w3.klayIsSenderTxHashIndexingEnabled().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.klay.isSenderTxHashIndexingEnabled({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.is_sender_tx_hash_indexing_enabled()

            print(klay_response)
  /klay/configuration/protocolVersion:
    post:
      operationId: protocolVersion
      summary: '[Configuration-protocolVersion]'
      description: |
        Returns the Klaytn protocol version of the node. The current version (as of v1.9.0) of Cypress/Baobab is istanbul/65.

        **JSONRPC:** `klay_protocolVersion`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_protocolVersion
      responses:
        '200':
          description: Returns the Klaytn protocol version of the node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The Klaytn protocol version of the node.
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/protocolVersion' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_protocolVersion",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayProtocolVersionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayProtocolVersionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayProtocolVersionExample() throws IOException {
                    KlayProtocolVersionResponse response = w3.klayProtocolVersion().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.protocolVersion({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.protocol_version()

            print(klay_response)
  /klay/configuration/rewardbase:
    post:
      operationId: rewardbase
      summary: '[Configuration-rewardbase]'
      description: |
        Returns the rewardbase of the current node. Rewardbase is the address of the account where the block rewards goes to. It is only required for CNs.

        **JSONRPC:** `klay_rewardbase`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_rewardbase
      responses:
        '200':
          description: Returns the rewardbase of the current node
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 20-byte DATA
                        description: Address.
                        example: '0x96Fd91f34Cc8da9f6338C106Ba37aA8B48FB4Fa5'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/rewardbase' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_rewardbase",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayRewardbaseResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayRewardBaseExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayRewardBaseExample() throws IOException {
                    KlayRewardbaseResponse response = w3.klayRewardbase().send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.rewardbase({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.rewardbase()

            print(klay_response)
  /klay/filter/getFilterChanges:
    post:
      operationId: getFilterChanges
      summary: '[Filter-getFilterChanges]'
      description: |
        Polling method for a filter, which returns an array of logs which occurred since last poll.

        **JSONRPC:** `klay_getFilterChanges`
      tags:
        - klay
      parameters:
        - name: QUANTITY
          required: true
          schema:
            type: string
          description: The filter id (e.g., "0x16" // 22).
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getFilterChanges
                    params:
                      type: array
                      items:
                        type: string
                        title: QUANTITY
                      description: The filter id (e.g., "0x16" // 22).
                      example:
                        - '0x16'
      responses:
        '200':
          description: Returns an array of logs which occurred since last poll.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetFilterChangesResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getFilterChanges' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getFilterChanges",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetFilterChangesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetFilterChangesExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetFilterChangesExample() throws IOException {
                    KlayGetFilterChangesResponse response = w3.klayGetFilterChanges("0x1aa7b9746d4192e90fb0acd89c514375").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const quantity = "0x16"
                sdk.klay.getFilterChanges(quantity, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x63000c8f11e790cb4c93b0659319a159"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_filter_changes(quantity)

            print(klay_response)
  /klay/filter/getFilterLogs:
    post:
      operationId: getFilterLogs
      summary: '[Filter-getFilterLogs]'
      description: |
        Returns an array of all logs matching filter with given id, which has been obtained using klay_newFilter.Note that filter ids returned by other filter creation functions, such as klay_newBlockFilter or klay_newPendingTransactionFilter, cannot be used with this function.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        - The number of maximum returned results in a single query (Default: 10,000).

        - The execution duration limit of a single query (Default: 10 seconds).

        **JSONRPC:** `klay_getFilterLogs`
      tags:
        - klay
      parameters:
        - name: QUANTITY
          required: true
          schema:
            type: string
          description: The filter id
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getFilterLogs
                    params:
                      type: array
                      items:
                        type: string
                        title: QUANTITY
                      description: The filter id
                      example:
                        - '0xd32fd16b6906e67f6e2b65dcf48fc272'
      responses:
        '200':
          description: Returns an array of all logs matching filter with given id. See klay_getFilterChanges.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetFilterLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getFilterLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getFilterLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetFilterLogsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetFilterLogsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetFilterLogsExample() throws IOException {
                    String quantity = "0x16";

                    KlayGetFilterLogsResponse response = w3.klayGetFilterLogs(quantity).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const quantity = "0x16"
                sdk.klay.getFilterLogs(quantity, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x16"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_filter_logs(quantity)

            print(klay_response)
  /klay/filter/getLogs:
    post:
      operationId: getLogs
      summary: '[Filter-getLogs]'
      description: |
        Returns an array of all logs matching a given filter object.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        -The number of maximum returned results in a single query (Default: 10,000).

        -The execution duration limit of a single query (Default: 10 seconds).

        **NOTE**: In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_getLogs`
      tags:
        - klay
      parameters:
        - name: filterOptions
          required: true
          schema:
            $ref: '#/components/schemas/FilterOptions'
          description: The filter options.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getLogs
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/FilterOptions'
                      description: The filter options.
                      example:
                        - fromBlock: '0x1'
                          toBlock: latest
                          address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
      responses:
        '200':
          description: Returns an array of all logs matching a given filter object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"fromBlock":"0x1","toBlock":"latest","address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b"}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.FilterOptions;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetLogsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetLogsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void klayGetLogsExample() throws IOException {
                    FilterOptions options = new FilterOptions();
                    options.setFromBlock("latest");
                    options.setToBlock("latest");
                    options.setAddress("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    KlayGetLogsResponse response = w3.klayGetLogs(options).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const filterOptions = {
                    "fromBlock": "latest",
                    "toBlock": "latest",
                    "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b"
                }
                
                sdk.klay.getLogs(filterOptions, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "latest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_logs(filterOptions)

            print(klay_response)
  /klay/filter/newBlockFilter:
    post:
      operationId: newBlockFilter
      summary: '[Filter-newBlockFilter]'
      description: |
        Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call klay_getFilterChanges.

        **JSONRPC:** `klay_newBlockFilter`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_newBlockFilter
      responses:
        '200':
          description: Returns a filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0xc2f2e8168a7e38b5d979d0f7084130ee'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/newBlockFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_newBlockFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayNewBlockFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayNewBlockFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayNewBlockFilterExample() throws IOException {
                    KlayNewBlockFilterResponse response = w3.klayNewBlockFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.newBlockFilter({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.new_block_filter()

            print(klay_response)
  /klay/filter/newFilter:
    post:
      operationId: newFilter
      summary: '[Filter-newFilter]'
      description: |
        Creates a filter object, based on filter options, to notify when the state changes (logs).
        - To check if the state has changed, call klay_getFilterChanges.
        - To obtain all logs matching the filter created by klay_newFilter, call klay_getFilterLogs.

        **A note on specifying topic filters:** Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:
        - [] "anything"
        - [A] "A in first position (and anything after)"
        - [null, B] "anything in first position AND B in second position (and anything after)"
        - [A, B] "A in first position AND B in second position (and anything after)"
        - [[A, B], [A, B]] "(A OR B) in first position AND (A OR B) in second position (and anything after)"

        **NOTE:** In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_newFilter`
      tags:
        - klay
      parameters:
        - name: filterOptions
          required: true
          schema:
            $ref: '#/components/schemas/schemas-FilterOptions'
          description: The filter options
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayNewFilterReq'
      responses:
        '200':
          description: Returns a filter id
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayNewFilterResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/newFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_newFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "fromBlock":"earliest",
                  "toBlock":"latest",
                  "address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "topics":[
                    "0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"
                  ]
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import java.util.List;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.FilterOptions;
            import org.web3j.protocol.klaytn.core.method.response.KlayNewFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayNewFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayNewFilterExample() throws IOException {
                    FilterOptions filterOptions = new FilterOptions();
                    filterOptions.setFromBlock("latest");
                    filterOptions.setToBlock("latest");
                    filterOptions.setAddress("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    filterOptions.setTopics(List.of("0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"));
                    KlayNewFilterResponse response = w3.klayNewFilter(filterOptions).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const fromBlock = 'earliest'
                const toBlock = 'latest'
                const address = '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
                const topics = [
                    '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
                ]
                sdk.klay.newFilter({ fromBlock, toBlock, address, topics }, {}, (err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "earliest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "topics": ["0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"]
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.new_filter(filterOptions)

            print(klay_response)
  /klay/filter/newPendingTransactionFilter:
    post:
      operationId: newPendingTransactionFilter
      summary: '[Filter-newPendingTransactionFilter]'
      description: |
        Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call klay_getFilterChanges.

        **JSONRPC:** `klay_newPendingTransactionFilter`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_newPendingTransactionFilter
      responses:
        '200':
          description: Returns a filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0x90cec22a723fcc725fb2462733c2880f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/newPendingTransactionFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_newPendingTransactionFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayNewPendingTransactionFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayNewPendingTransactionFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayNewPendingTransactionFilterExample() throws IOException {
                    KlayNewPendingTransactionFilterResponse response = w3.klayNewPendingTransactionFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.newPendingTransactionFilter({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.new_pending_transaction_filter()

            print(klay_response)
  /klay/filter/subscribe:
    post:
      operationId: subscribe
      summary: '[Filter-subscribe]'
      description: |
        Creates a new subscription to specific events by using either RPC Pub/Sub over WebSockets or filters over HTTP. It allows clients to wait for events instead of polling for them.

        The node will return a subscription id for each subscription created. For each event that matches the subscription, a notification with relevant data is sent together with the subscription id. If a connection is closed, all subscriptions created over the connection are removed.

        **JSONRPC:** `klay_subscribe`
      tags:
        - klay
      parameters:
        - name: notificationType
          required: true
          schema:
            type: string
            enum:
              - newHeads
              - logs
          description: 'A notification type: "newHeads" or "logs"'
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_subscribe
                    params:
                      type: array
                      items:
                        title: NotificationType
                        type: string
                        enum:
                          - newHeads
                          - logs
                      description: 'A notification type: "newHeads" or "logs"'
                      example:
                        - newHeads
      responses:
        '200':
          description: Return a subscription id when a subscription is created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        example: '0xbdab16c8e4ae1b9e6930c78359de3e0e'
                        description: A subscription id when a subscription is created. For each event that matches the subscription, a notification with relevant data will be delivered as well.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/subscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_subscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["newHeads"]
            }'
  /klay/filter/uninstallFilter:
    post:
      operationId: uninstallFilter
      summary: '[Filter-uninstallFilter]'
      description: |
        Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally, filters timeout when they are not requested with klay_getFilterChanges for a period of time.

        **JSONRPC:** `klay_uninstallFilter`
      tags:
        - klay
      parameters:
        - name: filter
          required: true
          schema:
            type: string
          description: The filter id
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_uninstallFilter
                    params:
                      type: array
                      items:
                        type: string
                        title: Filter
                      description: The filter id
                      example:
                        - '0xd32fd16b6906e67f6e2b65dcf48fc272'
      responses:
        '200':
          description: Return true if the filter was successfully uninstalled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the filter was successfully uninstalled, otherwise false.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/uninstallerFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_uninstallFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayUninstallFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayUninstallFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayUninstallFilterExample() throws IOException {
                    String filter = "0xd32fd16b6906e67f6e2b65dcf48fc272";
                    KlayUninstallFilterResponse response = w3.klayUninstallFilter(filter).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const quantity = '0xd32fd16b6906e67f6e2b65dcf48fc272'

                sdk.klay.uninstallFilter(quantity, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0xd32fd16b6906e67f6e2b65dcf48fc272"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.uninstall_filter(quantity)

            print(klay_response)
  /klay/filter/unsubscribe:
    post:
      operationId: unsubscribe
      summary: '[Filter-unsubscribe]'
      description: |
        Cancels the subscription with a specific subscription id by using either RPC Pub/Sub over WebSockets or filters over HTTP. Only the connection that created a subscription can unsubscribe from it.

        **JSONRPC:** `klay_unsubscribe`
      tags:
        - klay
      parameters:
        - name: subscriptionId
          required: true
          schema:
            type: string
            format: hex
          description: A subscription id.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_unsubscribe
                    params:
                      type: array
                      description: A subscription id.
                      items:
                        title: SubscriptionId
                        type: string
                        format: hex
                        description: A subscription id.
                      example:
                        - '0xab8ac7a4045025d0c2807d63060eea6d'
      responses:
        '200':
          description: Return true if the subscription was successfully canceled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the subscription was successfully canceled, otherwise false.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/unsubscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_unsubscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xab8ac7a4045025d0c2807d63060eea6d"]
            }'
  /klay/gas/feeHistory:
    post:
      operationId: feeHistory
      summary: '[Gas-feeHistory]'
      description: |
        Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.

        **NOTE:** This API is effective after Klaytn v1.8.0

        **JSONRPC:** `klay_feeHistory`
      tags:
        - klay
      parameters:
        - name: blockCount
          required: true
          schema:
            $ref: '#/components/schemas/BlockCount'
          description: Number of blocks in the requested range in hexadecimal. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
          in: query
        - name: lastBlock
          in: query
          description: Highest numbered block of the requested range as block number or block tag.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
        - name: rewardPercentiles
          required: true
          schema:
            $ref: '#/components/schemas/RewardPercentiles'
          description: An array of floating point values between 0 and 100.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayFeeHistoryReq'
      responses:
        '200':
          description: Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayFeeHistoryResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/feeHistory' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_feeHistory",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x10", "latest", [0.1, 0.2, 0.3]]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.gas;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayFeeHistoryResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.List;

            public class KlayFeeHistoryExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void klayFeeHistoryExample() throws IOException {
                    KlayFeeHistoryResponse fr = w3.klayFeeHistory(
                        "0x10",
                        "latest",
                        List.of(0.1, 0.2, 0.3))
                    .send();
                    fr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockCount = '0x10'
                const lastBlock = 'latest'
                const rewardPercentiles = [0.1, 0.2, 0.3]
                sdk.klay.feeHistory(blockCount,lastBlock,rewardPercentiles,{}, (err, data, response) => {
                    console.log(data);
                });
               
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockCount = "0x10"
            lastBlock = "latest"
            rewardPercentiles = [0.1, 0.2, 0.3]

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.fee_history(blockCount, lastBlock, rewardPercentiles)

            print(klay_response)
  /klay/gas/lowerBoundGasPrice:
    post:
      operationId: lowerBoundGasPrice
      summary: '[Gas-lowerBoundGasPrice]'
      description: |
        Returns lower bound gas price.

        **JSONRPC:** `klay_lowerBoundGasPrice`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_lowerBoundGasPrice
      responses:
        '200':
          description: Returns lower bound gas price.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Lower bound gas price.
                        example: '0xae9f7bcc00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/lowerBoundGasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_lowerBoundGasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.gas;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayLowerBoundGasPriceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayLowerBoundGasPriceExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayLowerBoundGasPriceExample() throws IOException {
                    KlayLowerBoundGasPriceResponse response = w3.klayLowerBoundGasPrice().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.lowerBoundGasPrice({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.lower_bound_gas_price()

            print(klay_response)
  /klay/gas/maxPriorityFeePerGas:
    post:
      operationId: maxPriorityFeePerGas
      summary: '[Gas-maxPriorityFeePerGas]'
      description: |
        Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.

        **NOTE:** This API is effective after Klaytn v1.8.0

        **JSONRPC:** `klay_maxPriorityFeePerGas`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_maxPriorityFeePerGas
      responses:
        '200':
          description: Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current max priority fee per gas
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/maxPriorityFeePerGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_maxPriorityFeePerGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.gas;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayMaxPriorityFeePerGasResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayMaxPriorityFeePerGasExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    KlayMaxPriorityFeePerGasResponse response = w3.klayMaxPriorityFeePerGas().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.maxPriorityFeePerGas({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.max_priority_fee_per_gas()

            print(klay_response)
  /klay/gas/upperBoundGasPrice:
    post:
      operationId: upperBoundGasPrice
      summary: '[Gas-upperBoundGasPrice]'
      description: |
        Returns upper bound gas price.

        **JSONRPC:** `klay_upperBoundGasPrice`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_upperBoundGasPrice
      responses:
        '200':
          description: Returns upper bound gas price.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Upper bound gas price.
                        example: '0xae9f7bcc00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/upperBoundGasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_upperBoundGasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.gas;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayUpperBoundGasPriceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayUpperBoundGasPriceExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayUpperBoundGasPriceExample() throws IOException {
                    KlayUpperBoundGasPriceResponse response = w3.klayUpperBoundGasPrice().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.klay.upperBoundGasPrice({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.upper_bound_gas_price()

            print(klay_response)
  /klay/miscellaneous/getStakingInfo:
    post:
      operationId: getStakingInfo
      summary: '[Miscellaneous-getStakingInfo]'
      tags:
        - klay
      description: |
        The getStakingInfo returns staking information at a specific block. The result includes the following information.
        - BlockNum: The block number at which the staking information is given.
        - CouncilNodeAddrs: The addresses of the consensus node.
        - CouncilRewardAddrs: The addresses to which the block reward of the associated nodes is sent.
        - CouncilStakingAddrs: The contract addresses in which the associated nodes deploy for staking.
        - CouncilStakingAmounts: The amount of KLAY which the associated nodes stake.
        - Gini: Gini coefficient.
        - KIRAddr: The contract address of KIR.
        - PoCAddr: The contract address of KGF. PoC is the previous name of KGF.
        - UseGini: The boolean value whether or not the Gini coefficient is used.

        Note that the order of all addresses and the staking amounts are matched.

        **JSONRPC:** `klay_getStakingInfo`
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetStakingInfoReq'
      responses:
        '200':
          description: Returns staking information at a specific block
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetStakingInfoResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getStakingInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getStakingInfo",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetStakingInfoResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetStakingInfoExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetStakingInfoExample() throws IOException {
                    String blockTag = "latest";

                    KlayGetStakingInfoResponse response = w3
                            .klayGetStakingInfo(blockTag)
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumberOrTag = 'latest'
                
                sdk.klay.getStakingInfo(blockNumberOrTag, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_staking_info(blockTag)

            print(klay_response)
  /klay/miscellaneous/nodeAddress:
    post:
      operationId: nodeAddress
      summary: '[Miscellaneous-nodeAddress]'
      description: |
        The nodeAddress property provides the address of the node that a user is using. It is derived from the nodekey and used to sign consensus messages.

        **JSONRPC:** `klay_nodeAddress`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_nodeAddress
      responses:
        '200':
          description: Return 20 BYTE address of a node
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: 20 BYTE address of a node
                        example: '0x86a68a935953996509e724c6afd521df8d7d13ba'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/nodeAddress' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_nodeAddress",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayNodeAddressResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetNodeAddressExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klayGetNodeAddressExample() throws IOException {
                    KlayNodeAddressResponse response = w3.klayNodeAddress().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
               
                sdk.klay.nodeAddress({},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.node_address()

            print(klay_response)
  /klay/miscellaneous/sha3:
    post:
      operationId: sha3
      summary: '[Miscellaneous-sha3]'
      description: |
        Returns Keccak-256 (not the standardized SHA3-256) of the given data.

        **JSONRPC:** `klay_sha3`
      tags:
        - klay
      parameters:
        - name: data
          required: true
          schema:
            type: string
            format: DATA
          description: The data to convert into a SHA3 hash.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySha3Req'
      responses:
        '200':
          description: Return the SHA3 result of the given data.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySha3Resp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sha3' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sha3",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x11223344"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.miscellaneous;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlaySha3Response;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySha3Example {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void klaySha3Example() throws IOException {
                    String data = "0x11223344";
                    KlaySha3Response response = w3.klaySha3(data).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const data = '0x11223344'
                
                sdk.klay.sha3(data, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            hashData = "0x11223344"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sha3(hashData)

            print(klay_response)
  /eth/account/accounts:
    post:
      summary: '[Account-accounts]'
      tags:
        - eth
      operationId: accounts
      description: |
        Returns a list of addresses owned by client

        **JSONRPC:** `eth_accounts`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_accounts
      responses:
        '200':
          description: Addresses owned by the client
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthAccountsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/accounts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_accounts",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthAccounts;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthAccountsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethAccountsExample() throws IOException {
                    EthAccounts ar = w3.ethAccounts().send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const OpenSdk = require("opensdk-javascript");


            ( () => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                sdk.eth.accounts({},(err,data,response)=>{
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.accounts()

            print(eth_response)
  /eth/account/getBalance:
    post:
      operationId: getBalance
      summary: '[Account-getBalance]'
      description: |
        Returns the balance of the account of given address.

        **JSONRPC:** `eth_getBalance`
      tags:
        - eth
      parameters:
        - name: address
          in: query
          description: Address to check for balance.
          required: true
          schema:
            type: string
            format: 20-byte DATA
        - name: blockNumberOrHash
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetBalanceReq'
      responses:
        '200':
          description: Returns the balance of the account of given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetBalanceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBalance' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBalance",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xc94770007dda54cF92009BFF0dE90c06F603a09f", "latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetBalance;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetBalanceExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGetBalanceExample() throws IOException {
                    EthGetBalance br = w3.ethGetBalance(
                                    "0xc94770007dda54cF92009BFF0dE90c06F603a09f",
                                    DefaultBlockParameter.valueOf("latest"))
                            .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
                const blockNumberOrHashOrTag = 'latest'

                sdk.eth.getBalance(address, blockNumberOrHashOrTag, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec"
            blockNumberOrHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_balance(address, blockNumberOrHash)

            print(eth_response)
  /eth/account/getCode:
    post:
      operationId: getCode
      summary: '[Account-getCode]'
      description: |
        Returns code at a given address.

        **JSONRPC:** `eth_getCode`
      tags:
        - eth
      parameters:
        - name: address
          in: query
          description: Address
          required: true
          schema:
            $ref: '#/components/schemas/Address'
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetCodeReq'
      responses:
        '200':
          description: Returns code at a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetCodeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getCode' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getCode",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b", "0x2"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetCode;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetCodeExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGetCodeExample() throws IOException {
                    EthGetCode br = w3.ethGetCode(
                        "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                            DefaultBlockParameter.valueOf(BigInteger.valueOf(2)))
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0xce9fba8dca42d096d019cc1cb89f5803a2c40fb3'
                const blockNumberOrHash = '0x2'
                
                sdk.eth.getCode(address, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec"
            blockNumberOrHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_code(address, blockNumberOrHash)

            print(eth_response)
  /eth/account/getTransactionCount:
    post:
      summary: '[Account-getTransactionCount]'
      tags:
        - eth
      operationId: getTransactionCount
      description: |
        Returns the number of transactions sent from an address.

        **JSONRPC:** `eth_getTransactionCount`
      parameters:
        - name: address
          in: query
          description: Address
          required: true
          schema:
            $ref: '#/components/schemas/Address'
        - name: blockNumberOrHashOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionCountReq'
      responses:
        '200':
          description: Integer of the number of transactions send from this address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionCountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionCount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionCount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetTransactionCountExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetTransactionCountExample() throws IOException {
                    String address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f";
                    DefaultBlockParameter blockTag = DefaultBlockParameter.valueOf("latest");
                    EthGetTransactionCount response = w3.ethGetTransactionCount(
                        address,
                        blockTag
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
                const blockNumberOrHashOrTag = 'latest'
                
                sdk.eth.getTransactionCount(address, blockNumberOrHashOrTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_count(address, blockTag)

            print(eth_response)
  /eth/account/sign:
    post:
      summary: '[Account-sign]'
      tags:
        - eth
      operationId: sign
      description: |
        The sign method calculates a Klaytn-specific signature with:

        sign(keccak256("\x19Klaytn Signed Message:\n" + len(message) + message)))

        Adding a prefix to the message makes the calculated signature recognizable as a Klaytn-specific signature. This prevents misuse where a malicious dApp signs arbitrary data (e.g. transaction) and uses the signature for impersonation.

        `eth_sign` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `eth_sign`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `eth_sign`
      parameters:
        - name: account
          in: query
          description: Address
          required: true
          schema:
            type: string
            format: 20-byte DATA
        - name: message
          in: query
          description: Message to sign
          required: true
          schema:
            type: string
            format: N-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_sign
                    params:
                      type: array
                      items:
                        anyOf:
                          - title: Account
                            description: Address
                            type: string
                            format: 20-byte DATA
                          - title: Message
                            description: Message to sign
                            type: string
                            format: N-byte DATA
                      example:
                        - '0x9b2055d370f73ec7d8a03e965129118dc8f5bf83'
                        - '0xdeadbeaf'
      responses:
        '200':
          description: Return signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: Signature
                        example: '0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/sign' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_sign",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x9b2055d370f73ec7d8a03e965129118dc8f5bf83", "0xdeadbeaf"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.account;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthSign;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.concurrent.ExecutionException;

            public class EthSignExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void ethSignExample() throws IOException, ExecutionException, InterruptedException {
                    String address = "0x413ba0e5f6f00664598b5c80042b1308f4ff1408";
                    EthSign response = w3.ethSign(address, "0xdeadbeaf").send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0x487f2dfef230c2120b8cc55c5087b103146536ec'
                const message = '0xdeadbeaf'

                sdk.eth.sign(address, message, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec"
            message = "0xdeadbeaf"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.sign(address, message)

            print(eth_response)
  /eth/block/blockNumber:
    post:
      operationId: blockNumber
      summary: '[Block-blockNumber]'
      description: |
        Returns the number of the most recent block.

        **JSONRPC:** `eth_blockNumber`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_blockNumber
      responses:
        '200':
          description: Returns the number of the most recent block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current block number the client is on.
                        example: '0xc94'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/blockNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_blockNumber",
              "id": 83,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthBlockNumber;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthBlockNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethBlockNumberExample() throws IOException {
                    EthBlockNumber br = w3.ethBlockNumber().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");


            ( () => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                sdk.eth.blockNumber({},(err,data,response)=>{
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.block_number()

            print(eth_response)
  /eth/block/getBlockByHash:
    post:
      summary: '[Block-getBlockByHash]'
      tags:
        - eth
      operationId: getBlockByHash
      description: |
        Returns information about a block by hash.

        Please check Caution-Block before using this API

        **JSONRPC:** `eth_getBlockByHash`
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: isTransactionObjects
          in: query
          description: If true, it returns the full transaction objects, if false only the hashes of the transactions.
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayGetBlockByHashReq'
      responses:
        '200':
          description: Returns information about a block by hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayGetBlockByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockByHash",
              "id": 83,
              "jsonrpc": "2.0",
              "params": ["0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c", true]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetBlockByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetBlockByHashExample() throws IOException {
                    EthBlock br = w3.ethGetBlockByHash(
                        "0x21509a5aa2c03e9c99e3320cc7805c601b370c6a4529b29000fd8e2360d8c659",
                        true)
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
                const transactionObject = true
                sdk.eth.getBlockByHash(blockHash, transactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"
            transactionObject = True

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_by_hash(blockHash, transactionObject)

            print(eth_response)
  /eth/block/getBlockByNumber:
    post:
      operationId: getBlockByNumber
      summary: '[Block-getBlockByNumber]'
      description: |
        Returns information about a block by block number.

        Please check Caution-Block before using this API.

        **JSONRPC:** `eth_getBlockByNumber`
      tags:
        - eth
      parameters:
        - name: blockNumberOrTag
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          in: query
        - name: isTransactionObjects
          in: query
          description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          required: true
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetBlockByNumberReq'
      responses:
        '200':
          description: Returns information about a block by block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetBlockByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockByNumber",
              "id": 83,
              "jsonrpc": "2.0",
              "params": ["0xd0054e", false]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetBlockByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetBlockByNumberExample() throws IOException {
                    EthBlock er = w3.ethGetBlockByNumber(
                        DefaultBlockParameter.valueOf(new BigInteger("8f668", 16)),
                        false)
                    .send();
                    er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 1
                const transactionObject = true
                sdk.eth.getBlockByNumber(blockNumber, transactionObject, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0xd0054e"
            transactionObject = False

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_by_number(blockTag, transactionObject)

            print(eth_response)
  /eth/block/getBlockTransactionCountByHash:
    post:
      operationId: getBlockTransactionCountByHash
      summary: '[Block-getBlockTransactionCountByHash]'
      description: |
        Returns the number of transactions in a block from a block that matches the given hash.

        **JSONRPC:** `eth_getBlockTransactionCountByHash`
      tags:
        - eth
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockTransactionCountByHashReq'
      responses:
        '200':
          description: Returns the number of transactions in a block from a block that matches the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the number of transactions in this block.
                        example: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockTransactionCountByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockTransactionCountByHash",
              "id": 83,
              "jsonrpc": "2.0",
              "params": ["0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthGetBlockTransactionCountByHash;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetBlockTransactionCountByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGetBlockTransactionCountByHashExample() throws IOException {
                    EthGetBlockTransactionCountByHash br = w3.ethGetBlockTransactionCountByHash(
                        "0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621")
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'

                sdk.eth.getBlockTransactionCountByHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_transaction_count_by_hash(blockHash)

            print(eth_response)
  /eth/block/getBlockTransactionCountByNumber:
    post:
      summary: '[Block-getBlockTransactionCountByNumber]'
      tags:
        - eth
      operationId: getBlockTransactionCountByNumber
      description: |
        Returns the number of transactions in a block matching the given block number.

        **JSONRPC:** `eth_getBlockTransactionCountByNumber`
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetBlockTransactionCountByNumberReq'
      responses:
        '200':
          description: Integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetBlockTransactionCountByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockTransactionCountByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockTransactionCountByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe8"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetBlockTransactionCountByNumber;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetBlockTransactionCountByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void ethGetBlockTransactionCountByNumberExample() throws IOException {
                    EthGetBlockTransactionCountByNumber r = w3.ethGetBlockTransactionCountByNumber(
                        DefaultBlockParameter.valueOf(BigInteger.valueOf(232))
                    ).send();
                    r.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = "0xe8"
                sdk.eth.getBlockTransactionCountByNumber(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0xe8"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_transaction_count_by_number(blockNumber)

            print(eth_response)
  /eth/block/getHeaderByHash:
    post:
      operationId: getHeaderByHash
      summary: '[Block-getHeaderByHash]'
      description: |
        Returns information about a header by hash.

        Please check Caution-Header before using this API.

        **JSONRPC:** `eth_getHeaderByHash`
      tags:
        - eth
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetHeaderByHashReq'
      responses:
        '200':
          description: Object - A header object, or null when no header was found. Otherwise, it returns an error.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetHeaderByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getHeaderByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getHeaderByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthGetHeaderByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetHeaderByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetHeaderByHashExample() throws IOException {
            //        EthGetHeaderByHashResponse br = w3.ethGetHeaderByHash(
            //            "0x21509a5aa2c03e9c99e3320cc7805c601b370c6a4529b29000fd8e2360d8c659")
            //        .send();
            //        br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
                
                sdk.eth.getHeaderByHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_header_by_hash(blockHash)

            print(eth_response)
  /eth/block/getHeaderByNumber:
    post:
      summary: '[Block-getHeaderByNumber]'
      tags:
        - eth
      operationId: getHeaderByNumber
      description: |
        Returns information about a header by number.

        Please check the Caution-Header before using this API.

        **JSONRPC:** `eth_getHeaderByNumber`
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetHeaderByNumberReq'
      responses:
        '200':
          description: Returns information about a header by number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetHeaderByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getHeaderByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getHeaderByNumber",
              "id": 83,
              "jsonrpc": "2.0",
              "params":["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthGetHeaderByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetHeaderByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetHeaderByNumberExample() throws IOException {
            //        EthGetHeaderByNumberResponse br = w3.ethGetHeaderByNumber("0x1b4").send();
            //        br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 1
                
                sdk.eth.getHeaderByNumber(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_header_by_number(blockTag)

            print(eth_response)
  /eth/block/getStorageAt:
    post:
      operationId: getStorageAt
      summary: '[Block-getStorageAt]'
      description: |
        Returns the value from a storage position at a given address

        **JSONRPC:** `eth_getStorageAt`
      tags:
        - eth
      parameters:
        - name: Address
          required: true
          in: query
          description: Address of the storage.
          schema:
            type: string
            format: 20-byte DATA
        - name: Quantity
          required: true
          in: query
          description: Integer of the position in the storage.
          schema:
            type: string
            format: hex
        - name: BlockNumberOrHashOrTag
          required: true
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter, or block hash.
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-EthGetHeaderByHashReq'
      responses:
        '200':
          description: The value at this storage position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-EthGetHeaderByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getStorageAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getStorageAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x295a70b2de5e3953354a6a8344e616ed314d7251",
                "0x0",
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetStorageAt;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetStorageAtExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetStorageAtExample() throws IOException {
                    String address = "0x295a70b2de5e3953354a6a8344e616ed314d7251";
                    BigInteger position = BigInteger.valueOf(0);
                    DefaultBlockParameter block = DefaultBlockParameter.valueOf("latest");
                    EthGetStorageAt br = w3.ethGetStorageAt(address,position,block).send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0x295a70b2de5e3953354a6a8344e616ed314d7251'
                const quantity = '0x0'
                const blockNumberOrHashOrTag = 'latest'

                sdk.eth.getStorageAt(address, quantity, blockNumberOrHashOrTag, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x295a70b2de5e3953354a6a8344e616ed314d7251"
            quantity = "0x0"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_storage_at(address, quantity, blockTag)

            print(eth_response)
  /eth/block/getUncleByBlockHashAndIndex:
    post:
      summary: '[Block-getUncleByBlockHashAndIndex]'
      tags:
        - eth
      operationId: getUncleByBlockHashAndIndex
      description: |
        Returns information about a uncle of a block by hash and the uncle's index position. Since there are no uncles in Klaytn, it always returns null.

        **JSONRPC:** `eth_getUncleByBlockHashAndIndex`
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: uncleIndex
          in: query
          description: The uncle's index position.
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleByBlockHashAndIndexReq'
      responses:
        '200':
          description: Return null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c",
                "0x1"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetUncleByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetUncleByBlockHashAndIndexExample() throws IOException {
                    String blockHash = "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a";
                    BigInteger uncleIndex = BigInteger.valueOf(1);
                    EthBlock response = w3.ethGetUncleByBlockHashAndIndex(blockHash, uncleIndex).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a'
                const uncleIndex = '0x1'

                sdk.eth.getUncleByBlockHashAndIndex(blockHash, uncleIndex, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"
            uncleIndex = "0x1"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_by_block_hash_and_index(blockHash, uncleIndex)

            print(eth_response)
  /eth/block/getUncleByBlockNumberAndIndex:
    post:
      summary: '[Block-getUncleByBlockNumberAndIndex]'
      tags:
        - eth
      operationId: getUncleByBlockNumberAndIndex
      description: |
        Returns information about a uncle of a block by number and the uncle's index position. As there are no uncles in Klaytn, it always returns null.

        **JSONRPC:** `eth_getUncleByBlockNumberAndIndex`
      parameters:
        - name: blockNumberOrTag
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          in: query
        - name: uncleIndex
          in: query
          description: The uncle's index position.
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe8", "0x1"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetUncleByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGetUncleByBlockNumberAndIndexExample() throws IOException {
                    EthBlock response = w3.ethGetUncleByBlockHashAndIndex(
                                    "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a",
                                    BigInteger.valueOf(1))
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 119189116
                const uncleIndex = '0x1'

                sdk.eth.getUncleByBlockNumberAndIndex(blockNumber, uncleIndex, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0xe8"
            uncleIndex = "0x1"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_by_block_number_and_index(blockTag, uncleIndex)

            print(eth_response)
  /eth/block/getUncleCountByBlockHash:
    post:
      summary: '[Block-getUncleCountByBlockHash]'
      tags:
        - eth
      operationId: getUncleCountByBlockHash
      description: |
        Returns the number of uncles in a block from a block matching the given block hash. Since there are no uncles in Klaytn, it returns 0x0. It returns null if there is no matching block.

        **JSONRPC:** `eth_getUncleCountByBlockHash`
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleCountByBlockHashReq'
      responses:
        '200':
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleCountByBlockHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleCountByBlockHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleCountByBlockHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthGetUncleCountByBlockHash;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetUncleCountByBlockHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetUncleCountByBlockHashExample() throws IOException {
                    EthGetUncleCountByBlockHash response = w3.ethGetUncleCountByBlockHash(
                        "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a'
                
                sdk.eth.getUncleCountByBlockHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_count_by_block_hash(blockHash)

            print(eth_response)
  /eth/block/getUncleCountByBlockNumber:
    post:
      summary: '[Block-getUncleCountByBlockNumber]'
      tags:
        - eth
      operationId: getUncleCountByBlockNumber
      description: |
        Returns the number of uncles in a block from a block matching the given block number. Since there are no uncles in Klaytn, it returns 0x0. It returns null if there is no matching block.

        **JSONRPC:** `eth_getUncleCountByBlockNumber`
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleCountByBlockNumberReq'
      responses:
        '200':
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleCountByBlockNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleCountByBlockNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleCountByBlockNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe8"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetUncleCountByBlockNumber;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetUncleCountByBlockNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetUncleCountByBlockNumberExample() throws IOException {
                    EthGetUncleCountByBlockNumber response = w3.ethGetUncleCountByBlockNumber(
                        DefaultBlockParameter.valueOf(new BigInteger("e8", 16))
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 119189116
                
                sdk.eth.getUncleCountByBlockNumber(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0xe8"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_count_by_block_number(blockTag)

            print(eth_response)
  /eth/block/mining:
    post:
      summary: '[Block-mining]'
      tags:
        - eth
      operationId: mining
      description: |
        Returns true if client is actively mining new blocks.

        **NOTE:** Currently, every node is on mining mode by default to resend transactions. Please note that the actual "mining" is only performed by the Consensus Nodes (CNs).

        **JSONRPC:** `eth_mining`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthMiningReq'
      responses:
        '200':
          description: true if the client is mining, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthMiningResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/mining' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_mining",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthMining;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthMiningExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethMiningExample() throws IOException {
                    EthMining response = w3.ethMining().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.mining({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.mining()

            print(eth_response)
  /eth/block/syncing:
    post:
      operationId: syncing
      summary: '[Block-syncing]'
      description: |
        Returns an object with data about the sync status or false.

        **JSONRPC:** `eth_syncing`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_syncing
      responses:
        '200':
          description: Returns an object with data about the sync status or false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        oneOf:
                          - type: boolean
                            description: Returns false when not syncing.
                            example: false
                          - type: object
                            required:
                              - startingBlock
                              - currentBlock
                              - highestBlock
                              - pulledStates
                              - knownStates
                            properties:
                              startingBlock:
                                type: string
                                format: hex
                                description: The block at which the import started (will only be reset, after the sync reached his head).
                                example: '0x0'
                              currentBlock:
                                type: string
                                description: The current block, same as eth_blockNumber.
                                format: hex
                                example: '0x3e31e'
                              highestBlock:
                                type: string
                                format: hex
                                description: The estimated highest block.
                                example: '0x827eef'
                              pulledStates:
                                type: string
                                format: hex
                                description: The number of state entries processed until now. If the sync mode is not "fast", zero is returned.
                                example: '0x0'
                              knownStates:
                                type: string
                                format: hex
                                description: The number of known state entries that still need to be pulled. If the sync mode is not "fast", zero is returned.
                                example: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/syncing' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_syncing",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.block;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthSyncing;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthSycingExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethSycingExample() throws IOException {
                    EthSyncing response = w3.ethSyncing().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.syncing({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.syncing()

            print(eth_response)
  /eth/block/getBlockReceipt:
    post:
      operationId: getBlockReceipts
      summary: '[Block-getBlockReceipts]'
      description: |
        Returns receipts included in a block identified by block hash.

        **JSONRPC:** `eth_getBlockReceipts`
      tags:
        - eth
      parameters:
        - name: hashOfBlock
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a block
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayGetBlockReceiptsReq'
      responses:
        '200':
          description: Receipts included in a block. If the target block contains no transaction, an empty array [] is returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockReceiptsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockReceipts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockReceipts",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.klay.block;


            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockReceiptsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetBlockReceiptsExampleGetBlockReceiptsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void EthGetBlockReceiptsExample() throws IOException {
                    String blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";
                    KlayGetBlockReceiptsResponse response = w3.ethGetBlockReceipts(blockHash).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'

                sdk.eth.getBlockReceipts(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_receipts(blockHash)

            print(eth_response)
  /eth/transaction/call:
    post:
      summary: '[Transaction-call]'
      tags:
        - eth
      operationId: call
      description: |
        Executes a new message call immediately, without creating a transaction on the block chain. The eth_call method can be used to query internal contract state, to execute validations coded into a contract or even to test what the effect of a transaction would be without running it live.

        **JSONRPC:** `eth_call`
      parameters:
        - name: callObject
          in: query
          description: The transaction call object. See the next table for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/EthCallObject'
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in default block parameter.The block number is mandatory and defines the context (state) against which the specified transaction should be executed.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
        - name: stateOverrideSet
          in: query
          description: The state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.
          required: false
          schema:
            $ref: '#/components/schemas/StateOverrideSet'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayCallReq'
      responses:
        '200':
          description: The returned data of the call
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayCallResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/call' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_call",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0xbE3892d33620bE5aca8c75D39e7401871194d290", "input": "0x2e64cec1"}, "latest", {"0xbE3892d33620bE5aca8c75D39e7401871194d290": {"code":"0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029"}}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.protocol.core.methods.response.EthCall;

            import java.io.IOException;

            public class EthCallExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethCallExample() throws IOException {
                    EthCall cr = w3.ethCall(
                                    Transaction.createEthCallTransaction(
                                            "0xca7a99380131e6c76cfa622396347107aeedca2d",
                                            "0xbE3892d33620bE5aca8c75D39e7401871194d290",
                                            "0x2e64cec1"),
                                    DefaultBlockParameter.valueOf("latest"))
                            .send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                const callObject = { "from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0xbE3892d33620bE5aca8c75D39e7401871194d290", "input": "0x2e64cec1" }
                const blockTag = 'latest'
                const stateOverrideSet = {
                    "0xbE3892d33620bE5aca8c75D39e7401871194d290":
                        { "code": "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029" }
                }

                sdk.eth.call(callObject, blockTag, {stateOverrideSet}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            call_object = {
                "from": "0xca7a99380131e6c76cfa622396347107aeedca2d",
                "to": "0xbE3892d33620bE5aca8c75D39e7401871194d290",
                "input": "0x2e64cec1"
            }
            block_tag = 'latest'
            state_override_set = {
                "0xbE3892d33620bE5aca8c75D39e7401871194d290":
                    {
                        "code": "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029"
                    }
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.call(call_object, block_tag, state_override_set)

            print(eth_response)
  /eth/transaction/createAccessList:
    post:
      summary: '[Transaction-createAccessList]'
      tags:
        - eth
      operationId: createAccessList
      description: |
        CreateAccessList creates a EIP-2930 type AccessList for the given transaction. Reexec and BlockNrOrHash can be specified to create the accessList on top of a certain state.

        **JSONRPC:** `eth_createAccessList`
      parameters:
        - name: transactionArgs
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EthTransactionArgs'
        - name: blockNumberOrHash
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthCreateAccessListReq'
      responses:
        '200':
          description: Return accessList
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthCreateAccessListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/createAccessList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_createAccessList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{
                "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                "data": "0x20965255",
                "gasPrice": "0x3b9aca00",
                "gas": "0x3d0900",
                "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7"
              }]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthCreateAccessListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthCreateAccessListExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void ethCreateAccessListExample() throws IOException {
                    Transaction args = Transaction.createFunctionCallTransaction("0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",null
                            ,new BigInteger("3b9aca00",16)
                            ,new BigInteger("3d0900",16)
                            ,"0x00f5f5f3a25f142fafd0af24a754fafa340f32c7"
                            ,"0x20965255");
                    String blockNumberOrHash = "latest";
            //        EthCreateAccessListResponse response = w3.ethCreateAccessList(args,blockNumberOrHash).send();
            //        response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumberOrHash = 'latest'
                sdk.eth.createAccessList(transactionArgs, blockNumberOrHash, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionArgs = {
                "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                "data": "0x20965255",
                "gasPrice": "0x3b9aca00",
                "gas": "0x3d0900",
                "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.create_access_list(transactionArgs)

            print(eth_response)
  /eth/transaction/estimateGas:
    post:
      summary: '[Transaction-estimateGas]'
      tags:
        - eth
      operationId: estimateGas
      description: |
        Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.

        **JSONRPC:** `eth_estimateGas`
      parameters:
        - name: callObject
          in: query
          description: The transaction call object. See the next table for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/EthCallObject'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthEstimateGasReq'
      responses:
        '200':
          description: Return the amount of gas used.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthEstimateGasResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/estimateGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_estimateGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                  "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "gas": "0x100000",
                  "gasPrice": "0x5d21dba00",
                  "value": "0x0",
                  "input": "0x8ada066e"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.protocol.core.methods.response.EthEstimateGas;
            import java.io.IOException;

            public class EthEstimateGasExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethEstimateGasExample() throws IOException {
                    EthEstimateGas cr = w3.ethEstimateGas(
                        Transaction.createEthCallTransaction(
                            "0xd9c9cd5f6779558b6e0ed4e6acf6b1947e7fa1f3",
                            "0xebe8efa441b9302a0d7eaecc277c09d20d684540",
                            "0xd459fc46000000000000000000000000000000000000000000000000000000000046c650dbb5e8cb2bac4d2ed0b1e6475d37361157738801c494ca482f96527eb48f9eec488c2eba92d31baeccfb6968fad5c21a3df93181b43b4cf253b4d572b64172ef000000000000000000000000000000000000000000000000000000000000008c00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000002b85c0c828d7a98633b4e1b65eac0c017502da909420aeade9a280675013df36bdc71cffdf420cef3d24ba4b3f9b980bfbb26bd5e2dcf7795b3519a3fd22ffbb2000000000000000000000000000000000000000000000000000000000000000238fb6606dc2b5e42d00c653372c153da8560de77bd9afaba94b4ab6e4aa11d565d858c761320dbf23a94018d843772349bd9d92301b0ca9ca983a22d86a70628"))
                    .send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const callObject = {
                    "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                    "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                    "gas": "0x100000",
                    "gasPrice": "0x5d21dba00",
                    "value": "0x0",
                    "input": "0x8ada066e"
                }
                sdk.eth.estimateGas(callObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "gas": "0x100000",
                "gasPrice": "0x5d21dba00",
                "value": "0x0",
                "input": "0x8ada066e"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.estimate_gas(callObject)

            print(eth_response)
  /eth/transaction/fillTransaction:
    post:
      summary: '[Transaction-fillTransaction]'
      tags:
        - eth
      operationId: fillTransaction
      description: |
        Fills the defaults (nonce, gas, gasPrice or 1559 fields) on a given unsigned transaction, and returns it to the caller for further processing (signing + broadcast).

        **JSONRPC:** `eth_fillTransaction`
      parameters:
        - name: transactionArgs
          in: query
          description: An object of transaction arguments. See the table below for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/TransactionArgsInEthSendTransaction'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthFillTransactionReq'
      responses:
        '200':
          description: Return a rawTransaction string and a transaction object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthFillTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/fillTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_fillTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1",
                  "gas": "0x9999",
                  "maxFeePerGas": "0xbb43b7400"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthFillTransactionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.utils.Numeric;

            import java.io.IOException;

            public class EthFillTransactionExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethFillTransactionExample() throws IOException {
            //        EthFillTransactionResponse cr = w3.ethFillTransaction(
            //            new Transaction(
            //                "0xca7a99380131e6c76cfa622396347107aeedca2d",
            //                null,
            //                null,
            //                Numeric.decodeQuantity("0x9999"),
            //                "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
            //                Numeric.decodeQuantity("0x1"),
            //                null,
            //                null,
            //                null,
            //                Numeric.decodeQuantity("0xba43b7400")))
            //        .send();
            //        cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionArgs = {
                    "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "maxFeePerGas": "0xbb43b7400"
                }

                sdk.eth.fillTransaction(transactionArgs, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionArgs = {
                "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0xbb43b7400"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.fill_transaction(transactionArgs)

            print(eth_response)
  /eth/transaction/getRawTransactionByBlockHashAndIndex:
    post:
      operationId: getRawTransactionByBlockHashAndIndex
      summary: '[Transaction-getRawTransactionByBlockHashAndIndex]'
      description: |
        GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.

        **JSONRPC:** `eth_getRawTransactionByBlockHashAndIndex`
      tags:
        - eth
      parameters:
        - name: blockHash
          required: true
          schema:
            type: string
            format: hex
          description: Hex representation of a Keccak 256 hash
          in: query
        - name: index
          in: query
          description: Hex representation of a uint
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetRawTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block hash and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetRawTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getRawTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getRawTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be","0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthGetRawTransactionByBlockHashAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetRawTransactionByBlockHashAndIndexExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethGetRawTransactionByBlockHashAndIndexExample() throws IOException {
            //        EthGetRawTransactionByBlockHashAndIndexResponse er = w3.ethGetRawTransactionByBlockHashAndIndex(
            //            "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be",
            //            "0x0")
            //        .send();
            //        er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = '0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be'
                const index = '0x0'

                sdk.eth.getRawTransactionByBlockHashAndIndex(blockHash, index, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be"
            index = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_raw_transaction_by_block_hash_and_index(blockHash, index)

            print(eth_response)
  /eth/transaction/getRawTransactionByBlockNumberAndIndex:
    post:
      operationId: getRawTransactionByBlockNumberAndIndex
      summary: '[Transaction-getRawTransactionByBlockNumberAndIndex]'
      tags:
        - eth
      description: |
        GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.

        **JSONRPC:** `eth_getRawTransactionByBlockNumberAndIndex`
      parameters:
        - name: blockNumberOrTag
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
        - name: index
          required: true
          schema:
            type: string
            format: hex
          description: Hex representation of a uint
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetRawTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block number and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetRawTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getRawTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getRawTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [118593751, "0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthGetRawTransactionByBlockNumberAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetRawTransactionByBlockNumberAndIndexExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethGetRawTransactionByBlockNumberAndIndexExample() throws IOException {
            //        EthGetRawTransactionByBlockNumberAndIndexResponse er = w3.ethGetRawTransactionByBlockNumberAndIndex(
            //            118593751,
            //            "0x0")
            //        .send();
            //        er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 118593751
                const index = '0x0'
                
                sdk.eth.getRawTransactionByBlockNumberAndIndex(blockNumber, index, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = 118593751
            index = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_raw_transaction_by_block_number_and_index(blockNumber, index)

            print(eth_response)
  /eth/transaction/getRawTransactionByHash:
    post:
      operationId: getRawTransactionByHash
      summary: '[Transaction-getRawTransactionByHash]'
      description: |
        GetRawTransactionByHash returns the bytes of the transaction for the given hash.

        **JSONRPC:** `eth_getRawTransactionByHash`
      tags:
        - eth
      parameters:
        - name: hash
          required: true
          schema:
            type: string
            format: hex
          description: Hex representation of a Keccak 256 hash
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetRawTransactionByHashReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetRawTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getRawTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getRawTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthGetRawTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetRawTransactionByHashExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethGetRawTransactionByHashExample() throws IOException {
            //        EthGetRawTransactionByHashResponse er = w3.ethGetRawTransactionByHash(
            //            "0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687")
            //        .send();
            //        er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const transactionHash = '0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687'

                sdk.eth.getRawTransactionByHash(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_hash(transactionHash)

            print(klay_response)
  /eth/transaction/getTransactionByBlockHashAndIndex:
    post:
      summary: '[Transaction-getTransactionByBlockHashAndIndex]'
      tags:
        - eth
      operationId: getTransactionByBlockHashAndIndex
      description: |
        Returns information about a transaction by block hash and transaction index position.

        Please check the Caution-Transaction before using this API.

        **JSONRPC:** `eth_getTransactionByBlockHashAndIndex`
      parameters:
        - name: blockHash
          in: query
          description: Hash of a block.
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: transactionIndexPosition
          in: query
          description: Integer of the transaction index position.
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block hash and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68", "0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetTransactionByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGetTransactionByBlockHashAndIndexExample() throws IOException {
                    EthTransaction response = w3.ethGetTransactionByBlockHashAndIndex(
                                    "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68",
                                    BigInteger.valueOf(0))
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockHash = '0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a'
                const index = '0x0'
                sdk.eth.getTransactionByBlockHashAndIndex(blockHash, index, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68"
            transactionIndexPosition = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_by_block_hash_and_index(blockHash, transactionIndexPosition)

            print(eth_response)
  /eth/transaction/getTransactionByBlockNumberAndIndex:
    post:
      summary: '[Transaction-getTransactionByBlockNumberAndIndex]'
      tags:
        - eth
      operationId: getTransactionByBlockNumberAndIndex
      description: |
        Returns information about a transaction by block number and transaction index position

        Please check the Caution-Transaction before using this API.

        **JSONRPC:** `eth_getTransactionByBlockNumberAndIndex`
      parameters:
        - name: blockNumberOrTag
          in: query
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
        - name: transactionIndex
          in: query
          description: The transaction index position.
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block number and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x27", "0x0"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetTransactionByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetTransactionByBlockNumberAndIndexExample() throws IOException {
                    EthTransaction response = w3
                        .ethGetTransactionByBlockNumberAndIndex(
                            DefaultBlockParameter.valueOf(new BigInteger("27", 16)), 
                            new BigInteger("0", 16))
                        .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const blockNumber = 118593751
                const index = '0x0'
                sdk.eth.getTransactionByBlockNumberAndIndex(blockNumber, index, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x27"
            transactionIndex = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_by_block_number_and_index(blockTag, transactionIndex)

            print(eth_response)
  /eth/transaction/getTransactionByHash:
    post:
      summary: '[Transaction-getTransactionByHash]'
      tags:
        - eth
      operationId: getTransactionByHash
      description: |
        Returns the information about a transaction requested by transaction hash.

        Please check the Caution-Transaction before using this API.

        **JSONRPC:** `eth_getTransactionByHash`
      parameters:
        - name: transactionHash
          in: query
          description: Hash of a transaction.
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionByHashReq'
      responses:
        '200':
          description: Object - A transaction object, or null when no transaction was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetTransactionByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGetTransactionByHashExample() throws IOException {
                    String blockHash = "0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b";
                    EthTransaction response = w3.ethGetTransactionByHash(blockHash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionHash = '0xc6acc62baaa57483da8d5e08aaed1907d82f0e25bd553ce3745ef1bc7b7f4476'
                sdk.eth.getTransactionByHash(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_by_hash(blockHash)

            print(eth_response)
  /eth/transaction/getTransactionReceipt:
    post:
      summary: '[Transaction-getTransactionReceipt]'
      tags:
        - eth
      operationId: getTransactionReceipt
      description: |
        Returns the receipt of a transaction by transaction hash.

        *NOTE:* The receipt is not available for pending transactions.

        Please check the Caution-TransactionReceipt before using this API.

        **JSONRPC:** `eth_getTransactionReceipt`
      parameters:
        - name: transactionHash
          in: query
          description: Hash of a transaction.
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-EthGetTransactionByHashReq'
      responses:
        '200':
          description: Object - A transaction receipt object, or null when no receipt was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-EthGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionReceipt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionReceipt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetTransactionReceiptExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethGetTransactionReceiptExample() throws IOException {
                    String transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";
                    EthGetTransactionReceipt response = w3.ethGetTransactionReceipt(transactionHash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionHash = '0xc6acc62baaa57483da8d5e08aaed1907d82f0e25bd553ce3745ef1bc7b7f4476'

                sdk.eth.getTransactionReceipt(transactionHash, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_receipt(blockHash)

            print(eth_response)
  /eth/transaction/pendingTransactions:
    post:
      operationId: pendingTransactions
      summary: '[Transaction-pendingTransactions]'
      tags:
        - eth
      description: |
        Returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages.

        **JSONRPC:** `eth_pendingTransactions`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ethPendingTransactionsReq'
      responses:
        '200':
          description: Return an array of transactions. For the returned transaction object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ethPendingTransactionsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/pendingTransactions' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_pendingTransactions",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthPendingTransactionsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthPendingTransactionsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethPendingTransactionsExample() throws IOException {
            //        EthPendingTransactionsResponse response = w3.ethPendingTransactions().send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.pendingTransactions({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.pending_transactions()

            print(eth_response)
  /eth/transaction/resend:
    post:
      operationId: resend
      summary: '[Transaction-resend]'
      description: |
        Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit.

        **JSONRPC:** `eth_resend`
      tags:
        - eth
      parameters:
        - name: sendArgs
          required: true
          schema:
            $ref: '#/components/schemas/SendArgs'
          in: query
        - name: gasPrice
          in: query
          required: true
          description: Hex representation of the integer
          schema:
            type: string
            format: hex
        - name: gasLimit
          in: query
          required: true
          description: Hex representation of a uint64
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthResendReq'
      responses:
        '200':
          description: Resend accepts an existing transaction and a new gas price and limit.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Hex representation of a Keccak 256 hash
                        example: '0xced304149857009d8767c54b7e624f700c39afe8b93d61b970902d95ac6271d1'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/resend' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_resend",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6","to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee","value": "0x1","gas": "0x9999","maxFeePerGas": "0x5d21dba00","maxPriorityFeePerGas": "0x5d21dba00","nonce": "0x10"}, "0xba43b7500", "0xe8d4a50fff"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.others;

            import java.io.IOException;
            import java.math.BigInteger;
            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthResendResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;

            public class EthResendExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

              void ethResendExample() throws IOException {
                String gasPrice = "0xba43b7500";
                String gasLimit = "0xe8d4a50fff";
                Transaction sendArgs = new Transaction(
                  "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                  new BigInteger("d" , 16),
                  null ,
                  new BigInteger("9999" , 16),
                  "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  new BigInteger("1",16),
                  null , 
                  null ,
                  new BigInteger("5d21dba00" , 16),
                  new BigInteger("5d21dba00" , 16));
            //    EthResendResponse response = w3.ethResend(sendArgs, gasPrice, gasLimit).send();
            //    response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const sendArgs = {
                    "from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "maxFeePerGas": "0x5d21dba00",
                    "maxPriorityFeePerGas": "0x5d21dba00",
                    "nonce": "0xd"
                }
                const gasPrice = "0xba43b7500";
                const gasLimit = "0xe8d4a50fff";
               
                sdk.eth.resend(sendArgs, gasPrice, gasLimit, {},(err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            sendArgs = {
                "from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00",
                "nonce": "0xd"
            }
            gasPrice = "0xba43b7500"
            gasLimit = "0xe8d4a50fff"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.resend(sendArgs, gasPrice, gasLimit)

            print(eth_response)
  /eth/transaction/sendRawTransaction:
    post:
      summary: '[Transaction-sendRawTransaction]'
      tags:
        - eth
      operationId: sendRawTransaction
      description: |
        Creates a new message call transaction or a contract creation for signed transactions.

        **JSONRPC:** `eth_sendRawTransaction`
      parameters:
        - name: signedTransactionData
          in: query
          description: The signed transaction data.
          required: true
          schema:
            type: string
            format: DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: eth_sendRawTransaction
                    params:
                      type: array
                      description: The signed transaction data.
                      items:
                        type: string
                        format: DATA
                        title: signedTransactionData
                      example:
                        - '0xf86d03850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee87038d7ea4c68000808207f5a02c39a457ec76803901627392cbfb2107793bf4326e1f1100dc58d8a1216559bca07ce3a3517fce359c1fb6f5b1c1564dd9bb42d0d70a20ae9f4af95d46050ce55e'
      responses:
        '200':
          description: Return the transaction hash or the zero hash if the transaction is not yet available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: The transaction hash or the zero hash if the transaction is not yet available.
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/sendRawTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_sendRawTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [ "0xf86d03850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee87038d7ea4c68000808207f5a02c39a457ec76803901627392cbfb2107793bf4326e1f1100dc58d8a1216559bca07ce3a3517fce359c1fb6f5b1c1564dd9bb42d0d70a20ae9f4af95d46050ce55e" ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthSendTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthSendRawTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethSendRawTransactionExample() throws IOException {
                    String singedTransactionData = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";
                    EthSendTransaction response = w3.ethSendRawTransaction(singedTransactionData).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const singedTransactionData = '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
                
                sdk.eth.sendRawTransaction(singedTransactionData, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            signedTransactionData = "0xf86d03850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee87038d7ea4c68000808207f5a02c39a457ec76803901627392cbfb2107793bf4326e1f1100dc58d8a1216559bca07ce3a3517fce359c1fb6f5b1c1564dd9bb42d0d70a20ae9f4af95d46050ce55e"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.send_raw_transaction(signedTransactionData)

            print(eth_response)
  /eth/transaction/sendTransaction:
    post:
      summary: '[Transaction-sendTransaction]'
      tags:
        - eth
      operationId: sendTransaction
      description: |
        Constructs a transaction with given parameters, signs the transaction with a sender's private key and propagates the transaction to Klaytn network.

        `eth_sendTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `eth_sendTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `eth_sendTransaction`
      parameters:
        - name: transactionArgs
          in: query
          description: An object of transaction arguments. See the table below for the object's properties.
          required: true
          schema:
            $ref: '#/components/schemas/TransactionArgsInEthSendTransaction'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlaySendTransactionReq'
      responses:
        '200':
          description: Return the transaction hash or the zero hash if the transaction is not yet available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySendTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/sendTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_sendTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee", "value": "0x1", "gas": "0x9999", "maxFeePerGas": "0x5d21dba00", "maxPriorityFeePerGas": "0x5d21dba00"}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.protocol.core.methods.response.EthSendTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthSendTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethSendTransactionExample() throws IOException {
                    // TransactionArgs tx = new TransactionArgs();
                    // tx.setFrom("0x487f2dfef230c2120b8cc55c5087b103146536ec");
                    // tx.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    // tx.setValue("0x1");
                    // tx.setGas("0x9999");
                    // tx.setMaxFeePerGas("0x5d21dba00");
                    // tx.setMaxPriorityFeePerGas("0x5d21dba00");
                    Transaction tx = new Transaction(
                        "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                        null,
                        null,
                        new BigInteger("9999",16),
                        "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                        new BigInteger("1",16),
                        null,
                        null,
                        new BigInteger("5d21dba00",16),
                        new BigInteger("5d21dba00",16));
                    EthSendTransaction transactionResponse = w3.ethSendTransaction(tx).send();
                    transactionResponse.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionObject = {
                    "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "maxFeePerGas": "0x5d21dba00",
                    "maxPriorityFeePerGas": "0x5d21dba00"
                }
                
                sdk.eth.sendTransaction(transactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.send_transaction(transactionObject)

            print(eth_response)
  /eth/transaction/signTransaction:
    post:
      summary: '[Transaction-signTransaction]'
      tags:
        - eth
      operationId: signTransaction
      description: |
        Signs a transaction that can be submitted to the network at a later time using with eth_sendRawTransaction.

        `eth_signTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `eth_signTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `eth_signTransaction`
      parameters:
        - name: transactionArgs
          in: query
          description: An object of transaction arguments. See the table below for the object's properties.
          required: true
          schema:
            type: object
            required:
              - from
              - gas
              - maxFeePerGas
              - maxPriorityFeePerGas
              - nonce
            properties:
              from:
                type: string
                format: 20-byte DATA
                description: The address from which the transaction is sent.
              to:
                type: string
                format: 20-byte DATA
                description: (not required when creating a new contract) The address to which the transaction is directed.
              gas:
                type: string
                format: hex
                description: The integer of the gas provided for the transaction's execution. It will return unused gas.
              maxFeePerGas:
                type: string
                format: hex
                description: The maximum amount to pay for the transaction's execution. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).
              maxPriorityFeePerGas:
                type: string
                format: hex
                description: Gas tip cap for dynamic fee transaction in peb. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).
              input:
                type: string
                format: DATA
                description: (optional) The hash of the method signature and the encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
              value:
                type: string
                format: hex
                description: (optional) The integer of values sent with this transaction.
              nonce:
                type: string
                format: hex
                description: The integer of a nonce.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthSignTransactionReq'
      responses:
        '200':
          description: Return the signed transaction object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthSignTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/signTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_signTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee", "value": "0x1", "gas": "0x9999", "maxFeePerGas": "0x5d21dba00", "maxPriorityFeePerGas": "0x5d21dba00","nonce": "0x1"}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.transaction;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthSignTransactionResponse;
            //import org.web3j.protocol.klaytn.core.method.response.TransactionArgs;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthSignTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethSignTransactionExample() throws IOException {
            //        TransactionArgs tx = new TransactionArgs();
            //        tx.setFrom("0x487f2dfef230c2120b8cc55c5087b103146536ec");
            //        tx.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
            //        tx.setValue("0x1");
            //        tx.setGas("0x9999");
            //        tx.setMaxFeePerGas("0x5d21dba00");
            //        tx.setMaxPriorityFeePerGas("0x5d21dba00");
            //        tx.setNonce("0x1");
            //        EthSignTransactionResponse transactionResponse = w3.ethSignTransaction(tx).send();
            //        transactionResponse.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const transactionObject = {
                    "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "maxFeePerGas": "0x5d21dba00",
                    "maxPriorityFeePerGas": "0x5d21dba00",
                    "nonce": "0x1"
                }

                sdk.eth.signTransaction(transactionObject, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00",
                "nonce": "0x1"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.sign_transaction(transactionObject)

            print(eth_response)
  /eth/config/chainID:
    post:
      summary: '[Configuration-chainId]'
      tags:
        - eth
      operationId: chainId
      description: |
        Return current chainId set on the requested node.

        **JSONRPC:** `eth_chainId`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_chainId
      responses:
        '200':
          description: Return current chainId set on the requested node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthChainIdResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/chainId' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_chainId",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthChainId;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthChainIdExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethChainIdExample() throws IOException {
                    EthChainId br = w3.ethChainId().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.chainId({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.chain_id()

            print(eth_response)
  /eth/config/coinbase:
    post:
      summary: '[Configuration-coinbase]'
      tags:
        - eth
      operationId: coinbase
      description: |
        Returns the client coinbase address.

        **JSONRPC:** `eth_coinbase`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/CoinbaseReq'
      responses:
        '200':
          description: Returns the client coinbase address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/CoinbaseResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/coinbase' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_coinbase",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthCoinbase;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthCoinbaseExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethCoinbaseExample() throws IOException {
                    EthCoinbase br = w3.ethCoinbase().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.coinbase({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.coinbase()

            print(eth_response)
  /eth/config/etherbase:
    post:
      summary: '[Configuration-etherbase]'
      tags:
        - eth
      operationId: etherbase
      description: |
        Returns the client etherbase address.

        **JSONRPC:** `eth_etherbase`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthEtherbaseReq'
      responses:
        '200':
          description: Returns the current etherbase address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthEtherbaseResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/etherbase' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_etherbase",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthEtherbaseExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethEtherbaseExample() throws IOException {
            //        EthEtherbaseResponse response = w3.ethEtherbase().send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.etherbase({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.etherbase()

            print(eth_response)
  /eth/config/gasPrice:
    post:
      summary: '[Configuration-gasPrice]'
      tags:
        - eth
      operationId: gasPrice
      description: |
        Returns the current price per gas in peb.

        **NOTE:** This API has different behavior from Ethereum's and returns a gas price of Klaytn instead of suggesting a gas price as in Ethereum.

        **JSONRPC:** `eth_gasPrice`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_gasPrice
      responses:
        '200':
          description: Returns the current price per gas in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGasPriceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/gasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_gasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.configuration;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthGasPrice;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGasPriceExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));

                void ethGasPriceExample() throws IOException {
                    EthGasPrice br = w3.ethGasPrice().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.gasPrice({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.gas_price()

            print(eth_response)
  /eth/protocolVersion:
    post:
      operationId: protocolVersion
      summary: '[Configuration-protocolVersion]'
      description: |
        Returns the Eth protocol version of the node. The current version (as of v1.9.0) of Cypress/Baobab is istanbul/65.

        **JSONRPC:** `eth_protocolVersion`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_protocolVersion
      responses:
        '200':
          description: Returns the Eth protocol version of the node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The Eth protocol version of the node.
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/protocolVersion' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_protocolVersion",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.configuration;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthProtocolVersion;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class EthProtocolVersionExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.SERVER_URL));
              void ethProtocolVersionExample() throws IOException {
                EthProtocolVersion response = w3.ethProtocolVersion().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.protocolVersion({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.protocol_version()

            print(eth_response)
  /eth/gas/feeHistory:
    post:
      summary: '[Gas-feeHistory]'
      tags:
        - eth
      operationId: feeHistory
      description: |
        Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.

        **JSONRPC:** `eth_feeHistory`
      parameters:
        - name: blockCount
          required: true
          schema:
            type: string
            format: Hexadecimal
          description: Number of blocks in the requested range expressed as a hexidecimal number. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
          in: query
        - name: lastBlock
          in: query
          description: Highest number block of the requested range as a block number or block tag.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
        - name: rewardPercentiles
          required: true
          schema:
            $ref: '#/components/schemas/RewardPercentiles'
          description: Array of floating point value between 0 and 100.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthFeeHistoryReq'
      responses:
        '200':
          description: Returns base fee per gas and transaction effective priority fee per gas history
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthFeeHistoryResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/feeHistory' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_feeHistory",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x10", "latest", [0.1, 0.2, 0.3]]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.gas;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthFeeHistory;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.List;

            public class EthFeeHistoryExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethFeeHistoryExample() throws IOException {
                    EthFeeHistory br = w3.ethFeeHistory(
                        16,
                        DefaultBlockParameter.valueOf("latest"),
                        List.of(0.1, 0.2, 0.3))
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockCount = '0x10'
                const lastBlock = 'latest'
                const rewardPercentiles = [0.1, 0.2, 0.3]
                
                sdk.eth.feeHistory(blockCount, lastBlock, rewardPercentiles, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockCount = "0x10"
            lastBlock = "latest"
            rewardPercentiles = [0.1, 0.2, 0.3]

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.fee_history(blockCount, lastBlock, rewardPercentiles)

            print(eth_response)
  /eth/gas/maxPriorityFeePerGas:
    post:
      summary: '[Gas-maxPriorityFeePerGas]'
      tags:
        - eth
      operationId: maxPriorityFeePerGas
      description: |
        Returns a suggestion for a gas tip cap for dynamic fee transaction in peb.

        **NOTE:** This API has different behavior from Ethereum's and returns a gas price of Klaytn instead of suggesting a gas price as in Ethereum.

        **JSONRPC:** `eth_maxPriorityFeePerGas`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthMaxPriorityFeePerGasReq'
      responses:
        '200':
          description: Integer of the current gas price in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthMaxPriorityFeePerGasResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/maxPriorityFeePerGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_maxPriorityFeePerGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.gas;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthMaxPriorityFeePerGas;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthMaxPriorityFeePerGasExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethMaxPriorityFeePerGasExample() throws IOException {
                    EthMaxPriorityFeePerGas response = w3.ethMaxPriorityFeePerGas().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.maxPriorityFeePerGas({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.max_priority_fee_per_gas()

            print(eth_response)
  /eth/filter/getFilterChanges:
    post:
      operationId: getFilterChanges
      summary: '[Filter-getFilterChanges]'
      description: |
        Polling method for a filter, which returns an array of logs which occurred since last poll.

        **JSONRPC:** `eth_getFilterChanges`
      tags:
        - eth
      parameters:
        - name: id
          required: true
          schema:
            type: string
          description: The filter id (e.g., "0x16" // 22).
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_getFilterChanges
                    params:
                      type: array
                      items:
                        type: string
                        format: hex
                      description: The filter id
                      example:
                        - '0x16'
      responses:
        '200':
          description: Array - Array of log objects, or an empty array if nothing has changed since last poll.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetFilterChangesResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getFilterChanges' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getFilterChanges",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import java.io.IOException;
            import java.math.BigInteger;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthLog;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class EthGetFilterChangesExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethGetFilterChangesExample() throws IOException {
                    EthLog response = w3.ethGetFilterChanges(BigInteger.valueOf(10)).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-


            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const id = '0x52421f131ef49ef6b7a8926b8e0a65e'
                
                sdk.eth.getFilterChanges(id, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x11b5f0ef802c98569efa8459cf063ed5"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_filter_changes(quantity)

            print(eth_response)
  /eth/filter/getFilterLogs:
    post:
      summary: '[Filter-getFilterLogs]'
      tags:
        - eth
      operationId: getFilterLogs
      description: |
        Returns an array of all logs matching filter with given id, which has been obtained using eth_newFilter. Note that filter ids returned by other filter creation functions, such as eth_newBlockFilter or eth_newPendingTransactionFilter , cannot be used with this function.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        - The number of maximum returned results in a single query (Default: 10,000).

        - The execution duration limit of a single query (Default: 10 seconds).

        **JSONRPC:** `eth_getFilterLogs`
      parameters:
        - name: id
          in: query
          description: The filter id
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetFilterLogsReq'
      responses:
        '200':
          description: Returns an array of all logs matching filter with given id, which has been obtained using eth_newFilter.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayGetFilterLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getFilterLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getFilterLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthLog;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetFilterLogsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethGetFilterLogsExample() throws IOException {
                    EthLog response = w3.ethGetFilterLogs(BigInteger.valueOf(10)).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const id = '0xca6c12a3ecd1b44bb77f7b6536b7ce65'
                
                sdk.eth.getFilterLogs(id, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x11b5f0ef802c98569efa8459cf063ed5"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_filter_logs(quantity)

            print(eth_response)
  /eth/filter/getLogs:
    post:
      operationId: getLogs
      summary: '[Filter-getLogs]'
      description: |
        Returns an array of all logs matching a given filter object.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        - The number of maximum returned results in a single query (Default: 10,000).

        - The execution duration limit of a single query (Default: 10 seconds).

        **JSONRPC:** `eth_getLogs`
      tags:
        - eth
      parameters:
        - name: filterOptions
          required: true
          schema:
            $ref: '#/components/schemas/FilterOptions'
          description: The filter options.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_getLogs
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/FilterOptions'
                      description: The filter options.
                      example:
                        - fromBlock: '0x1'
                          toBlock: latest
                          address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
      responses:
        '200':
          description: Returns an array of all logs matching a given filter object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"fromBlock":"0x1","toBlock":"latest","address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b"}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.request.EthFilter;
            import org.web3j.protocol.core.methods.response.EthLog;

            import java.io.IOException;

            public class EthGetLogsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.SERVER_URL));
                void ethGetLogsExample() throws IOException {
                    EthFilter filterOption = new EthFilter(
                        DefaultBlockParameter.valueOf("latest"),
                        DefaultBlockParameter.valueOf("latest"),
                        "0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    EthLog response = w3.ethGetLogs(filterOption).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const filterOptions = {
                    "fromBlock": "latest",
                    "toBlock": "latest",
                    "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b"
                }
                sdk.eth.getLogs(filterOptions, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "latest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_logs(filterOptions)

            print(eth_response)
  /eth/filter/newBlockFilter:
    post:
      operationId: newBlockFilter
      summary: '[Filter-newBlockFilter]'
      description: |
        Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.

        **JSONRPC:** `eth_newBlockFilter`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_newBlockFilter
      responses:
        '200':
          description: A filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0xc2f2e8168a7e38b5d979d0f7084130ee'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/newBlockFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_newBlockFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthNewBlockFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethNewBlockFilterExample() throws IOException {
                    EthFilter response = w3.ethNewBlockFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.newBlockFilter({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.new_block_filter()

            print(eth_response)
  /eth/filter/newFilter:
    post:
      operationId: newFilter
      summary: '[Filter-newFilter]'
      description: |
        Creates a filter object, based on filter options, to notify when the state changes (logs).
        - To check if the state has changed, call eth_getFilterChanges.
        - To obtain all logs matching the filter created by eth_newFilter, call eth_getFilterLogs.

        **A note on specifying topic filters:** Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:
        - [] "anything"
        - [A] "A in first position (and anything after)"
        - [null, B] "anything in first position AND B in second position (and anything after)"
        - [A, B] "A in first position AND B in second position (and anything after)"
        - [[A, B], [A, B]] "(A OR B) in first position AND (A OR B) in second position (and anything after)"

        **NOTE**: In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `eth_newFilter`
      tags:
        - eth
      parameters:
        - name: filterOptions
          required: true
          schema:
            $ref: '#/components/schemas/schemas-FilterOptions'
          description: The filter options
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthNewFilterReq'
      responses:
        '200':
          description: Returns a filter id
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthNewFilterResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/newFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_newFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "fromBlock":"earliest",
                  "toBlock":"latest",
                  "address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "topics":[
                    "0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"
                  ]
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.request.EthFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthNewFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    EthFilter filterOption = new EthFilter(DefaultBlockParameter.valueOf("earliest"),DefaultBlockParameter.valueOf("latest")
                            ,"0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    filterOption.addOptionalTopics("0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8");
                    org.web3j.protocol.core.methods.response.EthFilter response = w3.ethNewFilter(filterOption).send();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const fromBlock = 'earliest'
                const toBlock = 'latest'
                const address = '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
                const topics = [
                    '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
                ]
                sdk.eth.newFilter({ fromBlock, toBlock, address, topics }, {}, (err, data, response) => {
                    console.log(data);
                })
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "earliest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "topics": ["0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"]
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.new_filter(filterOptions)

            print(eth_response)
  /eth/filter/newPendingTransactionFilter:
    post:
      operationId: newPendingTransactionFilter
      summary: '[Filter-newPendingTransactionFilter]'
      description: |
        Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.

        **JSONRPC:** `eth_newPendingTransactionFilter`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_newPendingTransactionFilter
      responses:
        '200':
          description: Returns a filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0x90cec22a723fcc725fb2462733c2880f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/newPendingTransactionFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_newPendingTransactionFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthNewPendingTransactionFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethNewPendingTransactionFilterExample() throws IOException {
                    EthFilter response = w3.ethNewPendingTransactionFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.newPendingTransactionFilter({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.new_pending_transaction_filter()

            print(eth_response)
  /eth/filter/subscribe:
    post:
      operationId: subscribe
      summary: '[Filter-subscribe]'
      description: |
        Creates a new subscription to specific events by using either RPC Pub/Sub over WebSockets or filters over HTTP. It allows clients to wait for events instead of polling for them.

        The node will return a subscription id for each subscription created. For each event that matches the subscription, a notification with relevant data is sent together with the subscription id. If a connection is closed, all subscriptions created over the connection are removed.

        **JSONRPC:** `eth_subscribe`
      tags:
        - eth
      parameters:
        - name: notificationType
          required: true
          schema:
            type: string
            enum:
              - newHeads
              - logs
          description: 'A notification type: "newHeads" or "logs"'
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_subscribe
                    params:
                      type: array
                      items:
                        title: NotificationType
                        type: string
                        enum:
                          - newHeads
                          - logs
                      description: 'A notification type: "newHeads" or "logs"'
                      example:
                        - newHeads
      responses:
        '200':
          description: Return a subscription id when a subscription is created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        example: '0x48bb6cb35d6ccab6eb2b4799f794c312'
                        description: A subscription id when a subscription is created. For each event that matches the subscription, a notification with relevant data will be delivered as well.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/subscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_subscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["newHeads"]
            }'
  /eth/filter/uninstallFilter:
    post:
      summary: '[Filter-uninstallFilter]'
      tags:
        - eth
      operationId: uninstallFilter
      description: |
        Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally, filters timeout when they are not requested with eth_getFilterChanges for a period of time.

        **JSONRPC:** `eth_uninstallFilter`
      parameters:
        - name: filter
          in: query
          description: A filter id
          required: true
          schema:
            type: string
            format: hex
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayUninstallFilterReq'
      responses:
        '200':
          description: Returns true if the filter was successfully uninstalled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayUninstallFilterResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/uninstallFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_uninstallFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xb"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.filter;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthUninstallFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthUninstallFilterExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethUninstallFilterExample() throws IOException {
                    EthUninstallFilter response = w3.ethUninstallFilter(
                        BigInteger.valueOf(11))
                    .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const filterId = '0xb'

                sdk.eth.uninstallFilter(filterId, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterId = "0xb"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.uninstall_filter(filterId)

            print(eth_response)
  /eth/filter/unsubscribe:
    post:
      operationId: unsubscribe
      summary: '[Filter-unsubscribe]'
      description: |
        Cancels the subscription with a specific subscription id by using either RPC Pub/Sub over WebSockets or filters over HTTP. Only the connection that created a subscription can unsubscribe from it.

        **JSONRPC:** `eth_unsubscribe`
      tags:
        - eth
      parameters:
        - name: subscriptionId
          required: true
          schema:
            type: string
            format: hex
          description: A subscription id.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_unsubscribe
                    params:
                      type: array
                      items:
                        title: SubscriptionId
                        type: string
                        format: hex
                        description: A subscription id.
                      example:
                        - '0xab8ac7a4045025d0c2807d63060eea6d'
      responses:
        '200':
          description: Return true if the subscription was successfully canceled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the subscription was successfully canceled, otherwise false.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/unsubscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_unsubscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xab8ac7a4045025d0c2807d63060eea6d"]
            }'
  /eth/getProof:
    post:
      summary: '[Others-getProof]'
      tags:
        - eth
      operationId: getProof
      description: |
        Returns the account and storage values of the specified account including the Merkle-proof. This call can be used to verify that the data you are pulling from is not tampered with.

        **JSONRPC:** `eth_getProof`
      parameters:
        - name: account
          in: query
          description: Address of the account.
          required: true
          schema:
            $ref: '#/components/schemas/Address'
        - name: keys
          in: query
          description: Array of storage-keys which should be proofed and included. See eth_getStorageAt
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: blockNumber
          in: query
          description: integer block number, or the string "latest" or "earliest", see the default block parameter
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_getProof
                    params:
                      type: array
                      items:
                        anyOf:
                          - title: Address
                            type: string
                            format: 20-byte DATA
                            description: Address of the account
                          - title: Keys
                            description: Array of storage-keys which should be proofed and included
                            type: string
                            format: 32-byte DATA
                          - $ref: '#/components/schemas/BlockNumberOrTag'
                      example:
                        - '0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8'
                        - - '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
                        - latest
      responses:
        '200':
          description: A account object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetProofResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getProof' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getProof",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8",
                ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"],
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.EthGetProofResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.Arrays;

            public class EthGetProofExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.SERVER_URL));

                void ethGetProofExample() throws IOException {
            //        EthGetProofResponse response = w3
            //            .ethGetProof(
            //                "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8",
            //                Arrays.asList("0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"),
            //                "latest")
            //            .send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const account = '0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8'
                const keys = ['0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421']
                const blockNumber = "latest"
                sdk.eth.getProof(account, keys, blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });

            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            account = "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8"
            keys = ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"]
            blockNumber = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_proof(account, keys, blockNumber)

            print(eth_response)
  /eth/miscellaneous/getHashrate:
    post:
      summary: '[Miscellaneous-getHashrate]'
      tags:
        - eth
      operationId: getHashrate
      description: |
        Returns the number of hashes per second that the node is mining with.
        Please note that it always return 0x0 because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_getHashrate`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetHashrateReq'
      responses:
        '200':
          description: The number of hashes per second.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetHashrateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getHashrate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getHashrate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /eth/miscellaneous/getWork:
    post:
      summary: '[Miscellaneous-getWork]'
      tags:
        - eth
      operationId: getWork
      description: |
        Returns the hash of the current block, the seedHash, and the boundary condition to be met ("target").

        Please note that it always return `errNoMiningWork` because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_getWork`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetWorkReq'
      responses:
        '200':
          description: List of current block header pow-hash, the seed hash used for the DAG, the boundary condition ("target"), 2^256 / difficulty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetWorkResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getWork' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getWork",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /eth/miscellaneous/hashrate:
    post:
      summary: '[Miscellaneous-hashrate]'
      tags:
        - eth
      operationId: hashrate
      description: |
        Returns the number of hashes per second that the node is mining with.
        Please note that it always return 0x0 because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_hashrate`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthHashRateReq'
      responses:
        '200':
          description: The number of hashes per second.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthHashRateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/hashrate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_hashrate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.miscellaneous;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthHashrate;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthHashrateExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void ethHashrateExample() throws IOException {
                    EthHashrate response = w3.ethHashrate().send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.eth.hashrate({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.hashrate()

            print(eth_response)
  /eth/miscellaneous/submitHashrate:
    post:
      summary: '[Miscellaneous-submitHashrate]'
      tags:
        - eth
      operationId: submitHashrate
      description: |
        Used for submitting mining hashrate.

        Please note that it always return false because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_submitHashrate`
      parameters:
        - name: hashrate
          in: query
          description: A hexadecimal string representation (32 bytes) of the hash rate.
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: id
          in: query
          description: A random hexadecimal(32 bytes) ID identifying the client.
          required: true
          schema:
            type: string
            format: 32-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthSubmitHashrateReq'
      responses:
        '200':
          description: Returns true if submitting went through succesfully and false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthSubmitHashrateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/submitHashrate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_submitHashrate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x5", "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.miscellaneous;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthSubmitHashrate;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthSubmitHashrateExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void ethSubmitHashrateExample() throws IOException {
                    String hashRate ="0x5";
                    String id  = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
                    EthSubmitHashrate response = w3.ethSubmitHashrate(hashRate , id).send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const hashrate = '0x5'
                const id = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'

                sdk.eth.submitHashrate(hashrate, id, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            hashrate = "0x5"
            hashrateId = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.submit_hashrate(hashrate, hashrateId)

            print(eth_response)
  /eth/miscellaneous/submitWork:
    post:
      summary: '[Miscellaneous-submitWork]'
      tags:
        - eth
      operationId: submitWork
      description: |
        Used for submitting a proof-of-work solution.

        Please note that it always return false because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_submitWork`
      parameters:
        - name: nonce
          in: query
          description: The nonce found (64 bits)
          required: true
          schema:
            type: string
            format: 8-byte DATA
        - name: powHash
          in: query
          description: The header’s pow-hash (256 bits)
          required: true
          schema:
            type: string
            format: 32-byte DATA
        - name: mixDigest
          in: query
          description: The mix digest (256 bits)
          required: true
          schema:
            type: string
            format: 32-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySubmitWorkReq'
      responses:
        '200':
          description: Returns true if the provided solution is valid, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySubmitWorkResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/submitWork' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_submitWork",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x0000000000000001", "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef", "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.miscellaneous;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.EthSubmitWork;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthSubmitWorkExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.LOCAL_URL));
                void ethSubmitWorkExample() throws IOException {
                    EthSubmitWork response = w3.ethSubmitWork(
                        "0x0000000000000001", 
                        "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef", 
                        "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef")
                    .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const nonce = '0x0000000000000001'
                const powHash = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
                const mixDigest = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
                
                sdk.eth.submitWork(nonce, powHash, mixDigest, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            nonce = "0x0000000000000001"
            powHash = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            mixDigest = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.submit_work(nonce, powHash, mixDigest)

            print(eth_response)
  /net/listening:
    post:
      operationId: listening
      summary: '[listening]'
      description: |
        Returns true if the client is actively listening for network connections.

        **JSONRPC:** `net_listening`
      tags:
        - net
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: net_listening
      responses:
        '200':
          description: Returns true if the client is actively listening for network connections.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true when listening, otherwise false.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/net/listening' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "net_listening",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.net;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.NetListening;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class NetListeningExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void netListeningExample() throws IOException {
                    NetListening response = w3.netListening().send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.net.listening({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            net_response = w3.net.listening()

            print(net_response)
  /net/networkID:
    post:
      operationId: networkID
      summary: '[networkID]'
      description: |
        Returns the network identifier (network ID).

        **JSONRPC:** `net_networkID`
      tags:
        - net
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: net_networkID
      responses:
        '200':
          description: Returns the network identifier (network ID).
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The integer of the network identifier. "1001" Klaytn Baobab testnet."8217" Klaytn Cypress mainnet.
                        example: '1001'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/net/networkID' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "net_networkID",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.net;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.NetNetworkIDResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class NetNetworkIDExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    NetNetworkIDResponse response = w3.netNetworkID().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.net.networkID({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            net_response = w3.net.network_id()

            print(net_response)
  /net/peerCount:
    post:
      operationId: peerCount
      summary: '[peerCount]'
      description: |
        Returns the number of peers currently connected to the client.

        **JSONRPC:** `net_peerCount`
      tags:
        - net
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: net_peerCount
      responses:
        '200':
          description: Returns the number of peers currently connected to the client.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the number of connected peers.
                        example: '0x3'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/net/peerCount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "net_peerCount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.net;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.NetPeerCount;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class NetPeerCountExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void netPeerCountExample() throws IOException {
                    NetPeerCount response = w3.netPeerCount().send();
                    response.getResult();

                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.net.peerCount({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            net_response = w3.net.peer_count()

            print(net_response)
  /net/peerCountByType:
    post:
      operationId: peerCountByType
      summary: '[peerCountByType]'
      description: |
        Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.

        **JSONRPC:** `net_peerCountByType`
      tags:
        - net
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: net_peerCountByType
      responses:
        '200':
          description: Returns the number of connected nodes by type and the total number of connected nodes with key/value pairs.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        required:
                          - en
                          - pn
                          - total
                        description: The number of connected peers by type as well as the total number of connected peers.
                        properties:
                          en:
                            type: integer
                          pn:
                            type: integer
                          total:
                            type: integer
                        example:
                          en: 3
                          pn: 2
                          total: 5
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/net/peerCountByType' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "net_peerCountByType",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.net;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.NetPeerCountByTypeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class NetPeerCountByTypeExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    NetPeerCountByTypeResponse response = w3.netPeerCountByType().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.net.peerCountByType({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            net_response = w3.net.peer_count_by_type()

            print(net_response)
  /net/version:
    post:
      operationId: version
      summary: '[version]'
      description: |
        Return the current klaytn protocol version.

        **JSONRPC:** `net_version`
      tags:
        - net
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: net_version
      responses:
        '200':
          description: Return the current klaytn protocol version.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The integer of the klaytn protocol version. "1001" Klaytn Baobab testnet."8217" Klaytn Cypress mainnet.
                        example: '1001'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/net/version' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "net_version",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.net;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.NetVersion;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class NetVersionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    NetVersion response = w3.netVersion().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.net.version({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            net_response = w3.net.version()

            print(net_response)
  /txpool/content:
    post:
      operationId: content
      summary: '[content]'
      description: |
        The content inspection property can be queried to list the exact details of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.

        The result is an object with two fields pending and queued. Each of these fields is associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions. These batches themselves are maps associating nonces with actual transactions.

        **JSONRPC:** `txpool_content`
      tags:
        - txpool
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: txpool_content
      responses:
        '200':
          description: Returns the content of the transaction pool.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        required:
                          - pending
                          - queued
                        properties:
                          pending:
                            type: object
                            example:
                              '0x952c9a710Ce70D58FD5C55d45c4479b82dEA6DAC':
                                '756':
                                  blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000'
                                  blockNumber: '0x0'
                                  from: '0x952c9a710ce70d58fd5c55d45c4479b82dea6dac'
                                  gas: '0x5208'
                                  gasPrice: '0x0'
                                  input: 0x
                                  nonce: '0x2f4'
                                  signatures:
                                    - ...
                                  to: '0x6afe934786fe008c79577d85d8e1af1f6f14c73a'
                                  transactionIndex: '0x0'
                                  txHash: '0x0fad399b31b520e4af5bc9f2ea40de71854a7f3c41d5918d5ed120d1b4fc5154'
                                  type: TxTypeLegacyTransaction
                                  value: '0x1'
                                '757':
                                  blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000'
                                  blockNumber: '0x0'
                                  from: '0x952c9a710ce70d58fd5c55d45c4479b82dea6dac'
                                  gas: '0x5208'
                                  gasPrice: '0x0'
                                  input: 0x
                                  nonce: '0x2f5'
                                  signatures:
                                    - ...
                                  to: '0x18352126c43e4ec314e41b632a0c1af6b233260b'
                                  transactionIndex: '0x0'
                                  txHash: '0xdfc3053ce6c27fd4610bb2e103837c4435f27bb6bb9dfd56110cbd2bbe5ea7fa'
                                  type: TxTypeLegacyTransaction
                                  value: '0x1'
                          queued:
                            type: object
                            example:
                              '0xd5B94dd456040612d721A8Eae1e4E97a70b92812':
                                '742':
                                  blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000'
                                  blockNumber: '0x0'
                                  from: '0xd5b94dd456040612d721a8eae1e4e97a70b92812'
                                  gas: '0x5208'
                                  gasPrice: '0x0'
                                  input: 0x
                                  nonce: '0x2e6'
                                  signatures:
                                    - ...
                                  to: '0xd5b94dd456040612d721a8eae1e4e97a70b92812'
                                  transactionIndex: '0x0'
                                  txHash: '0x6266969f1221b258bb2ce6fd2bcce88ad76be1e2b3eb5c770311a2bc0c2cc74a'
                                  type: TxTypeLegacyTransaction
                                  value: '0x2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/txpool/content' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "txpool_content",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.txpool;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.TxpoolContentResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class TxpoolContentExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void txpoolContentExample() throws IOException {
                    TxpoolContentResponse response = w3.txpoolContent().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.txpool.content({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            txpool_response = w3.txpool.content()

            print(txpool_response)
  /txpool/inspect:
    post:
      operationId: inspect
      summary: '[inspect]'
      description: |
        The inspect inspection property can be queried to list a textual summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only. This is a method specifically tailored to developers to quickly see the transactions in the pool and find any potential issues.

        The result is an object with two fields pending and queued. Each of these fields is associative arrays, in which each entry maps an origin-address to a batch of scheduled transactions. These batches themselves are maps associating nonces with transactions summary strings.

        **JSONRPC:** `txpool_inspect`
      tags:
        - txpool
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: txpool_inspect
      responses:
        '200':
          description: Returns a list of pending and queued transactions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: A list of pending and queued transactions.
                        required:
                          - pending
                          - queued
                        properties:
                          pending:
                            type: object
                            example:
                              '0x1A789E38cD567a00b7Fb8e1D39100ac395fa463B':
                                '0': '0x87AC99835e67168d4f9a40580f8F5C33550bA88b: 0 peb + 99000000 gas × 25000000000 peb'
                              '0xAb552FC3d76de919c74435A4C6B04576a9763934':
                                '0': '0x87AC99835e67168d4f9a40580f8F5C33550bA88b: 0 peb + 99000000 gas × 25000000000 peb'
                          queued:
                            type: object
                            example: {}
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/txpool/inspect' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "txpool_inspect",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.txpool;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.TxpoolInspectResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class TxpoolInspectExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void txpoolInspectExample() throws IOException {
                    TxpoolInspectResponse response = w3.txpoolInspect().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.txpool.inspect({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            txpool_response = w3.txpool.inspect()

            print(txpool_response)
  /txpool/status:
    post:
      operationId: status
      summary: '[status]'
      description: |
        The status inspection property can be queried for the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.

        The result is an object with two fields pending and queued, each of which is a counter representing the number of transactions in that particular state.

        **JSONRPC:** `txpool_status`
      tags:
        - txpool
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: txpool_status
      responses:
        '200':
          description: Returns the number of pending transactions and the number of queued transactions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        required:
                          - pending
                          - queued
                        properties:
                          pending:
                            title: pending
                            description: The number of pending transactions.
                            oneOf:
                              - type: string
                                format: hex
                              - type: integer
                          queued:
                            title: queued
                            description: The number of queued transactions.
                            oneOf:
                              - type: string
                                format: hex
                              - type: integer
                        example:
                          pending: '0x0'
                          queued: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/txpool/status' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "txpool_status",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.txpool;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.TxpoolStatusResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class TxpoolStatusExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void txpoolStatusExample() throws IOException {
                    TxpoolStatusResponse response = w3.txpoolStatus().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.txpool.status({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            txpool_response = w3.txpool.status()

            print(txpool_response)
  /personal/deriveAccount:
    post:
      operationId: deriveAccount
      summary: '[deriveAccount]'
      description: |
        Requests a HD wallet to derive a new account, optionally pinning it for later reuse.

        **JSONRPC:** `personal_deriveAccount`
      tags:
        - personal
      parameters:
        - name: URL
          required: true
          schema:
            type: string
          description: Wallet url
          in: query
        - name: path
          required: true
          schema:
            type: string
          description: derivation path
          in: query
        - name: pin
          required: false
          schema:
            type: boolean
          description: optionally pinning
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalDeriveAccountReq'
      responses:
        '200':
          description: Return the address of the new account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The address of the new account.
                        example: '0xed1b12248aee85a32aead06c7789d3fcdcd4dae6'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/deriveAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_deriveAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "url",
                "path",
                true
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalDeriveAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class PersonalDeriveAccountExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.SERVER_URL));
              void personalDeriveAccountExample() throws IOException {
                String url = "url";
                String path = "path";
                boolean pin =true;
                PersonalDeriveAccountResponse response = w3.personalDeriveAccount(url, path, pin).send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |+
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const url = "url";
                const path = "path";
                const pin = true;

                sdk.personal.deriveAccount(url, path, {pin}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()

        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            url = "url"
            path = "path"
            pin = True

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.derive_account(url, path, pin)

            print(personal_response)
  /personal/ecRecover:
    post:
      operationId: ecRecover
      summary: '[ecRecover]'
      description: |
        ecRecover returns the address associated with the private key that was used to calculate the signature in personal_sign.

        **JSONRPC:** `personal_ecRecover`
      tags:
        - personal
      parameters:
        - name: message
          required: true
          schema:
            type: string
          description: A message.
          in: query
        - name: signature
          required: true
          schema:
            type: string
          description: The signature.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalEcRecoverReq'
      responses:
        '200':
          description: Return the account address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The account address.
                        example: '0xda04fb00e2cb5745cef7d8c4464378202a1673ef'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/ecRecover' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_ecRecover",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xdead",
                "0xccb8cce176b01fdc8f7ac3c101b8eb3b9005e938a60800e517624419dd8b7fba0e4598bdf1c4fa1743e1288e89b8b7090cc11f4b3640aafcbc71896ec73eec241b"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalEcRecoverResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalEcRecoverExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalEcRecoverExample() throws IOException {
                    PersonalEcRecoverResponse response = w3.personalEcRecover(
                            "0xdead",
                                    "0xccb8cce176b01fdc8f7ac3c101b8eb3b9005e938a60800e517624419dd8b7fba0e4598bdf1c4fa1743e1288e89b8b7090cc11f4b3640aafcbc71896ec73eec241b")
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const message = "0xdead";
                const signature = "0xccb8cce176b01fdc8f7ac3c101b8eb3b9005e938a60800e517624419dd8b7fba0e4598bdf1c4fa1743e1288e89b8b7090cc11f4b3640aafcbc71896ec73eec241b"

                sdk.personal.ecRecover(message, signature, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            message = "0xdead"
            signature = "0xccb8cce176b01fdc8f7ac3c101b8eb3b9005e938a60800e517624419dd8b7fba0e4598bdf1c4fa1743e1288e89b8b7090cc11f4b3640aafcbc71896ec73eec241b"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.ec_recover(message, signature)

            print(personal_response)
  /personal/importRawKey:
    post:
      operationId: importRawKey
      summary: '[importRawKey]'
      description: |
        Imports the given unencrypted private key (hex string without leading '0x') or a Klaytn wallet key into the key store, encrypting it with the passphrase.

        Returns the address of the imported account.

        **JSONRPC:** `personal_importRawKey`
      tags:
        - personal
      parameters:
        - name: keydata
          required: true
          schema:
            type: string
          description: The unencrypted private key (hex string without leading '0x') or a Klaytn wallet key.
          in: query
        - name: passphrase
          required: true
          schema:
            type: string
          description: The pass phrase for encryption.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalImportRawKeyReq'
      responses:
        '200':
          description: Returns the address of the imported account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The address of the imported account.
                        example: '0xfa415bb3e6231f488ff39eb2897db0ef3636dd32'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/importRawKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_importRawKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "cd87934ee007b7a458fa00dc0314fff8b2bd43b3071f46c820c379e483b4fd8e",
                "gr8=B!0@uc$b"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalImportRawKeyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalImportRawKeyExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalImportRawKeyExample() throws IOException {
                    PersonalImportRawKeyResponse response = w3.
                        personalImportRawKey(
                            "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d80x000xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                            "mypassword")
                        .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const privateKey = "cd87934ee007b7a458fa00dc0314fff8b2bd43b3071f46c820c379e483b4fd8e";
                const passphrase = "gr8=B!0@uc$b"

                sdk.personal.importRawKey(privateKey, passphrase, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            privateKey = "cd87934ee007b7a458fa00dc0314fff8b2bd43b3079f46c820c379e483b4fd8e"
            passphrase = "mypassword"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.import_raw_key(privateKey, passphrase)

            print(personal_response)
  /personal/listAccounts:
    post:
      operationId: listAccounts
      summary: '[listAccounts]'
      description: |
        Returns all the Klaytn account addresses of all keys in the key store.

        **JSONRPC:** `personal_listAccounts`
      tags:
        - personal
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: personal_listAccounts
      responses:
        '200':
          description: Returns all the Klaytn account addresses of all keys in the key store.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The list of all the Klaytn account addresses
                        example:
                          - '0x5e97870f263700f46aa00d967821199b9bc5a120'
                          - '0x3d80b31a78c30fc628f20b2c89d7ddbf6e53cedc'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/listAccounts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_listAccounts",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalListAccountsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalListAccountsExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalListAccountsExample() throws IOException {
                    PersonalListAccountsResponse response = w3.personalListAccounts()
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.personal.listAccounts({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.list_accounts()

            print(personal_response)
  /personal/listWallets:
    post:
      operationId: listWallets
      summary: '[listWallets]'
      description: |
        Returns a list of wallets this node manages.

        **JSONRPC:** `personal_listWallets`
      tags:
        - personal
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: personal_listWallets
      responses:
        '200':
          description: Returns a list of wallets this node manages.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/PersonalListWalletsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/listWallets' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_listWallets",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalListWalletsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalListWalletsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalListWalletsExample() throws IOException {
                    PersonalListWalletsResponse response = w3.personalListWallets()
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.personal.listWallets({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.list_wallets()

            print(personal_response)
  /personal/lockAccount:
    post:
      operationId: lockAccount
      summary: '[lockAccount]'
      description: |
        Removes the private key with a given address from memory. The account can no longer be used to send transactions.

        **JSONRPC:** `personal_lockAccount`
      tags:
        - personal
      parameters:
        - name: address
          required: true
          schema:
            type: string
          description: The account address to lock.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: personal_lockAccount
                    params:
                      type: array
                      items:
                        title: address
                        type: string
                      description: The account address to lock.
                      example:
                        - '0xfa415bb3e6231f488ff39eb2897db0ef3636dd32'
      responses:
        '200':
          description: Return the locked status of the account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the account was successfully locked, false otherwise.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/lockAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_lockAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xfa415bb3e6231f488ff39eb2897db0ef3636dd32"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalLockAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalLockAccountExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalLockAccountExample() throws IOException {
                    PersonalLockAccountResponse response = w3.personalLockAccount("0xda04fb00e2cb5745cef7d8c4464378202a1673ef")
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const address = "0xfa415bb3e6231f488ff39eb2897db0ef3636dd32"

                sdk.personal.lockAccount(address,{}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xfa415bb3e6231f488ff39eb2897db0ef3636dd32"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.lock_account(address)

            print(personal_response)
  /personal/newAccount:
    post:
      operationId: newAccount
      summary: '[newAccount]'
      description: |
        Generates a new private key and stores it in the key store directory. The key file is encrypted with the given passphrase. Returns the address of the new account.

        At the Klaytn console, newAccount will prompt for a passphrase when it is not supplied as the argument.

        **JSONRPC:** `personal_newAccount`
      tags:
        - personal
      parameters:
        - name: passphrase
          required: false
          schema:
            type: string
          description: (optional) the pass phrase used for encryption.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: personal_newAccount
                    params:
                      type: array
                      items:
                        title: passphrase
                        type: string
                      description: (optional) the pass phrase used for encryption.
                      example:
                        - helloWorld
      responses:
        '200':
          description: Returns The address of the new account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The address of the new account
                        example: '0xed1b12248aee85a32aead06c7789d3fcdcd4dae6'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/newAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_newAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "helloWorld"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalNewAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalNewAccountExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalNewAccountExample() throws IOException {
                    PersonalNewAccountResponse response = w3.personalNewAccount("helloWorld").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const passphrase = "helloWorld"

                sdk.personal.newAccount({passphrase}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            passphrase = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.new_account(passphrase)

            print(personal_response)
  /personal/openWallet:
    post:
      operationId: openWallet
      summary: '[openWallet]'
      description: |
        Initiates a hardware wallet opening procedure, establishing a USB connection and attempting to authenticate via the provided passphrase.

        **NOTE:** The method may return an extra challenge requiring a second open (e.g., the Trezor PIN matrix challenge).

        **JSONRPC:** `personal_openWallet`
      tags:
        - personal
      parameters:
        - name: URL
          required: true
          schema:
            type: string
          description: Wallet url
          in: query
        - name: Passphrase
          required: true
          schema:
            type: string
          description: passphrase for wallet
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalOpenWalletReq'
      responses:
        '200':
          description: Return initiates a hardware wallet opening procedure
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: Error
                        type: string
                        description: Error condition
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/openWallet' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_openWallet",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "keystore://",
                "hello@1234"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalOpenWalletResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalOpenWalletExample {

                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalOpenWalletExample() throws IOException {
                    String url = "keystore:///home/sotatek/klay-node/kcn-v1.10.2-0-linux-amd64/kcn-linux-amd64/data/keystore/UTC--2" +
                            "023-04-13T03-23-36.992476555Z--8cd4b6b24f2cd0b83d49876f932254823e875547";
                    String passphrase = "passphrase";
                    PersonalOpenWalletResponse response = w3.personalOpenWallet(url, passphrase).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const url = "keystore://"
                const passphrase = "gr8=B!0@uc$b"

                sdk.personal.openWallet(url, passphrase, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            url = "keystore://"
            passphrase = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.open_wallet(url, passphrase)

            print(personal_response)
  /personal/replaceRawKey:
    post:
      operationId: replaceRawKey
      summary: '[replaceRawKey]'
      description: |
        Replaces the encrypted key file in the key store with the given unencrypted private key (hex string without leading '0x') or a Klaytn wallet key, encrypting it with the new passphrase. It also receives the old passphrase to decrypt the old private key before replacement. If it is failed to decrypt, or can not find the matching account, it throws an error.

        Returns the address of the replaced account if successful.

        **JSONRPC:** `personal_replaceRawKey`
      tags:
        - personal
      parameters:
        - name: keydata
          required: true
          schema:
            type: string
          description: The unencrypted private key (hex string without leading '0x') or a Klaytn wallet key.
          in: query
        - name: oldPassphrase
          required: true
          schema:
            type: string
          description: The passphrase to decrypt the old private key.
          in: query
        - name: newPassphrase
          required: true
          schema:
            type: string
          description: The passphrase to encrypt the new private key.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalReplaceRawKeyReq'
      responses:
        '200':
          description: Return the address of the replaced account.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The address of the replaced account.
                        example: '0xfa415bb3e6231f488ff39eb2897db0ef3636dd32'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/replaceRawKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_replaceRawKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "ba4a5bbc0dc57d6348047be71773686d1739bf0a5ac6ca4c390f0e4d596a09a6",
                "hello@1234",
                "hello@1234"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalReplaceRawKeyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalReplaceRawKeyExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalReplaceRawKeyExample() throws IOException {
                    String key = "5b49a622d8360b719ed45b75f3db77c04d32224800c8ea113bd03bb1d35562cd";
                    String oldPassphrase = "mypassword";
                    String newPassphrase = "mynewpassword";

                    PersonalReplaceRawKeyResponse response = w3.personalReplaceRawKey(key, oldPassphrase, newPassphrase)
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const keyData = "24c34f686a5848edb19180fb723b5db21c626f253e8b63bf8a0054ea67852c0a";
                const oldPassphrase = "hello@123";
                const newPassphrase = "hello@123";

                sdk.personal.replaceRawKey(keyData, oldPassphrase, newPassphrase, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            keyData = "24c34f686a5848edb19180fb723b5db21c626f253e8b63bf8a0054ea67852c0a"
            oldPassphrase = "helloWorld"
            newPassphrase = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.replace_raw_key(keyData, oldPassphrase, newPassphrase)

            print(personal_response)
  /personal/sendAccountUpdate:
    post:
      operationId: sendAccountUpdate
      summary: '[sendAccountUpdate]'
      description: |
        Validates the given passphrase and submits a TxTypeAccountUpdate transaction. The transaction object must have fields from and key. Other fields such as gas, gasPrice, and nonce are se internally if unspecified. If the passphrase is able to decrypt the private key belonging to tx.from and the transaction is verified, the transaction is signed and submitted onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls.

        **JSONRPC:** `personal_sendAccountUpdate`
      tags:
        - personal
      parameters:
        - name: tx
          required: true
          schema:
            type: string
          description: A transaction object. from and key must be specified.
          in: query
        - name: passphrase
          required: true
          schema:
            type: string
          description: The passphrase to decrypt the private key of tx.from.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalSendAccountUpdateReq'
      responses:
        '200':
          description: Return a transaction hash if succeeded. Otherwise, an error is raised.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: a transaction hash if succeeded. Otherwise, an error is raised.
                        example: '0x8474441674cdd47b35b875fd1a530b800b51a5264b9975fb21129eeb8c18582f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/sendAccountUpdate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_sendAccountUpdate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                    "from":"0x1d4e05bb72677cb8fa576149c945b57d13f855e4",
                    "key":"0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8"
                },
                "gr8=B!0@uc$b"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalSendAccountUpdateResponse;
            import org.web3j.protocol.klaytn.core.method.response.TransactionObject;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalSendAccountUpdateExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalSendAccountUpdateExample() throws IOException {
                    TransactionObject transactionObject = new TransactionObject();
                    transactionObject.setFrom("0x1d4e05bb72677cb8fa576149c945b57d13f855e4");
                    transactionObject.setKey("0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8");

                    String passphrase = "gr8=B!0@uc$b";

                    PersonalSendAccountUpdateResponse response = w3.personalSendAccountUpdate(transactionObject, passphrase).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const tx =   {
                    "from":"0x1d4e05bb72677cb8fa576149c945b57d13f855e4",
                    "key":"0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8"
                };
                const passphrase = "gr8=B!0@uc$b";

                sdk.personal.sendAccountUpdate(tx, passphrase, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            tx = {
                "from": "0x1d4e05bb72677cb8fa576149c945b57d13f855e4",
                "key": "0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8"
            }
            passphrase = "gr8=B!0@uc$b"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.send_account_update(tx, passphrase)

            print(personal_response)
  /personal/sendTransaction:
    post:
      operationId: sendTransaction
      summary: '[sendTransaction]'
      description: |
        Validates the given passphrase and submits a TxTypeLegacy transaction. The transaction object must have from and to except the case of contract deployment. to should be omitted if the transaction deploys a smart contract. If value is not specified, it will be set to zero internally. Other fields such as gas, gasPrice, and nonce are set to appropriate values internally if unspecified. If the passphrase is able to decrypt the private key belonging to tx.from and the transaction is verified, the transaction is signed and submitted onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls.

        **JSONRPC:** `personal_sendTransaction`
      tags:
        - personal
      parameters:
        - name: tx
          required: true
          schema:
            type: string
          description: A transaction object. from is a required field. to, value, gas, gasPrice and nonce are optional fields.
          in: query
        - name: passphrase
          required: true
          schema:
            type: string
          description: The passphrase to decrypt the private key of tx.from.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalSendTransactionReq'
      responses:
        '200':
          description: Return a transaction hash if succeeded. Otherwise, an error is raised.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: SendTransactionResponse
                        type: string
                        format: 32-byte DATA
                        description: a transaction hash if succeeded. Otherwise, an error is raised.
                        example: '0x8474441674cdd47b35b875fd1a530b800b51a5264b9975fb21129eeb8c18582f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/sendTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_sendTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1",
                  "gas": "0x9999"
                },
                "helloWorld"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.PersonalSendTransactionResponse;
            import org.web3j.protocol.klaytn.core.method.response.TransactionObject;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.concurrent.ExecutionException;

            public class PersonalSendTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalSendTransactionExample() throws IOException, ExecutionException, InterruptedException {
                    TransactionObject transactionObject = new TransactionObject();
                    transactionObject.setFrom("0x413ba0e5f6f00664598b5c80042b1308f4ff1408");
                    transactionObject.setTo("0x8cd4b6b24f2cd0b83d49876f932254823e875547");
                    transactionObject.setValue("0x1");

                    String password = "helloWorld";

            //        PersonalSendTransactionResponse response = w3.personalSendTransaction(transactionObject, password).send();
            //        response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const tx = {
                    "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1"
                };
                const passphrase = "helloWorld";

                sdk.personal.sendTransaction(tx, passphrase, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            tx = {
                "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1"
            }
            passphrase = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.send_transaction(tx, passphrase)

            print(personal_response)
  /personal/sendValueTransfer:
    post:
      operationId: sendValueTransfer
      summary: '[sendValueTransfer]'
      description: |
        Validates the given passphrase and submits a TxTypeValueTransfer transaction. The transaction object must have fields from, to, and value. Other fields such as gas, gasPrice, and nonce are set internally if unspecified. If the passphrase is able to decrypt the private key belonging to tx.from and the transaction is verified, the transaction is signed and submitted onto the network. The account is not unlocked globally in the node and cannot be used in other RPC calls.

        **JSONRPC:** `personal_sendValueTransfer`
      tags:
        - personal
      parameters:
        - name: tx
          required: true
          schema:
            type: string
          description: A transaction object. from, to, and value must be specified.
          in: query
        - name: passphrase
          required: true
          schema:
            type: string
          description: The passphrase to decrypt the private key of tx.from.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalSendValueTransferReq'
      responses:
        '200':
          description: Return a transaction hash if succeeded. Otherwise, an error is raised.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: SendValueTransferResponse
                        type: string
                        format: 32-byte DATA
                        description: a transaction hash if succeeded. Otherwise, an error is raised.
                        example: '0x8474441674cdd47b35b875fd1a530b800b51a5264b9975fb21129eeb8c18582f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/sendValueTransfer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_sendValueTransfer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1"
                },
                "helloWorld"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalSendValueTransferResponse;
            import org.web3j.protocol.klaytn.core.method.response.TransactionObject;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.concurrent.ExecutionException;

            public class PersonalSendValueTransferExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalSendValueTransferExample() throws IOException, ExecutionException, InterruptedException {
                    TransactionObject transactionObject = new TransactionObject();
                    transactionObject.setFrom("0x1d4e05bb72677cb8fa576149c945b57d13f855e4");
                    transactionObject.setTo("0xafa3f8684e54059998bc3a7b0d2b0da075154d66");
                    transactionObject.setValue("0x1230000000");

                    String passphrase = "helloWorld";

                    PersonalSendValueTransferResponse response = w3.personalSendValueTransfer(transactionObject, passphrase).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const tx = {
                    "from": "0x1d4e05bb72677cb8fa576149c945b57d13f855e4",
                    "to": "0xafa3f8684e54059998bc3a7b0d2b0da075154d66",
                    "value": "0x1230000000"
                };
                const passphrase = "helloWorld";

                sdk.personal.sendValueTransfer(tx, passphrase, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            tx = {
                "from": "0x1d4e05bb72677cb8fa576149c945b57d13f855e4",
                "to": "0xafa3f8684e54059998bc3a7b0d2b0da075154d66",
                "value": "0x1230000000"
            }
            passphrase = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.send_value_transfer(tx, passphrase)

            print(personal_response)
  /personal/sign:
    post:
      operationId: sign
      summary: '[sign]'
      description: |
        The sign method calculates a Klaytn-specific signature with: sign(keccak256("\x19Klaytn Signed Message:\n" + len(message) + message)))

        Adding a prefix to the message makes the calculated signature recognizable as a Klaytn-specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g., transaction) and use the signature to impersonate the victim.

        See personal_ecRecover to verify the signature.

        **JSONRPC:** `personal_sign`
      tags:
        - personal
      parameters:
        - name: message
          required: true
          schema:
            type: string
          description: A message to sign.
          in: query
        - name: account
          required: true
          schema:
            type: string
          description: The account address.
          in: query
        - name: password
          required: true
          schema:
            type: string
          description: The pass phrase used for signing.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalSignReq'
      responses:
        '200':
          description: Return the a signature.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: A signature.
                        example: '0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/sign' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_sign",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xdeadbeaf",
                "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                "helloWorld"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.PersonalSignResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalSignExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalSignExample() throws IOException {
                    String message = "0xdead";
                    String address = "0xb44b66f0d6ea803175f921018cba7e914fed25b9";
                    String passphrase = "helloWorld";

            //        PersonalSignResponse response = w3.personalSign(message, address, passphrase)
            //                .send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const address = '0x6b1ac7bda0073095df1d434c39d66fb31a592bdd';
                const message = '0xdeadbeaf';
                const password = "helloWorld";

                sdk.personal.sign(message, address, password, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xfa415bb3e6231f488ff39eb2897db0ef3636dd32"
            message = "0xdeadbeaf"
            password = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.sign(message, address, password)

            print(personal_response)
  /personal/signTransaction:
    post:
      operationId: signTransaction
      summary: '[signTransaction]'
      description: |
        Sets default configuration and signs the given transaction.

        **NOTE:** Sending your account password over an unsecured HTTP RPC connection is highly unsecure. Use klay_signTransaction.

        **JSONRPC:** `personal_signTransaction`
      tags:
        - personal
      parameters:
        - name: transactionData
          required: true
          schema:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          description: Transaction data.
          in: query
        - name: password
          required: true
          schema:
            type: string
          description: password
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalSignTransactionReq'
      responses:
        '200':
          description: Returns signed raw transaction and transaction object and sender's password
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/PersonalSignTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/signTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_signTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1",
                  "gas": "0x9999",
                  "nonce": "0x1"
                }, "helloWorld"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.PersonalSignTransactionResponse;
            import org.web3j.protocol.klaytn.core.method.response.TransactionObject;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalSignTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalSignTransactionExample() throws IOException {
                    TransactionObject transactionObject = new TransactionObject();
                    transactionObject.setFrom("0x413ba0e5f6f00664598b5c80042b1308f4ff1408");
                    transactionObject.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    transactionObject.setValue("0x1");
                    transactionObject.setGas("0x9999");
                    transactionObject.setNonce("0x1");
                    transactionObject.setGasPrice("0x25000000000");

                    String password = "helloWorld";

            //        PersonalSignTransactionResponse response = w3.personalSignTransaction(transactionObject, password).send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const transactionData = {
                    "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                    "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                    "value": "0x1",
                    "gas": "0x9999",
                    "nonce": "0x1"
                };
                const password = "helloWorld";

                sdk.personal.signTransaction(transactionData, password, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "nonce": "0x1",
                "gasPrice": "0x25000000000"
            }
            password = "helloWorld"

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.sign_transaction(transactionObject, password)

            print(personal_response)
  /personal/unlockAccount:
    post:
      operationId: unlockAccount
      summary: '[unlockAccount]'
      description: |
        Decrypts the key with the given address from the key store.

        Both passphrase and unlock duration are optional when using the JavaScript console. If the passphrase is not supplied as an argument, the console will prompt for the passphrase interactively.

        The unencrypted key will be held in memory until the unlock duration expires. If the unlock duration defaults to 300 seconds. An explicit duration of zero seconds unlocks the key until the Klaytn local node exits.

        The account can be used with klay_sign and klay_sendTransaction while it is unlocked.

        **JSONRPC:** `personal_unlockAccount`
      tags:
        - personal
      parameters:
        - name: address
          required: true
          schema:
            type: string
          description: The account address to unlock.
          in: query
        - name: passphrase
          required: true
          schema:
            type: string
          description: the passphrase used for the encryption.
          in: query
        - name: duration
          required: false
          schema:
            type: integer
            default: 300
          description: (optional) the unlock duration (default to 300 seconds).
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PersonalUnlockAccountReq'
      responses:
        '200':
          description: Return true if unlocked, false otherwise
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if unlocked, false otherwise
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/personal/unlockAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "personal_unlockAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x6b1ac7bda0073095df1d434c39d66fb31a592bdd",
                "helloWorld",
                30
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.personal;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.PersonalUnlockAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class PersonalUnlockAccountExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void personalUnlockAccountExample() throws IOException {
                    String address = "0xb1ab1f758e0d6398c568936400ea94825c4ebdc2";
                    String passphrase = "helloWorld";
                    int duration = 30;

                    PersonalUnlockAccountResponse response = w3.personalUnlockAccount(address, passphrase, duration)
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const address = "0x6b1ac7bda0073095df1d434c39d66fb31a592bdd";
                const passphrase = "helloWorld";
                const duration = 10;

                sdk.personal.unlockAccount(address, passphrase, {duration}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xfa415bb3e6231f488ff39eb2897db0ef3636dd32"
            passphrase = "helloWorld"
            duration = 30

            w3 = Web3(Web3.HTTPProvider(host))
            personal_response = w3.personal.unlock_account(address, passphrase, duration)

            print(personal_response)
  /debug/logging/backtraceAt:
    post:
      operationId: backtraceAt
      summary: '[Logging-backtraceAt]'
      description: |
        Sets the logging backtrace location. When a backtrace location is set and a log message is emitted at that location, the stack of the goroutine executing the log statement will be printed to stderr.

        **JSONRPC:** `debug_backtraceAt`
      tags:
        - debug
      parameters:
        - name: location
          in: query
          description: The logging backtrace location specified as \<filename>:\<line>.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/BacktraceAtReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/BacktraceAtResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/backtraceAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_backtraceAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["server.go:443"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.logging;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugBacktraceAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugBacktraceAtExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugBacktraceAtExample() throws IOException {
                    String location = "server.go:443";

                    DebugBacktraceAtResponse response = w3.debugBacktraceAt(location).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const location = "server.go:443";

                sdk.debug.backtraceAt(location, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            location = "server.go:443"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.backtrace_at(location)

            print(debug_response)
  /debug/logging/setVMLogTarget:
    post:
      summary: '[Logging-setVMLogTarget]'
      tags:
        - debug
      operationId: setVMLogTarget
      description: |
        Sets the output target of vmlog precompiled contract. When the output target is a file, logs from vmlog calls in smart contracts will be written to DATADIR/log/vm.log. Here DATADIR is the directory specified by --datadir when launching klay. On the other hand, the output target is stdout, logs will be displayed like a debug message on the standard output.

        **JSONRPC:** `debug_setVMLogTarget`
      parameters:
        - name: target
          in: query
          description: The output target (0 no output, 1 file, 2 stdout, 3 both) (default 0)
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_setVMLogTarget
                    params:
                      type: array
                      items:
                        title: target
                        type: integer
                        description: The output target (0 no output, 1 file, 2 stdout, 3 both) (default 0)
                        example: 3
      responses:
        '200':
          description: Return the output target
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The output target. See the examples below for the actual return values.
                        example: both file and stdout
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setVMLogTarget' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setVMLogTarget",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [3]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.logging;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugSetVMLogTargetResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetVMLogTargetExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugSetVMLogTargetExample() throws IOException {
                    int target = 3;

                    DebugSetVMLogTargetResponse response = w3.debugSetVMLogTarget(target).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const target = 3;

                sdk.debug.setVMLogTarget(target, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            target = 3

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_vm_log_target(target)

            print(debug_response)
  /debug/logging/verbosity:
    post:
      operationId: verbosity
      summary: '[Logging-verbosity]'
      description: |
        Sets the logging verbosity ceiling. Log messages with level up to and including the given level will be printed.

        (Level : 0=crit, 1=error, 2=warn, 3=info, 4=debug, 5=trace)

        The verbosity of individual packages and source files can be raised using debug_vmodule.

        **JSONRPC:** `debug_verbosity`
      tags:
        - debug
      parameters:
        - name: level
          in: query
          description: The logging verbosity level.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/VerbosityReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/VerbosityResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/verbosity' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_verbosity",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [3]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.logging;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugVerbosityResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugVerbosityExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugVerbosityExample() throws IOException {
                    int level = 3;

                    DebugVerbosityResponse response = w3.debugVerbosity(level).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const level = 3;

                sdk.debug.verbosity(level, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            level = 3

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.verbosity(level)

            print(debug_response)
  /debug/logging/verbosityByID:
    post:
      operationId: verbosityByID
      summary: '[Logging-verbosityByID]'
      description: |
        Sets the verbosity of log module with given ModuleID. Please note that VerbosityByID only works with zapLogger.

        (ModuleID : Please refer to the code on the github. )

        (Level : 0=crit, 1=error, 2=warn, 3=info, 4=debug, 5=trace)

        The verbosity of individual packages and source files can be raised using debug_vmodule.

        **JSONRPC:** `debug_verbosityByID`
      tags:
        - debug
      parameters:
        - name: id
          in: query
          description: The module id.
          required: true
          schema:
            type: integer
        - name: level
          in: query
          description: The logging verbosity level.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/VerbosityByIDReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/VerbosityByIDResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/verbosityByID' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_verbosityByID",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [1, 3]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.logging;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugVerbosityByIDResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugVerbosityByIDExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugVerbosityByIDExample() throws IOException {
                    int id = 1;
                    int level = 3;

                    DebugVerbosityByIDResponse response = w3.debugVerbosityByID(id, level).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const id = 1;
                const level = 3;

                sdk.debug.verbosityByID(id, level, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            verId = 1
            level = 3

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.verbosity_by_id(verId, level)

            print(debug_response)
  /debug/logging/verbosityByName:
    post:
      operationId: verbosityByName
      summary: '[Logging-verbosityByName]'
      description: |
        Sets the verbosity of log module with given name. Please note that VerbosityByName only works with zapLogger.

        (Level : 0=crit, 1=error, 2=warn, 3=info, 4=debug, 5=trace)

        The verbosity of individual packages and source files can be raised using debug_vmodule.

        **JSONRPC:** `debug_verbosityByName`
      tags:
        - debug
      parameters:
        - name: name
          in: query
          description: The module name.
          required: true
          schema:
            type: string
        - name: level
          in: query
          description: The logging verbosity level.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/VerbosityByNameReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/VerbosityByNameResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/verbosityByName' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_verbosityByName",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["API", 1]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.logging;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugVerbosityByNameResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugVerbosityByNameExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugVerbosityByNameExample() throws IOException {
                    String name = "API";
                    int level = 3;

                    DebugVerbosityByNameResponse response = w3.debugVerbosityByName(name, level).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const name = "API";
                const level = 1;

                sdk.debug.verbosityByName(name, level, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            name = "API"
            level = 1

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.verbosity_by_name(name, level)

            print(debug_response)
  /debug/logging/vmodule:
    post:
      operationId: vmodule
      summary: '[Logging-vmodule]'
      description: |
        Sets the logging verbosity pattern.

        **JSONRPC:** `debug_vmodule`
      tags:
        - debug
      parameters:
        - name: module
          in: query
          description: The module name for logging.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/VmoduleReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/VmoduleResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/vmodule' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_vmodule",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["p2p=4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.logging;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugVmoduleResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugVModuleExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugVModuleExample() throws IOException {
                    String module = "p2p=4";

                    DebugVmoduleResponse response = w3.debugVmodule(module).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const module = "p2p=4";

                sdk.debug.vmodule(module, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            module = "p2p=4"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.vmodule(module)

            print(debug_response)
  /debug/blockchainInspection/chaindbCompact:
    post:
      operationId: chaindbCompact
      summary: '[Inspection-chaindbCompact]'
      description: |
        ChaindbCompact flattens the entire key-value database into a single level, removing all unused slots and merging all keys.

        **JSONRPC:** `debug_chaindbCompact`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ChaindbCompactReq'
      responses:
        '200':
          description: Return value null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: ChaindbCompactResult
                        type: string
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://public-en-baobab.klaytn.net/debug/chaindbCompact' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_chaindbCompact",
              "id": 42,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugChaindbCompactResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugChaindbCompactExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugChaindbCompactExample() throws IOException {
                    DebugChaindbCompactResponse response = w3.debugChaindbCompact().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                sdk.debug.chaindbCompact({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.chaindb_compact()

            print(debug_response)
  /debug/blockchainInspection/chaindbProperty:
    post:
      operationId: chaindbProperty
      summary: '[Inspection-chaindbProperty]'
      description: |
        ChaindbProperty returns leveldb properties of the key-value database.

        **JSONRPC:** `debug_chaindbProperty`
      tags:
        - debug
      parameters:
        - name: string
          required: true
          schema:
            type: string
          description: string
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/chaindbPropertyReq'
      responses:
        '200':
          description: Return string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        example: string
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/chaindbProperty' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_chaindbProperty",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugChaindbPropertyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugChaindbPropertyExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugChaindbPropertyExample() throws IOException {
                    String property = "0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f";

                    DebugChaindbPropertyResponse response = w3.debugChaindbProperty(property).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const property = "0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f";

                sdk.debug.chaindbProperty(property, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            string = "0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.chaindb_property(string)

            print(debug_response)
  /debug/blockchainInspection/dumpBlock:
    post:
      operationId: dumpBlock
      summary: '[Inspection-dumpBlock]'
      description: |
        Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code).

        **NOTE:** This function correctly returns the state for a few latest, currently 4, block numbers. Retrieving older block state is restricted depending on the value set for the command-line option --state.block-interval (default: 128). This means that the function performs the state retrieval against only the block numbers that are multiples of state.block-interval. For example, when state.block-interval is 128, this function returns the state for the block numbers "0x0", "0x80", "0x100", "0x180", and so on. If the block number is not a multiple of state.block-interval, it returns 'missing trie node' error.

        **JSONRPC:** `debug_dumpBlock`
      tags:
        - debug
      parameters:
        - name: blockNumberOrHash
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugDumpBlockReq'
      responses:
        '200':
          description: Return the block information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugDumpBlockResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/dumpBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_dumpBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x80"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugDumpBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugDumpBlockExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugDumpBlockExample() throws IOException {
                    DebugDumpBlockResponse response = w3.debugDumpBlock("0x80").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = "0x80"
                
                sdk.debug.dumpBlock(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0x80"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.dump_block(blockNumber)

            print(debug_response)
  /debug/blockchainInspection/dumpStateTrie:
    post:
      operationId: dumpStateTrie
      summary: '[Inspection-dumpStateTrie]'
      description: |
        Retrieves all state/storage tries of the given state root.

        **JSONRPC:** `debug_dumpStateTrie`
      tags:
        - debug
      parameters:
        - name: number
          required: true
          schema:
            type: string
            format: hex
          description: The block number.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_dumpStateTrie
                    params:
                      type: array
                      items:
                        oneOf:
                          - title: number
                            type: integer
                          - type: string
                            format: hex
                      description: The block number.
                      example:
                        - '0x80'
      responses:
        '200':
          description: Return the dump state Trie result
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DumpStateTrieResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/dumpStateTrie' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_dumpStateTrie",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x80"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugDumpStateTrieResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugDumpStateTrieExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugDumpStateTrieExample() throws IOException {
                    DebugDumpStateTrieResponse response = w3.debugDumpStateTrie("0x80").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = "0x80"
                
                sdk.debug.dumpStateTrie(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0x80"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.dump_state_trie(blockNumber)

            print(debug_response)
  /debug/blockchainInspection/getBadBlocks:
    post:
      operationId: getBadBlocks
      summary: '[Inspection-getBadBlocks]'
      description: |
        Returns a list of the last 'bad blocks' that the client has seen on the network.

        **JSONRPC:** `debug_getBadBlocks`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: debug_getBadBlocks
      responses:
        '200':
          description: Return a list of the last 'bad blocks'.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: JSON list of block-hashes
                        items:
                          type: object
                        example: []
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getBadBlocks' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getBadBlocks",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugGetBadBlocksResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetBadBlocksExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugGetBadBlocksExample() throws IOException {
                    DebugGetBadBlocksResponse response = w3.debugGetBadBlocks().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                sdk.debug.getBadBlocks({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_bad_blocks()

            print(debug_response)
  /debug/blockchainInspection/getBlockRlp:
    post:
      operationId: getBlockRlp
      summary: '[Inspection-getBlockRlp]'
      description: |
        Retrieves and returns the RLP-encoded block by the block number.

        **NOTE**: In versions earlier than Klaytn v1.7.0, only integer type is available.

        **JSONRPC:** `debug_getBlockRlp`
      tags:
        - debug
      parameters:
        - name: blockNumberOrHash
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetBlockRlpReq'
      responses:
        '200':
          description: Return the RLP-encoded block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The RLP-encoded block.
                        example: f90399f90394a05a825207c8396b848fefc73e442db004adee6596309af27630871b6a3d424758a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000940000000000000000000000000000000000000000a0b2ff1e4173123faa241fb93d83860e09f9e1ca1cfaf24c40c9e963e65c0b0317a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421be8d4a50fff80845bb9e92eb90187d7820401846b6c617988676f312e31302e33856c696e75780000000000000000f90164f854943b215ed129645b949722d4efbd9c749838d85bf0947050164b7718c667c9661afd924f6c0c5e5d4a01947f303b360063efc575e99cf2f7602efa034e832e94f38624dba0e106aa6a79335f77d3fd6409f9e4d8b84126d1ae355905704d8ffcc50599a8a051ac7c50ed6fc6d7caf6510cf0329b56cf3e3babfe45cc95143074ca0385627ea3b6ac3f6ad7961b60f23e32965d3b0c2900f8c9b841c3423ecb41ee86b193dbb98bf74e0c1b8e0c475503a8f5ef37ef7566af34443c77b492a1f92e5a7411c36efeae08ebc698d02353c38f07a3d5c32168243ab7e901b841ec6558f4e5d123b9dc240e77db493f1e5e2f55f108d3c4f9b39e10dbca39ad7b3fc2dd5d27a7a3d92938ad4245bef5a914377fb2b92cbe342067a9963ab121b700b841f34ed94f29cd0aefd841cc8aba9dcc9d4c2fe14795f3a661e8ce92c2014c2099327e5f4285e1d1821e55f297cf5252bafed521ab49906b9b596a3187ce1e529c00a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000c0c0
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getBlockRlp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getBlockRlp",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugGetBlockRlpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetBlockRlpExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugGetBlockRlpExample() throws IOException {
                    DebugGetBlockRlpResponse response = w3.debugGetBlockRlp("earliest").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = "200"
                
                sdk.debug.getBlockRlp(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_block_rlp(blockHash)

            print(debug_response)
  /debug/blockchainInspection/getModifiedAccountsByHash:
    post:
      operationId: getModifiedAccountsByHash
      summary: '[Inspection-getModifiedAccountsByHash]'
      description: |
        Returns all accounts that have changed between the two blocks specified by their block hashes. Changes made in endBlockHash are included, but changes made in startBlockHash are not. If endBlockHash is not given, it returns the accounts modified in the startBlockHash. A change is defined as a difference in nonce, balance, code hash, or storage hash.

        **JSONRPC:** `debug_getModifiedAccountsByHash`
      tags:
        - debug
      parameters:
        - name: startBlockHash
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: The first block hash of the range to check.
          in: query
        - name: endBlockHash
          required: false
          schema:
            type: string
            format: 32-byte DATA
          description: (optional) The last block hash of the range.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetModifiedAccountsByHashReq'
      responses:
        '200':
          description: Return the list of addresses modified between the given range.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: Addresses
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
                        description: The list of addresses modified between the given range.
                        example:
                          - '0x31b93ca83b5ad17582e886c400667c6f698b8ccd'
                          - '0xb7fe15c42e66bd71835b07dc6e7daee7729f6235'
                          - '0xe31a0edb11357dba71377e625fc6174da4ef4321'
                          - '0x16b11cf9c2186a117b0da38315b42b1eaa03bbe5'
                          - '0xd3ec3c7e4cad042dbdcb6a7e0fdbc55a92276f12'
                          - '0xa4e0d726ce51572e66295756ad93206592c43a59'
                          - '0xf65e07b6626ab43ecea744803fa46bd4a89bfdb6'
                          - '0xaac56dfe44f9894d4f536cd17acfbc44bf81a843'
                          - '0x3855407fa65c4c5104648b3a9e495072df62b585'
                          - '0x61a7cbdd597848494fa85cbb76f9c63ad9c06cad'
                          - '0xa4845491cb0dad5bd6707a33c02af0d9db435c15'
                          - '0x026e8f70a26b6e5c8bec25e23869846edfdd6728'
                          - '0x3cf3e8caea91501321feee0f0692fcd98f1c6292'
                          - '0x18822790d7baf2fa6bbca6ad8baa46985abeb81b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getModifiedAccountsByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getModifiedAccountsByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x165c29e453dff6e1d9838d9e975a438b6f11a2c0a281b0d5b97c8d3110a79ac5", "0x2a8acdc3e9bb735918dc6a0141b9939976f446fde0b39336d74278da93b8d41d"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugGetModifiedAccountsByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetModifiedAccountsByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugGetModifiedAccountsByHashExample() throws IOException {
                    String startBlockHash = "0xcc1ac1e244f9f83b812b5d77ada1c399f02ea7b61e72ff31789d9ef6dad45442";
                    String endBlockHash = "0x437e92b2d30a0a828dfdd23b837a8ddf8c8b79c222e191d16c47afbf5a6aaed7";

                    DebugGetModifiedAccountsByHashResponse response = w3.debugGetModifiedAccountsByHash(startBlockHash, endBlockHash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const startBlockHash = "0x165c29e453dff6e1d9838d9e975a438b6f11a2c0a281b0d5b97c8d3110a79ac5"
                const endBlockHash = "0x2a8acdc3e9bb735918dc6a0141b9939976f446fde0b39336d74278da93b8d41d"

                sdk.debug.getModifiedAccountsByHash(startBlockHash, {endBlockHash}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            startBlockHash = "0xcc1ac1e244f9f83b812b5d77ada1c399f02ea7b61e72ff31789d9ef6dad45442"
            endBlockHash = "0x437e92b2d30a0a828dfdd23b837a8ddf8c8b79c222e191d16c47afbf5a6aaed7"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_modified_accounts_by_hash(startBlockHash, endBlockHash)

            print(debug_response)
  /debug/blockchainInspection/getModifiedAccountsByNumber:
    post:
      operationId: getModifiedAccountsByNumber
      summary: '[Inspection-getModifiedAccountsByNumber]'
      description: |
        Returns all accounts that have changed between the two blocks specified by their block numbers. Changes made in endBlockNum are included, but changes made in startBlockNum are not. If endBlockNum is not given, it returns the accounts modified in the startBlockNum. A change is defined as a difference in nonce, balance, code hash, or storage hash.

        **JSONRPC:** `debug_getModifiedAccountsByNumber`
      tags:
        - debug
      parameters:
        - name: startBlockNum
          required: true
          schema:
            type: integer
          description: The first block number of the range to check.
          in: query
        - name: endBlockNum
          required: false
          schema:
            type: integer
          description: (optional) The last block number of the range.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetModifiedAccountsByNumberReq'
      responses:
        '200':
          description: Return the list of addresses modified between the given range.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
                        description: The list of addresses modified between the given range.
                        example:
                          - '0x31b93ca83b5ad17582e886c400667c6f698b8ccd'
                          - '0xb7fe15c42e66bd71835b07dc6e7daee7729f6235'
                          - '0xe31a0edb11357dba71377e625fc6174da4ef4321'
                          - '0x16b11cf9c2186a117b0da38315b42b1eaa03bbe5'
                          - '0xd3ec3c7e4cad042dbdcb6a7e0fdbc55a92276f12'
                          - '0xa4e0d726ce51572e66295756ad93206592c43a59'
                          - '0xf65e07b6626ab43ecea744803fa46bd4a89bfdb6'
                          - '0xaac56dfe44f9894d4f536cd17acfbc44bf81a843'
                          - '0x3855407fa65c4c5104648b3a9e495072df62b585'
                          - '0x61a7cbdd597848494fa85cbb76f9c63ad9c06cad'
                          - '0xa4845491cb0dad5bd6707a33c02af0d9db435c15'
                          - '0x026e8f70a26b6e5c8bec25e23869846edfdd6728'
                          - '0x3cf3e8caea91501321feee0f0692fcd98f1c6292'
                          - '0x18822790d7baf2fa6bbca6ad8baa46985abeb81b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getModifiedAccountsByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getModifiedAccountsByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [128]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugGetModifiedAccountsByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetModifiedAccountsByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugGetModifiedAccountsByNumberExample() throws IOException {
                    int startBlockNum = 171904;
                    int endBlockNum = 172160;
                    DebugGetModifiedAccountsByNumberResponse response = w3.debugGetModifiedAccountsByNumber(startBlockNum, endBlockNum).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const startBlockNum = 171904
                const endBlockNum = 172160

                sdk.debug.getModifiedAccountsByNumber(startBlockNum, {endBlockNum}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            startBlockNum = 171904
            endBlockNum = 172160

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_modified_accounts_by_number(startBlockNum, endBlockNum)

            print(debug_response)
  /debug/blockchainInspection/getModifiedStorageNodesByNumber:
    post:
      operationId: getModifiedStorageNodesByNumber
      summary: '[Inspection-getModifiedStorageNodesByNumber]'
      description: |
        Returns the number of changed or modified state trie nodes.

        **JSONRPC:** `debug_getModifiedStorageNodesByNumber`
      tags:
        - debug
      parameters:
        - name: address
          required: true
          schema:
            type: string
            format: 20-byte DATA
          description: Address
          in: query
        - name: startBlockNum
          required: true
          schema:
            type: integer
          description: The first block number of the range to check.
          in: query
        - name: endBlockNum
          required: true
          schema:
            type: integer
          description: The last block number of the range.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetModifiedStorageNodesByNumberReq'
      responses:
        '200':
          description: Return the number of changed or modified state trie nodes (int)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        description: Return the number of changed or modified state trie nodes (int)
                        type: number
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getModifiedStorageNodesByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getModifiedStorageNodesByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x73a7d19d14f7dfac5b799e405e22133b2adc57a6", 100, 200]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.others;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugGetModifiedStorageNodesByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class DebugGetModifiedStorageNodesByNumberExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
              void debugGetModifiedStorageNodesByNumberExample() throws IOException {
                String address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
                Integer startBlockNum = 100;
                Integer endBlockNum = 200;
                DebugGetModifiedStorageNodesByNumberResponse response = w3.debugGetModifiedStorageNodesByNumber(
                    address, startBlockNum, endBlockNum).send();
                response.getResult();
              }

            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
                const startBlockNum = 100;
                const endBlockNum = 200;

                sdk.debug.getModifiedStorageNodesByNumber(address, startBlockNum, endBlockNum, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://dev.api.klaytn.sotatek.works"

            address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6"
            startBlockNum = 100
            endBlockNum = 200

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_modified_storage_nodes_by_number(address, startBlockNum, endBlockNum)

            print(debug_response)
  /debug/blockchainInspection/preimage:
    post:
      summary: '[Inspection-preimage]'
      tags:
        - debug
      operationId: preimage
      description: |
        Returns the preimage for a sha3 hash, if known.

        **JSONRPC:** `debug_preimage`
      parameters:
        - name: hash
          in: query
          description: sha3 hash.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_preimage
                    params:
                      type: array
                      description: sha3 hash.
                      items:
                        title: Hash
                        type: string
                        example: '0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586'
      responses:
        '200':
          description: Returns the preimage for a sha3 hash, if known.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: preimage
                        type: string
                        description: Preimage for a sha3 hash.
                        example: '0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/blockProfile/debug/preimage' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_preimage",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugPreimageResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugPreimageExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugPreImageExample() throws IOException {
                    String sha3Hash = "0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586";

                    DebugPreimageResponse response = w3.debugPreimage(sha3Hash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const sha3Hash = "0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586"

                sdk.debug.preimage(sha3Hash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            sha3Hash = "0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.preimage(sha3Hash)

            print(debug_response)
  /debug/blockchainInspection/printBlock:
    post:
      operationId: printBlock
      summary: '[Inspection-printBlock]'
      description: |
        Retrieves a block and returns its pretty printed form.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer type is available.*

        **JSONRPC:** `debug_printBlock`
      tags:
        - debug
      parameters:
        - name: blockNumberOrHash
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter, or block hash.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PrintBlockReq'
      responses:
        '200':
          description: Return the dump of a block struct.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Dump of a block struct.
                        example: "(*types.Block)(0xc4355b05a0)(Block(#65120): Size: 2.95 kB {\nMinerHash: 7a5f8d37d34be6d9d19c5f161756d607da62227bb725ddb2f372682d7a9f1445\nHeader(e96d6477acfeba8ba865c315020471dcf751aa1bddca77f469334ab0492d218f):\n[\n\tParentHash:       e768b5b7eeb1005fe130c26da744d47e042e9227cee675fa70c89ede38653aea\n\tCoinbase:         0000000000000000000000000000000000000000\n\tRewardbase:  ... 0000000000000000000000000000000000000000\n\tRoot:             4fd68a8f550cbd9ad665bc1a8021882ced5e1859fd9e28a48cb2910532b6ef27\n\tTxSha:            e3dbb8245038adcdc849de54af1d05f0c36c4c20d2710e31d525bd012d20a193\n\tReceiptSha:       212d4f453a897e2a486c86a4b120c1a850e89753865fe7f1aafa4"
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/printBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_printBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x80"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugPrintBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugPrintBlockExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugPrintBlockExample() throws IOException {
                    String blockNumber = "0x80";

                    DebugPrintBlockResponse response = w3.debugPrintBlock(blockNumber).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = "0x80";

                sdk.debug.printBlock(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0x80"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.print_block(blockNumber)

            print(debug_response)
  /debug/blockchainInspection/seedHash:
    post:
      operationId: seedHash
      summary: '[Inspection-seedHash]'
      description: |
        Retrieves the seed hash of a block.

        **JSONRPC:** `debug_seedHash`
      tags:
        - debug
      parameters:
        - name: blockNumber
          required: true
          schema:
            type: integer
            format: uint64
          description: The block number.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SeedHashReq'
      responses:
        '200':
          description: The block seed hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: SeedHash
                        type: string
                        description: The block seed hash.
                        example: '0x0000000000000000000000000000000000000000000000000000000000000000'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/seedHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_seedHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [100]
            }'
  /debug/blockchainInspection/setHead:
    post:
      operationId: setHead
      summary: '[Inspection-setHead]'
      description: |
        Sets the current head of the local chain by block number.

        **WARNING:** This API is not yet implemented and always returns "not yet implemented API" error.

        **NOTE:** This is a destructive action and may severely damage your chain. Use with extreme caution.

        **JSONRPC:** `debug_setHead`
      tags:
        - debug
      parameters:
        - name: number
          required: true
          schema:
            type: string
          description: The block number in hexadecimal string.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_setHead
                    params:
                      type: array
                      items:
                        title: number
                        type: string
                      description: The block number in hexadecimal string.
                      example:
                        - '0x100'
      responses:
        '200':
          description: Return "not yet implemented API" error.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setHead' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setHead",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x100"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugSetHeadResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetHeadExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugSetHeadExample() throws IOException {
                    DebugSetHeadResponse response = w3.debugSetHead("0x100").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const number = "0x100"

                sdk.debug.setHead(number, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            number = "0x100"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_head(number)

            print(debug_response)
  /debug/blockchainInspection/startCollectingTrieStats:
    post:
      operationId: startCollectingTrieStats
      summary: '[Inspection-startCollectingTrieStats]'
      description: |
        The startCollectingTrieStats iterates the latest state or storage trie to collect trie statistics. It collects storage trie statistics of the contract in the given address. If an empty address(="0x00...00") is given, it collects statistics of the whole state trie. Statistics will be logged every minute before end, containing overall and depth-by-depth information. The method returns an error if it fails in starting a task, or null if it successfully has started it.

        **JSONRPC:** `debug_startCollectingTrieStats`
      tags:
        - debug
      parameters:
        - name: address
          in: query
          description: Contract address
          required: true
          schema:
            type: string
            format: 20-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_startCollectingTrieStats
                    params:
                      type: array
                      items:
                        type: string
                      description: Contract address
                      example:
                        - '0x0000000000000000000000000000000000000000'
      responses:
        '200':
          description: null if collecting trie statistics task is started, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: null if collecting trie statistics task is started, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startCollectingTrieStats' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startCollectingTrieStats",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x0000000000000000000000000000000000000000"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStartCollectingTrieStatsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartCollectingTrieStatsExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    String address = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b";

                    DebugStartCollectingTrieStatsResponse response = w3.debugStartCollectingTrieStats(address).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = "0x0000000000000000000000000000000000000000"

                sdk.debug.startCollectingTrieStats(address, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x0000000000000000000000000000000000000000"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_collecting_trie_stats(address)

            print(debug_response)
  /debug/blockchainInspection/startContractWarmUp:
    post:
      operationId: startContractWarmUp
      summary: '[Inspection-startContractWarmUp]'
      description: |
        The startContractWarmUp iterates the latest storage trie of the given contract address to warm-up the trie cache. The iteration will be automatically stopped if 90% of the trie cache is full. The method returns an error if it fails in starting a warm-up or the given address is not a contract address, or null if it successfully has started it.

        **JSONRPC:** `debug_startContractWarmUp`
      tags:
        - debug
      parameters:
        - name: address
          in: query
          description: Contract address
          required: true
          schema:
            type: string
            format: 20-byte DATA
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_startContractWarmUp
                    params:
                      type: array
                      items:
                        type: string
                      description: Contract address
                      example:
                        - '0x4Cd39B49064a31E966cA0ddF4111aCe2eD7E9502'
      responses:
        '200':
          description: Return null if a warm-up is started, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: StartContractWarmUpResult
                        type: string
                        description: null if a warm-up is started, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startContractWarmUp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startContractWarmUp",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xfD1d63a152f7A7Ef14bd157C1c73c5bC3239EA5D"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStartContractWarmUpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class DebugStartContractWarmUpExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
              void debugStartContractWarmUpExample() throws IOException {
                String address = "0xfD1d63a152f7A7Ef14bd157C1c73c5bC3239EA5D";

                DebugStartContractWarmUpResponse response = w3.debugStartContractWarmUp(address).send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = "0x4Cd39B49064a31E966cA0ddF4111aCe2eD7E9502"

                sdk.debug.startContractWarmUp(address, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x4Cd39B49064a31E966cA0ddF4111aCe2eD7E9502"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_contract_warm_up(address)

            print(debug_response)
  /debug/blockchainInspection/startWarmUp:
    post:
      operationId: startWarmUp
      summary: '[Inspection-startWarmUp]'
      description: |
        The startWarmUp iterates the latest state trie to warm-up the trie cache. The iteration will be automatically stopped if 90% of the trie cache is full. The method returns an error if it fails in starting a warm-up, or null if it successfully has started it.

        **JSONRPC:** `debug_startWarmUp`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_startWarmUp
      responses:
        '200':
          description: Return null if a warm-up is started, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: null if a warm-up is started, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startWarmUp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startWarmUp",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStartWarmUpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartWarmUpExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStartWarmUpExample() throws IOException {
                    DebugStartWarmUpResponse response = w3.debugStartWarmUp().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.debug.startWarmUp({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_warm_up()

            print(debug_response)
  /debug/blockchainInspection/stopWarmUp:
    post:
      operationId: stopWarmUp
      summary: '[Inspection-stopWarmUp]'
      description: |
        The stopWarmUp stops the currently running warm-up. This method takes no parameters, and returns null or an error depending on a warm-up was stopped or not.

        **JSONRPC:** `debug_stopWarmUp`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
      responses:
        '200':
          description: null if a warm-up is stopped, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: StopWarmUpResult
                        type: string
                        description: null if a warm-up is stopped, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopWarmUp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopWarmUp",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.blockchainInspection;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStopWarmUpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopWarmUpExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    DebugStopWarmUpResponse response = w3.debugStopWarmUp().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.debug.stopWarmUp({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_warm_up()

            print(debug_response)
  /debug/blockchainInspection/storageRangeAt:
    post:
      operationId: storageRangeAt
      summary: '[Inspection-storageRangeAt]'
      description: |
        StorageRangeAt returns the storage at the given block height and transaction index.

        **JSONRPC:** `debug_storageRangeAt`
      tags:
        - debug
      parameters:
        - name: blockHash
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
          in: query
        - name: txIndex
          required: true
          schema:
            type: integer
          in: query
        - name: address
          required: true
          schema:
            $ref: '#/components/schemas/Address'
          in: query
        - name: keyStart
          required: true
          schema:
            type: string
            format: hex
          in: query
        - name: maxResult
          required: true
          schema:
            type: integer
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStorageRangeAtReq'
      responses:
        '200':
          description: StorageRangeResult
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        required:
                          - nextKey
                          - storage
                        properties:
                          nextKey:
                            type: string
                            format: hex
                          storage:
                            type: object
                        example:
                          id: 377ef808aff73a397d133b3bf160df586054c98c0e6a65c8fce9560e6a0632bc975419f461803d27f28ee270287113cc2359225814debc1bfb2f811061e14c5d
                          name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
                          kni: kni://377ef808aff73a397d133b3bf160df586054c98c0e6a65c8fce9560e6a0632bc975419f461803d27f28ee270287113cc2359225814debc1bfb2f811061e14c5d@[::]:32323?discport=0
                          ip: '::'
                          ports:
                            discovery: 0
                            listener: 32323
                          listenAddr: '[::]:32323'
                          protocols:
                            istanbul:
                              network: 1000
                              difficulty: 1
                              genesis: '0x06806bd8b1e086dfb7098a289da07037a3af58e793d205d20f61c88eeea9351d'
                              config:
                                chainId: 1000
                                istanbul:
                                  epoch: 30000
                                  policy: 0
                                  sub: 7
                                isBFT: true
                                unitPrice: 25000000000
                                deriveShaImpl: 0
                              head: '0x06806bd8b1e086dfb7098a289da07037a3af58e793d205d20f61c88eeea9351d'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/storageRangeAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_storageRangeAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21", 1, "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6", "0x12", 1]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStorageRangeAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStorageRangeAtExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStorageRangeAtExample() throws IOException {
                    String blockHash = "0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21";
                    int txIndex = 1;
                    String contractAddress = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
                    String keyStart = "0x12";
                    int maxResult = 1;

                    DebugStorageRangeAtResponse response = w3.debugStorageRangeAt(blockHash, txIndex, contractAddress, keyStart, maxResult).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const blockHash = "0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21";
                const txIndex = 1;
                const contractAddress = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
                const keyStart = "0x12";
                const maxResult = 1;

                sdk.debug.storageRangeAt(blockHash, txIndex, contractAddress, keyStart, maxResult, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21"
            txIndex = 1
            address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6"
            keyStart = "0x12"
            maxResult = 1

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.storage_range_at(blockHash, txIndex, address, keyStart, maxResult)

            print(debug_response)
  /debug/vMTracing/traceBadBlock:
    post:
      summary: '[Trace-traceBadBlock]'
      tags:
        - debug
      operationId: traceBadBlock
      description: |
        The traceBadBlock method will return a full stack trace of all invoked opcodes of all transactions that were included in this block.

        **NOTE:** the parent of this block must be present or it will fail.

        **JSONRPC:** `debug_traceBadBlock`
      parameters:
        - name: hash
          in: query
          description: Hash of a block.
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBadBlockReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBadBlockResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBadBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBadBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBadBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBadBlockExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceBadBlockExample() throws IOException {
                    String blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

                    DebugTraceBadBlockResponse response = w3.debugTraceBadBlock(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

                sdk.debug.traceBadBlock(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_bad_block(blockHash)

            print(debug_response)
  /debug/vMTracing/traceBlock:
    post:
      summary: '[Trace-traceBlock]'
      tags:
        - debug
      operationId: traceBlock
      description: |
        The traceBlock method will return a full stack trace of all invoked opcodes of all transactions that were included in this block.

        **NOTE:** the parent of this block must be present or it will fail.

        **JSONRPC:** `debug_traceBlock`
      parameters:
        - name: blockRlp
          in: query
          description: The RLP-encoded block.
          required: true
          schema:
            type: string
        - name: options
          in: query
          description: See tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceBlockExample() throws IOException {
                    String blockRlp = "0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cb9010000000800040000000000000000040000000000000000000000000000008000000000000000000000000000000000000010000000100208000000000000000040900000000000000000000000002000000000000001000000000000000002000010000000020000000000000000000800400000000400000002000000180000000000000000000000000000000000000000000480000400000010000000000000000000001000000000000000000000000000000000000000000000000000000000000000400000000000020000000008000010000000000000000000002020000000000081000000000000080000000008000000000000000000000002000020018407346fb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4";

                    DebugTraceBlockResponse response = w3.debugTraceBlock(blockRlp, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const blockRlp = "0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4";

                sdk.debug.traceBlock(blockRlp, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockRlp = "0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block(blockRlp)

            print(debug_response)
  /debug/vMTracing/traceBlockByHash:
    post:
      summary: '[Trace-traceBlockByHash]'
      tags:
        - debug
      operationId: traceBlockByHash
      description: |
        Similar to debug_traceBlock, traceBlockByHash accepts a block hash and will replay the block that is already present in the database.

        **JSONRPC:** `debug_traceBlockByHash`
      parameters:
        - name: hash
          in: query
          description: Hash of a block.
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockByHashReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockByHashExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceBlockByHashExample() throws IOException {
                    String blockHash = "0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19";

                    DebugTraceBlockByHashResponse response = w3.debugTraceBlockByHash(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const blockHash = "0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19";

                sdk.debug.traceBlockByHash(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_by_hash(blockHash)

            print(debug_response)
  /debug/vMTracing/traceBlockByNumber:
    post:
      summary: '[Trace-traceBlockByNumber]'
      tags:
        - debug
      operationId: traceBlockByNumber
      description: |
        Similar to debug_traceBlock, traceBlockByNumber accepts a block number and will replay the block that is already present in the database.

        **JSONRPC:** `debug_traceBlockByNumber`
      parameters:
        - name: number
          in: query
          description: The block number.
          required: true
          schema:
            type: string
            format: hex
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockByNumberReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [1449]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceBlockByNumberExample() throws IOException {
                    int blockNum = 21;

                    DebugTraceBlockByNumberResponse response = w3.debugTraceBlockByNumber(blockNum, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const block = 2459;

                sdk.debug.traceBlockByNumber(block, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            number = 21

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_by_number(number)

            print(debug_response)
  /debug/vMTracing/traceBlockByNumberRange:
    post:
      summary: '[Trace-traceBlockByNumberRange]'
      tags:
        - debug
      operationId: traceBlockByNumberRange
      description: |
        Returns the structured logs created during the execution of EVM between two blocks (including start) as a JSON object. That is, the result of tracing for a total of end-start+1 blocks is returned.

        **NOTE:** Don't trace too many blocks at the same time as it can overuse machine resources.

        **JSONRPC:** `debug_traceBlockByNumberRange`
      parameters:
        - name: startBlock
          in: query
          description: Tracing start block number.
          required: true
          schema:
            type: number
        - name: endBlock
          in: query
          description: Tracing end block number.
          required: true
          schema:
            type: number
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockByNumberRangeReq'
      responses:
        '200':
          description: Value contains the structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockByNumberRangeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockByNumberRange' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockByNumberRange",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [21, 22]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockByNumberRangeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockByNumberRangeExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceBlockByNumberRangeExample() throws IOException {
                    int startBlockNum = 21;
                    int endBlockNum = 30;

                    DebugTraceBlockByNumberRangeResponse response = w3.debugTraceBlockByNumberRange(startBlockNum, endBlockNum, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const startBlock = 21;
                const endBlock = 30;

                sdk.debug.traceBlockByNumberRange(startBlock, endBlock, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            startBlock = 21
            endBlock = 22

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_by_number_range(startBlock, endBlock)

            print(debug_response)
  /debug/vMTracing/traceBlockFromFile:
    post:
      summary: '[Trace-traceBlockFromFile]'
      tags:
        - debug
      operationId: traceBlockFromFile
      description: |
        Similar to debug_traceBlock, traceBlockFromFile accepts a file containing the RLP of the block.

        **NOTE:** the file must include the associated hexadecimal string without 0x.

        **JSONRPC:** `debug_traceBlockFromFile`
      parameters:
        - name: fileName
          in: query
          description: The file name which contains the RLP of the block.
          required: true
          schema:
            type: string
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockFromFileReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockFromFileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockFromFile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockFromFile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["/home/sotatek/block.rlp"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockFromFileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockFromFileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    String fileName = "/home/sotatek/block.rlp";

                    DebugTraceBlockFromFileResponse response = w3.debugTraceBlockFromFile(fileName, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const fileName = "/home/sotatek/block.rlp";

                sdk.debug.traceBlockFromFile(fileName, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "/home/sotatek/block.rlp";

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_from_file(fileName)

            print(debug_response)
  /debug/vMTracing/traceChain:
    post:
      summary: '[Trace-traceChain]'
      tags:
        - debug
      operationId: traceChain
      description: |
        Returns the structured logs created during the execution of EVM between two blocks (excluding start) as a JSON object. This endpoint must be invoked via debug_subscribe as follows:

        **NOTE:** Don't trace too many blocks at the same time as it can overuse machine resources.

        **JSONRPC:** `debug_traceChain`
      parameters:
        - name: startBlockNumber
          in: query
          description: Tracing start block number.
          required: true
          schema:
            type: integer
        - name: number
          in: query
          description: Tracing end block number.
          required: true
          schema:
            type: integer
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceChainReq'
      responses:
        '200':
          description: Returns the structured logs created during the execution of EVM between two blocks as a JSON object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: "curl -X 'POST' \\\n\_ 'https://api.baobab.klaytn.net:8651/debug/traceChain' \\\n\_ -H 'accept: application/json' \\\n\_ -H 'Content-Type: application/json' \\\n\_ -d '{\n\_ \"method\": \"debug_traceChain\",\n\_ \"id\": 1,\n\_ \"jsonrpc\": \"2.0\",\n\_ \"params\": [21, 30, {}]\n}'\n\n"
  /debug/vMTracing/traceTransaction:
    post:
      summary: '[Trace-traceTransaction]'
      tags:
        - debug
      operationId: traceTransaction
      description: |
        The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.

        **JSONRPC:** `debug_traceTransaction`
      parameters:
        - name: txHash
          in: query
          description: The hash of the transaction.
          required: true
          schema:
            type: string
            format: hex
        - name: options
          in: query
          description: Tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/TracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceTransactionReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x344fc43b5b87984d5a50fe2c54e121f94945ba9ff9da20f9de0f1b4914f47055"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceTransactionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceTransactionExample() throws IOException {
                    String txHash = "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58";

                    DebugTraceTransactionResponse response = w3.debugTraceTransaction(txHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const txHash = "0x344fc43b5b87984d5a50fe2c54e121f94945ba9ff9da20f9de0f1b4914f47055";

                sdk.debug.traceTransaction(txHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            txHash = "0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_transaction(txHash)

            print(debug_response)
  /debug/vMTracing/traceCall:
    post:
      summary: '[Trace-traceCall]'
      tags:
        - debug
      operationId: traceCall
      description: |
        The debug_traceCall allows tracing on a specific block if callArgs is provided.

        **JSONRPC:** `debug_traceCall`
      parameters:
        - name: tracerCallObject
          in: query
          description: The transaction call object.
          required: true
          schema:
            $ref: '#/components/schemas/TracerCallObject'
        - name: blockNumber
          in: query
          description: Blocknumber or hash or tag of a block.
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrHashOrTag'
        - name: traceObject
          in: query
          description: Tracing options.
          required: true
          schema:
            $ref: '#/components/schemas/TracerObject'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceCallReq'
      responses:
        '200':
          description: The detail tracing infomation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceCall' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceCall",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"to":"0x46eda75e7ca73cb1c2f83c3927211655420dbc44","data":"0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7"}, "latest", {"tracer":"revertTracer"}]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBadBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBadBlockExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugTraceBadBlockExample() throws IOException {
                    String blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

                    DebugTraceBadBlockResponse response = w3.debugTraceCall(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const tracerCallObject = {"to":"0x46eda75e7ca73cb1c2f83c3927211655420dbc44","data":"0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7"};
                const blockNumber = "latest";
                const options = {"tracer":"revertTracer"};
                sdk.debug.traceCall(tracerCallObject, blockNumber, options, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            tracerCallObject = {"to":"0x46eda75e7ca73cb1c2f83c3927211655420dbc44","data":"0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7"};
            blockNumber = "latest"
            options = {"tracer":"revertTracer"}
            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_call(tracerCallObject, blockNumber, options)

            print(debug_response)
  /debug/vMStandardTracing/standardTraceBadBlockToFile:
    post:
      summary: '[StandardTrace-standardTraceBadBlockToFile]'
      tags:
        - debug
      operationId: standardTraceBadBlockToFile
      description: |
        Similar to debug_traceBadBlock, standardTraceBadBlockToFile accepts a bad block hash and will replay the bad block. It returns a list of file names containing tracing result. Note that the files will be stored in the machine that serves this API.

        **JSONRPC:** `debug_standardTraceBadBlockToFile`
      parameters:
        - name: hash
          in: query
          description: Hash of a block.
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
        - name: options
          in: query
          description: See standard tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/StandardTracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStandardTraceBadBlockToFileReq'
      responses:
        '200':
          description: Returns a list of file names containing tracing result
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStandardTraceBadBlockToFileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/standardTraceBadBlockToFile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_standardTraceBadBlockToFile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x2d05db16efa693a14a26feb6c1bafa4b2ac4ecabdaf3ed5f965bb38bc91eba62"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMStandardTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStandardTraceBadBlockToFileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStandardTraceBadBlockToFileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStandardTraceBlockToFileExample() throws IOException {
                    String blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

                    DebugStandardTraceBadBlockToFileResponse response = w3.debugStandardTraceBadBlockToFile(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"
                
                sdk.debug.standardTraceBadBlockToFile(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.standard_trace_bad_block_to_file(blockHash)

            print(debug_response)
  /debug/vMStandardTracing/standardTraceBlockToFile:
    post:
      summary: '[StandardTrace-standardTraceBlockToFile]'
      tags:
        - debug
      operationId: standardTraceBlockToFile
      description: |
        Similar to debug_traceBlock, standardTraceBlockToFile accepts a block hash and will replay the block that is already present in the database. It returns a list of file names containing tracing result. Note that the files will be stored in the machine that serves this API.

        **JSONRPC:** `debug_standardTraceBlockToFile`
      parameters:
        - name: hash
          in: query
          description: Hash of a block.
          required: true
          schema:
            $ref: '#/components/schemas/BlockHash'
        - name: options
          in: query
          description: See standard tracing options.
          required: false
          schema:
            $ref: '#/components/schemas/StandardTracingOptions'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStandardTraceBlockToFileReq'
      responses:
        '200':
          description: A list of file names.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStandardTraceBlockToFileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/standardTraceBlockToFile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_standardTraceBlockToFile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xf1b4df5d4457d4771740887eeb46de3fc26ae4cddf93d69b1b237c2366ff12eb"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.vMStandardTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStandardTraceBlockToFileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStandardTraceBlockToFileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStandardTraceBlockToFileExample() throws IOException {
                    String blockHash = "0xf1b4df5d4457d4771740887eeb46de3fc26ae4cddf93d69b1b237c2366ff12eb";

                    DebugStandardTraceBlockToFileResponse response = w3.debugStandardTraceBlockToFile(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockHash = "0xdabbc6a0d2619c56db4645c4e85799af9927bdf3bd13d0c77e49db413e3db9f3"
                
                sdk.debug.standardTraceBlockToFile(blockHash, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.standard_trace_block_to_file(blockHash)

            print(debug_response)
  /debug/runtimeTracing/goTrace:
    post:
      summary: '[RuntimeTrace-goTrace]'
      tags:
        - debug
      operationId: goTrace
      description: |
        Turns on Go runtime tracing for the given duration and writes trace data to disk.

        **JSONRPC:** `debug_goTrace`
      parameters:
        - name: file
          in: query
          description: The filename for the trace output.
          required: true
          schema:
            type: string
        - name: seconds
          in: query
          description: The tracing duration in seconds.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugGoTraceReq'
      responses:
        '200':
          description: Turns on Go runtime tracing for the given duration and writes trace data to disk.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugGoTraceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/goTrace' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_goTrace",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["go.trace",5]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.runtimeTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugGoTraceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGoTraceExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugGoTraceExample() throws IOException {
                    String file = "go.trace";
                    int seconds = 5;

                    DebugGoTraceResponse response = w3.debugGoTrace(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "go.trace";
                const seconds = 5;

                sdk.debug.goTrace(file, seconds, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "go.trace"
            seconds = 5

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.go_trace(fileName, seconds)

            print(debug_response)
  /debug/runtimeTracing/startGoTrace:
    post:
      summary: '[RuntimeTrace-startGoTrace]'
      tags:
        - debug
      operationId: startGoTrace
      description: |
        Starts writing a Go runtime trace to the given file.

        **JSONRPC:** `debug_startGoTrace`
      parameters:
        - name: file
          in: query
          description: The filename for the tracing output.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStartGoTraceReq'
      responses:
        '200':
          description: Starts writing a Go runtime trace to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStartGoTraceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startGoTrace' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startGoTrace",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["go.trace"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.runtimeTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStartGoTraceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartGoTraceExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStartGoTraceExample() throws IOException {
                    String file = "go.trace";

                    DebugStartGoTraceResponse response = w3.debugStartGoTrace(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "go.trace";

                sdk.debug.startGoTrace(file, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "go.trace"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_go_trace(fileName)

            print(debug_response)
  /debug/runtimeTracing/stopGoTrace:
    post:
      summary: '[RuntimeTrace-stopGoTrace]'
      tags:
        - debug
      operationId: stopGoTrace
      description: |
        Stops writing the Go runtime trace.

        **JSONRPC:** `debug_stopGoTrace`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStopGoTraceReq'
      responses:
        '200':
          description: Stops writing the Go runtime trace.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStopGoTraceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopGoTrace' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopGoTrace",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.runtimeTracing;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStopGoTraceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopGoTraceExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStopGoTraceExample() throws IOException {
                    DebugStopGoTraceResponse response = w3.debugStopGoTrace().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.debug.stopGoTrace({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_go_trace()

            print(debug_response)
  /debug/profiling/blockProfile:
    post:
      summary: '[Profiling-blockProfile]'
      tags:
        - debug
      operationId: blockProfile
      description: |
        Turns on block profiling for the given duration and writes profile data to disk. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile.

        **JSONRPC:** `debug_blockProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling result.
          required: true
          schema:
            type: string
        - name: seconds
          in: query
          description: The profiling duration in seconds.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugBlockProfileReq'
      responses:
        '200':
          description: Turns on block profiling for the given duration and writes profile data to disk.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugBlockProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/blockProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_blockProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["block.profile", 10]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugBlockProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugBlockProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugBlockProfileExample() throws IOException {
                    String file = "block.profile";
                    int seconds = 4;

                    DebugBlockProfileResponse response = w3.debugBlockProfile(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "block.profile";
                const seconds = 10;

                sdk.debug.blockProfile(file, seconds, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "block.profile"
            seconds = 10

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.block_profile(fileName, seconds)

            print(json.loads(debug_response.response.data))
  /debug/profiling/cpuProfile:
    post:
      summary: '[Profiling-cpuProfile]'
      tags:
        - debug
      operationId: cpuProfile
      description: |
        Turns on CPU profiling for the given duration and writes profile data to disk.

        **JSONRPC:** `debug_cpuProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling result.
          required: true
          schema:
            type: string
        - name: seconds
          in: query
          description: The profiling duration in seconds.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugCpuProfileReq'
      responses:
        '200':
          description: Turns on CPU profiling for the given duration and writes profile data to disk.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugCpuProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/cpuProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_cpuProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["block.profile", 10]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugCpuProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugCPUProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugCpuProfileExample() throws IOException {
                    String file = "block.profile";
                    int seconds = 4;

                    DebugCpuProfileResponse response = w3.debugCpuProfile(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "block.profile";
                const seconds = 10;

                sdk.debug.cpuProfile(file, seconds, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "block.profile"
            seconds = 10

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.cpu_profile(fileName, seconds)

            print(json.loads(debug_response.response.data))
  /debug/profiling/isPProfRunning:
    post:
      summary: '[Profiling-isPProfRunning]'
      tags:
        - debug
      operationId: isPProfRunning
      description: |
        Returns true if the pprof HTTP server is running and false otherwise.

        **JSONRPC:** `debug_isPProfRunning`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/IsPProfRunningReq'
      responses:
        '200':
          description: true if the pprof HTTP server is running and false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/IsPProfRunningResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://public-en-baobab.klaytn.net/debug/isPProfRunning' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_isPProfRunning",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugIsPProfRunningResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugIsPProfRunningExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugIsPProfRunningExample() throws IOException {
                    DebugIsPProfRunningResponse response = w3.debugIsPProfRunning().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.debug.isPProfRunning({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.is_p_prof_running()

            print(json.loads(debug_response.response.data))
  /debug/profiling/mutexProfile:
    post:
      summary: '[Profiling-mutexProfile]'
      tags:
        - debug
      operationId: mutexProfile
      description: |
        Turns on mutex profiling for nsec (nanosecond) and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually.

        **JSONRPC:** `debug_mutexProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling result.
          required: true
          schema:
            type: string
        - name: seconds
          in: query
          description: The profiling duration in seconds.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugMutexProfileReq'
      responses:
        '200':
          description: Turns on mutex profiling for nsec (nanosecond) and writes profile data to file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugMutexProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/mutexProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_mutexProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["mutex.profile", 10]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugMutexProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugMutexProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugMutexProfileExample() throws IOException {
                    String file = "mutex.profile";
                    int seconds = 5;

                    DebugMutexProfileResponse response = w3.debugMutexProfile(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "mutex.profile";
                const seconds = 10;

                sdk.debug.mutexProfile(file, seconds, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "mutex.profile"
            seconds = 10

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.mutex_profile(fileName, seconds)

            print(json.loads(debug_response.response.data))
  /debug/profiling/setBlockProfileRate:
    post:
      summary: '[Profiling-setBlockProfileRate]'
      tags:
        - debug
      operationId: setBlockProfileRate
      description: |
        Sets the rate (in samples/sec) of goroutine block profile data collection. A non-zero rate enables block profiling, setting it to zero stops the profile. Collected profile data can be written using debug_writeBlockProfile.

        **JSONRPC:** `debug_setBlockProfileRate`
      parameters:
        - name: rate
          in: query
          description: The profiling rate in samples/sec.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugSetBlockProfileRateReq'
      responses:
        '200':
          description: Sets the rate (in samples/sec) of goroutine block profile data collection.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugSetBlockProfileRateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setBlockProfileRate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setBlockProfileRate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [3]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugSetBlockProfileRateResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetBlockProfileRateExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugSetBlockProfileRateExample() throws IOException {
                    int rate = 3;

                    DebugSetBlockProfileRateResponse response = w3.debugSetBlockProfileRate(rate).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const rate = 3;

                sdk.debug.setBlockProfileRate(rate, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            rate = 4

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_block_profile_rate(rate)

            print(json.loads(debug_response.response.data))
  /debug/profiling/setMutexProfileFraction:
    post:
      operationId: setMutexProfileFraction
      summary: '[Profiling-setMutexProfileFraction]'
      description: |
        SetMutexProfileFraction sets the rate of mutex profiling.

        **JSONRPC:** `debug_setMutexProfileFraction`
      tags:
        - debug
      parameters:
        - name: rate
          required: true
          schema:
            type: integer
          description: rate
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/setMutexProfileFractionReq'
      responses:
        '200':
          description: Set mutex profile fraction
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: SetMutexProfileFractionResult
                        type: string
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setMutexProfileFraction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setMutexProfileFraction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [2]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.others;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugSetMutexProfileFractionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetMutexProfileFractionExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugSetMutexProfileFractionExample() throws IOException {
                    int rate = 2;

                    DebugSetMutexProfileFractionResponse response = w3.debugSetMutexProfileFraction(rate).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const rate = 2;

                sdk.debug.setMutexProfileFraction(rate, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            rate = 2

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_mutex_profile_fraction(rate)

            print(debug_response)
  /debug/profiling/startCPUProfile:
    post:
      summary: '[Profiling-startCPUProfile]'
      tags:
        - debug
      operationId: startCPUProfile
      description: |
        Turns on CPU profiling indefinitely, writing to the given file.

        **JSONRPC:** `debug_startCPUProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling output.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStartCPUProfileReq'
      responses:
        '200':
          description: Turns on CPU profiling indefinitely, writing to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStartCPUProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startCPUProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startCPUProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["cpu.profile"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStartCPUProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartCPUProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStartCPUProfileExample() throws IOException {
                    String file = "cpu.profile";

                    DebugStartCPUProfileResponse response = w3.debugStartCPUProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "cpu.profile";

                sdk.debug.startCPUProfile(file, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "cpu.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_cpu_profile(fileName)

            print(json.loads(debug_response.response.data))
  /debug/profiling/startPProf:
    post:
      operationId: startPProf
      summary: '[Profiling-startPProf]'
      description: |
        Starts the pprof HTTP server. The running pprof server can be accessed by (when the default configuration, i.e., localhost:6060, is used):
         * http://localhost:6060/debug/pprof (for the pprof results)
         * http://localhost:6060/memsize/ (for the memory size reports)
         * http://localhost:6060/debug/vars (for the metrics)


        **JSONRPC:** `debug_startPProf`
      tags:
        - debug
      parameters:
        - name: address
          schema:
            type: string
          description: pprof HTTP server listening interface (default "127.0.0.1").
          in: query
        - name: port
          schema:
            type: integer
          description: pprof HTTP server listening port (default 6060).
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartPProfReq'
      responses:
        '200':
          description: Return value null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartPProfResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startPProf' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startPProf",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "localhost",
                6060
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStartPProfResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartPProfExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStartPProfExample() throws IOException {
                    String address = "localhost";
                    int port = 6000;
                    DebugStartPProfResponse response = w3.debugStartPProf(address, port).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = "localhost";
                const port = 6060;
                
                sdk.debug.startPProf({address, port}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "localhost"
            port = 6060

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_p_prof(address, port)

            print(json.loads(debug_response.response.data))
  /debug/profiling/stopCPUProfile:
    post:
      summary: '[Profiling-stopCPUProfile]'
      tags:
        - debug
      operationId: stopCPUProfile
      description: |
        Turns off CPU profiling.

        **JSONRPC:** `debug_stopCPUProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStopCPUProfileReq'
      responses:
        '200':
          description: Turns off CPU profiling.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStopCPUProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopCPUProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopCPUProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStopCPUProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopCPUProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStopCPUProfileExample() throws IOException {
                    DebugStopCPUProfileResponse response = w3.debugStopCPUProfile().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                sdk.debug.stopCPUProfile({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_cpu_profile()

            print(json.loads(debug_response.response.data))
  /debug/profiling/stopPProf:
    post:
      operationId: stopPProf
      summary: '[Profiling-stopPProf]'
      description: |
        Stops the pprof HTTP server.

        **JSONRPC:** `debug_stopPProf`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopPProfReq'
      responses:
        '200':
          description: Return value null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopPProfResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopPProf' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopPProf",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugStopPProfResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopPProfExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugStopPProfExample() throws IOException {
                    DebugStopPProfResponse response = w3.debugStopPProf().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                sdk.debug.stopPProf({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_p_prof()

            print(json.loads(debug_response.response.data))
  /debug/profiling/writeBlockProfile:
    post:
      summary: '[Profiling-writeBlockProfile]'
      tags:
        - debug
      operationId: writeBlockProfile
      description: |
        Writes a goroutine blocking profile to the given file.

        **JSONRPC:** `debug_writeBlockProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling output.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugWriteBlockProfileReq'
      responses:
        '200':
          description: Writes a goroutine blocking profile to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugWriteBlockProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/writeBlockProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_writeBlockProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["block.profile"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugWriteBlockProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugWriteBlockProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugWriteBlockProfileExample() throws IOException {
                    String file = "block.profile";

                    DebugWriteBlockProfileResponse response = w3.debugWriteBlockProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "block.profile";

                sdk.debug.writeBlockProfile(file, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "block.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.write_block_profile(fileName)

            print(json.loads(debug_response.response.data))
  /debug/profiling/writeMemProfile:
    post:
      summary: '[Profiling-writeMemProfile]'
      tags:
        - debug
      operationId: writeMemProfile
      description: |
        Writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line using the --memprofilerate flag.

        **JSONRPC:** `debug_writeMemProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling output.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugWriteMemProfileReq'
      responses:
        '200':
          description: Writes an allocation profile to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugWriteMemProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/writeMemProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_writeMemProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["mem.profile"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugWriteMemProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugWriteMemProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugWriteMemProfileExample() throws IOException {
                    String file = "mem.profile";

                    DebugWriteMemProfileResponse response = w3.debugWriteMemProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "mem.profile";

                sdk.debug.writeMemProfile(file, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "mem.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.write_mem_profile(fileName)

            print(json.loads(debug_response.response.data))
  /debug/profiling/writeMutexProfile:
    post:
      summary: '[Profiling-writeMutexProfile]'
      tags:
        - debug
      operationId: writeMutexProfile
      description: |
        Writes a goroutine blocking profile to the given file.

        **JSONRPC:** `debug_writeMutexProfile`
      parameters:
        - name: file
          in: query
          description: The filename for the profiling output.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugWriteMutexProfileReq'
      responses:
        '200':
          description: Writes a goroutine blocking profile to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugWriteMutexProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/writeMutexProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_writeMutexProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["mutex.profile"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.debug.profiling;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.DebugWriteMutexProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugWriteMutexProfileExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void debugWriteMutexProfileExample() throws IOException {
                    String file = "mutex.profile";

                    DebugWriteMutexProfileResponse response = w3.debugWriteMutexProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const file = "mutex.profile";

                sdk.debug.writeMutexProfile(file, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "mutex.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.write_mutex_profile(fileName)

            print(json.loads(debug_response.response.data))
  /governance/chainConfig:
    post:
      operationId: chainConfig
      summary: '[chainConfig]'
      description: |
        The chainConfig property provides the latest chain configuration. This is equivalent to chainConfigAt() with an empty parameter.

        **NOTE:** In versions earlier than Klaytn v1.10.0, this API returned the initial chain configuration. However, due to its confusing name, it is updated since Klaytn v1.10.0. To query the initial chain configuration, use chainConfigAt(0) instead.

        **JSONRPC:** `governance_chainConfig`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_chainConfig
      responses:
        '200':
          description: Current chain configuration
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Current chain configuration
                        example:
                          chainId: 1001
                          deriveShaImpl: 2
                          governance:
                            govParamContract: '0x0000000000000000000000000000000000000000'
                            governanceMode: ballot
                            governingNode: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
                            kip71:
                              basefeedenominator: 20
                              gastarget: 30000000
                              lowerboundbasefee: 25000000000
                              maxblockgasusedforbasefee: 60000000
                              upperboundbasefee: 750000000000
                            reward:
                              deferredTxFee: true
                              kip82ratio: 20/80
                              minimumStake: 5000000
                              mintingAmount: 6400000000000000000
                              proposerUpdateInterval: 3600
                              ratio: 50/40/10
                              stakingUpdateInterval: 20
                              useGiniCoeff: false
                          istanbul:
                            epoch: 20
                            policy: 2
                            sub: 1
                          istanbulCompatibleBlock: 0
                          koreCompatibleBlock: 0
                          londonCompatibleBlock: 0
                          magmaCompatibleBlock: 0
                          unitPrice: 25000000000
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/chainConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_chainConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceGetChainConfigResponse;

            import java.io.IOException;

            public class GovernanceChainConfigExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceChainConfigExample() throws IOException {
                    GovernanceGetChainConfigResponse response = w3.governanceGetChainConfig().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.chainConfig({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.chain_config()

            print(governance_response)
  /governance/getStakingInfo:
    post:
      operationId: getStakingInfo
      summary: '[getStakingInfo]'
      description: |
        The getStakingInfo returns staking information at a specific block. The result includes the following information.
        - BlockNum: The block number at which the staking information is given.
        - CouncilNodeAddrs: The addresses of the consensus node.
        - CouncilRewardAddrs: The addresses to which the block reward of the associated nodes is sent.
        - CouncilStakingAddrs: The contract addresses in which the associated nodes deploy for staking.
        - CouncilStakingAmounts: The amount of KLAY which the associated nodes stake.
        - Gini: Gini coefficient.
        - KIRAddr: The contract address of KIR.
        - PoCAddr: The contract address of KGF. PoC is the previous name of KGF.
        - UseGini: The boolean value whether or not the Gini coefficient is used.
        Note that the order of all addresses and the staking amounts are matched.

        **JSONRPC:** `governance_getStakingInfo`
      tags:
        - governance
      parameters:
        - name: blockNumber
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
          description: Integer of a block number, or the string "earliest", "latest" or "pending", as in the default block parameter.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: governance_getStakingInfo
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/BlockNumberOrTag'
                      description: Integer of a block number, or the string "earliest", "latest" or "pending", as in the default block parameter.
                      example:
                        - latest
      responses:
        '200':
          description: Staking information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Staking information
                        example:
                          BlockNum: 57801600
                          CouncilNodeAddrs:
                            - '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
                            - '0x571e53df607be97431a5bbefca1dffe5aef56f4d'
                            - '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'
                            - '0x5cb1a7dccbd0dc446e3640898ede8820368554c8'
                            - '0x776817c0ef3d06d794cf01ae9afa33d7397b9b40'
                            - '0xc180ca565b34b5b63877674f5fe647e7da079022'
                            - '0x03497f51c31fe8b402df0bde90fd5a85f87aa943'
                          CouncilRewardAddrs:
                            - '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d'
                            - '0x6559a7b6248b342bc11fbcdf9343212bbc347edc'
                            - '0x82829a60c6eac4e3e9d6ed00891c69e88537fd4d'
                            - '0xa86fd667c6a340c53cc5d796ba84dbe1f29cb2f7'
                            - '0x6e22cbe2b8bbd1df9f1d3c8ebae6d7ff5414a734'
                            - '0x24e593fb29731e54905025c230727dc28d229f77'
                            - '0x2b2a7a1d29a203f60e0a964fc64231265a49cd97'
                          CouncilStakingAddrs:
                            - '0x12fa1ab4c3e17c1c08c1b5a945c864c8e8bf707e'
                            - '0xfd56604f1a20268ff7a0eab2ab48e25ee1e0f653'
                            - '0x1e0f6aaa9baa6081dc4910a854eebf8854c262ab'
                            - '0x5e6988415ebe0f6b088f5a676003ba60f572875a'
                            - '0xbb44998c2af35b8faee694cffe216558056d747e'
                            - '0x68cba498b7175cde9de08fc2e85ad3e9c8caefa8'
                            - '0x98efb31eeccafe35d53a6926e2a54c0858d9eebc'
                          CouncilStakingAmounts:
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                          Gini: 0
                          KIRAddr: '0x716f89d9bc333286c79db4ebb05516897c8d208a'
                          PoCAddr: '0x2bcf9d3e4a846015e7e3152a614c684de16f37c6'
                          UseGini: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/getStakingInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_getStakingInfo",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["latest"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.GovernanceGetStakingInfoResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceGetStakingInfoExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceGetStakingInfoExample() throws IOException {
                    String blockNum = "latest";

            //        GovernanceGetStakingInfoResponse response = w3.governanceGetStakingInfo(blockNum).send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = "latest";

                sdk.governance.getStakingInfo(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.get_staking_info(blockNumber)

            print(governance_response)
  /governance/idxCache:
    post:
      operationId: idxCache
      summary: '[idxCache]'
      description: |
        The idxCache property returns an array of current idxCache in the memory cache. idxCache contains the block numbers where governance change happened. The cache can have up to 1000 block numbers in memory by default.

        **JSONRPC:** `governance_idxCache`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_idxCache
      responses:
        '200':
          description: Block numbers where governance change happened
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: Block numbers where governance change happened
                        items:
                          type: integer
                          format: uint64
                        example:
                          - 0
                          - 30
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/idxCache' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_idxCache",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;


            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceIdxCacheResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceIdxCacheExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceIdxCacheExample() throws IOException {
                    GovernanceIdxCacheResponse response = w3.governanceIdxCache().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.idxCache({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.idx_cache()

            print(governance_response)
  /governance/idxCacheFromDb:
    post:
      operationId: idxCacheFromDb
      summary: '[idxCacheFromDb]'
      description: |
        The idxCacheFromDb returns an array that contains all block numbers on which a governance change ever happened. The result of idxCacheFromDb is the same or longer than that of idxCache

        **JSONRPC:** `governance_idxCacheFromDb`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_idxCacheFromDb
      responses:
        '200':
          description: Every block numbers where governance change happened
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: Every block numbers where governance change happened
                        items:
                          type: integer
                          format: uint64
                        example:
                          - 0
                          - 30
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/idxCacheFromDb' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_idxCacheFromDb",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceIdxCacheFromDbResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceIdxCacheFromDbExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceIdxCacheFromDbExample() throws IOException {
                    GovernanceIdxCacheFromDbResponse response = w3.governanceIdxCacheFromDb().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.idxCacheFromDb({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.idx_cache_from_db()

            print(governance_response)
  /governance/itemCacheFromDb:
    post:
      operationId: itemCacheFromDb
      summary: '[itemCacheFromDb]'
      description: |
        The itemCacheFromDb returns the governance information stored in the given block. If no changes were stored in the given block, the function returns null.

        **JSONRPC:** `governance_itemCacheFromDb`
      tags:
        - governance
      parameters:
        - name: blockNumber
          required: true
          schema:
            type: integer
            format: uint64
          description: A block number to query the governance change made in the block.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_itemCacheFromDb
                    params:
                      type: array
                      items:
                        type: integer
                        format: uint64
                      description: A block number to query the governance change made in the block.
                      example:
                        - 0
      responses:
        '200':
          description: Stored governance information at a given block
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Stored governance information at a given block
                        example:
                          governance.governancemode: single
                          governance.governingnode: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
                          governance.unitprice: 25000000000
                          istanbul.committeesize: 1
                          istanbul.epoch: 30
                          istanbul.policy: 2
                          reward.deferredtxfee: true
                          reward.minimumstake: '5000000'
                          reward.mintingamount: '6400000000000000000'
                          reward.proposerupdateinterval: 3600
                          reward.ratio: 50/40/10
                          reward.stakingupdateinterval: 20
                          reward.useginicoeff: false
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/itemCacheFromDb' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_itemCacheFromDb",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [0]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceItemCacheFromDbResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceItemCacheFromDbExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceItemCacheFromDbExample() throws IOException {
                    int blockNum = 0;

                    GovernanceItemCacheFromDbResponse response = w3.governanceItemCacheFromDb(blockNum).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 0;

                sdk.governance.itemCacheFromDb(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = 0

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.item_cache_from_db(blockNumber)

            print(governance_response)
  /governance/itemsAt:
    post:
      operationId: itemsAt
      summary: '[itemsAt]'
      description: |
        The itemsAt returns governance items at specific block.

        **WARNING:** governance_itemsAt API will be deprecated since Klaytn v1.11 (see klaytn#1783). Use governance_getParams instead.

        **NOTE:** In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **NOTE:** The block number can be larger than the latest block number, in which case the API returns the tentative value based on the current chain state. The future governance parameters are subject to change via additional governance votes or GovParam contract state changes.

        **JSONRPC:** `governance_itemsAt`
      tags:
        - governance
      parameters:
        - name: blockNumber
          required: true
          schema:
            $ref: '#/components/schemas/BlockNumberOrTag'
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: governance_itemsAt
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/BlockNumberOrTag'
                      example:
                        - 0
      responses:
        '200':
          description: governance items
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: governance items
                        example:
                          governance.governancemode: single
                          governance.governingnode: '0x7bf29f69b3a120dae17bca6cf344cf23f2daf208'
                          governance.unitprice: 25000000000
                          istanbul.committeesize: 13
                          istanbul.epoch: 30
                          istanbul.policy: 2
                          kip71.basefeedenominator: 20
                          kip71.gastarget: 30000000
                          kip71.lowerboundbasefee: 25000000000
                          kip71.maxblockgasusedforbasefee: 60000000
                          kip71.upperboundbasefee: 750000000000
                          reward.deferredtxfee: true
                          reward.minimumstake: '5000000'
                          reward.mintingamount: '9600000000000000000'
                          reward.proposerupdateinterval: 30
                          reward.ratio: 34/54/12
                          reward.stakingupdateinterval: 60
                          reward.useginicoeff: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/itemsAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_itemsAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [89]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.GovernanceItemsAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceItemsAtExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceItemsAtExample() throws IOException {
            //        int blockTag = 0;
            //
            //        GovernanceItemsAtResponse response = w3.governanceItemsAt(blockTag).send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockNumber = 89;

                sdk.governance.itemsAt(blockNumber, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = 0

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.items_at(blockTag)

            print(governance_response)
  /governance/myVotes:
    post:
      operationId: myVotes
      summary: '[myVotes]'
      description: |
        The myVotes property provides my vote information in the epoch. Each vote is stored in a block when the user's node generates a new block. After current epoch ends, this information is cleared.

        **JSONRPC:** `governance_myVotes`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_myVotes
      responses:
        '200':
          description: Node's Voting status in the epoch
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          type: object
                          title: MyVoteList
                          required:
                            - BlockNum
                            - Casted
                            - Key
                            - Value
                          properties:
                            BlockNum:
                              type: number
                              description: The block number that this vote is stored
                            Casted:
                              type: boolean
                              description: If this vote is stored in a block or not
                            Key:
                              type: string
                              description: The content of the vote
                            Value:
                              type: string
                              description: The content of the vote
                        description: Node's Voting status in the epoch
                        example:
                          - BlockNum: 403
                            Casted: true
                            Key: governance.governancemode
                            Value: ballot
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/myVotes' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_myVotes",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceMyVotesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceMyVotesExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceMyVotesExample() throws IOException {
                    GovernanceMyVotesResponse response = w3.governanceMyVotes().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.myVotes({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.my_votes()

            print(governance_response)
  /governance/myVotingPower:
    post:
      operationId: myVotingPower
      summary: '[myVotingPower]'
      description: |
        The myVotingPower property provides the voting power of the node. The voting power can be 1.0 ~ 2.0. In "none", "single" governance mode, totalVotingPower don't provide any information.

        **JSONRPC:** `governance_myVotingPower`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_myVotingPower
      responses:
        '200':
          description: Node's Voting Power or error message
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: Node's Voting Power or error message
                        example: 1.323
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/myVotingPower' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_myVotingPower",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceMyVotingPowerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class GovernanceMyVotingPowerExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));
              void governanceMyVotingPowerExample() throws IOException {
                GovernanceMyVotingPowerResponse response = w3.governanceMyVotingPower().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.myVotingPower({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.my_voting_power()

            print(governance_response)
  /governance/nodeAddress:
    post:
      operationId: nodeAddress
      summary: '[nodeAddress]'
      description: |
        The nodeAddress property provides the address of the node that a user is using. It is derived from the nodekey and used to sign consensus messages. And the value of "governingnode" has to be one of validator's node address.

        **JSONRPC:** `governance_nodeAddress`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_nodeAddress
      responses:
        '200':
          description: 20 BYTE address of a node
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 20-byte DATA
                        description: 20 BYTE address of a node
                        example: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/nodeAddress' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_nodeAddress",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            //import org.web3j.protocol.klaytn.core.method.response.GovernanceNodeAddressResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceNodeAddressExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
            //        GovernanceNodeAddressResponse response = w3.governanceNodeAddress().send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.nodeAddress({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.node_address()

            print(governance_response)
  /governance/pendingChanges:
    post:
      operationId: pendingChanges
      summary: '[pendingChanges]'
      description: |
        The pendingChanges returns the list of items that have received enough number of votes but not yet finalized. At the end of the current epoch, these changes will be finalized and the result will be in effect from the epoch after next epoch.

        **JSONRPC:** `governance_pendingChanges`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_pendingChanges
      responses:
        '200':
          description: Currently pending changes composed of keys and values
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Currently pending changes composed of keys and values
                        example:
                          reward.minimumstake: '5000000'
                          reward.useginicoeff: false
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/pendingChanges' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_pendingChanges",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernancePendingChangesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernancePendingChangesExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governancePendingChangesExample() throws IOException {
                    GovernancePendingChangesResponse response = w3.governancePendingChanges().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.pendingChanges({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.pending_changes()

            print(governance_response)
  /governance/showTally:
    post:
      operationId: showTally
      summary: '[showTally]'
      description: |
        The showTally property provides the current tally of governance votes. It shows the aggregated approval rate in percentage. When it goes over 50%, the vote passes.

        **JSONRPC:** `governance_showTally`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_showTally
      responses:
        '200':
          description: Each vote's value and approval rate in percentage
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          type: object
                        description: Each vote's value and approval rate in percentage
                        example:
                          - ApprovalPercentage: 36.2
                            Key: unitprice
                            Value: 25000000000
                          - ApprovalPercentage: 72.5
                            Key: mintingamount
                            Value: '9600000000000000000'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/showTally' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_showTally",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceShowTallyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceShowTallyExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceShowTallyExample() throws IOException {
                    GovernanceShowTallyResponse response = w3.governanceShowTally().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.showTally({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.show_tally()

            print(governance_response)
  /governance/totalVotingPower:
    post:
      operationId: totalVotingPower
      summary: '[totalVotingPower]'
      description: |
        The totalVotingPower property provides the sum of all voting power that CNs have. Each CN has 1.0 ~ 2.0 voting power. In "none", "single" governance mode, totalVotingPower don't provide any information.

        **JSONRPC:** `governance_totalVotingPower`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_totalVotingPower
      responses:
        '200':
          description: Total Voting Power or error message
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: Total Voting Power or error message
                        example: 32.452
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/totalVotingPower' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_totalVotingPower",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import java.io.IOException;
            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceTotalVotingPowerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class GovernanceTotalVotingPowerExample {
              private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

              void governanceTotalVotingPowerExample() throws IOException {
                GovernanceTotalVotingPowerResponse response = w3.governanceTotalVotingPower().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.totalVotingPower({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.total_voting_power()

            print(governance_response)
  /governance/vote:
    post:
      operationId: vote
      summary: '[vote]'
      description: |
        The vote method submits a new vote. If the node has the right to vote based on governance mode, the vote can be placed. If not, an error message will be returned and the vote will be ignored.

        **JSONRPC:** `governance_vote`
      tags:
        - governance
      parameters:
        - name: key
          required: true
          schema:
            type: string
          description: Name of the configuration setting to be changed. Key has the form of domain.field
          in: query
        - name: value
          required: true
          schema:
            $ref: '#/components/schemas/Value'
          description: Various types of value for each key.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: governance_vote
                    params:
                      type: array
                      items:
                        anyOf:
                          - type: string
                            title: Key
                          - $ref: '#/components/schemas/Value'
                      example:
                        - governance.governancemode
                        - ballot
      responses:
        '200':
          description: Result of vote submission
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Result of vote submission
                        example: Your vote was successfully placed.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/vote' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_vote",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["governance.governancemode", "ballot"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceVoteResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceVoteExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.SERVER_URL));

                void governanceVoteExample() throws IOException {
                    String key = "governance.governancemode";
                    String value = "ballot";

                    GovernanceVoteResponse response = w3.governanceVote(key, value).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));
                
                const key = "governance.governancemode";
                const value = "ballot";

                sdk.governance.vote(key, value, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            key = "governance.governancemode"
            value = "ballot"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.vote(key, value)

            print(governance_response)
  /governance/votes:
    post:
      operationId: votes
      summary: '[votes]'
      description: |
        The votes returns the votes from all nodes in the epoch. These votes are gathered from the header of each block.

        **JSONRPC:** `governance_votes`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_votes
      responses:
        '200':
          description: Return current votes composed of keys, values and node addresses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: Current votes composed of keys, values and node addresses
                        items:
                          title: VoteList
                          type: object
                          required:
                            - key
                            - value
                            - validator
                          properties:
                            key:
                              type: string
                            validator:
                              type: string
                              format: hex
                            value:
                              oneOf:
                                - type: string
                                - type: boolean
                        example:
                          - key: reward.minimumstake
                            validator: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
                            value: '5000000'
                          - key: reward.useginicoeff
                            validator: '0xa5bccb4d279419abe2d470f8c04dec0789ac2d54'
                            value: false
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/votes' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_votes",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.governance;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceVotesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceVotesExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void governanceVotesExample() throws IOException {
                    GovernanceVotesResponse response = w3.governanceVotes().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.governance.votes({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.votes()

            print(governance_response)
  /admin/addPeer:
    post:
      operationId: addPeer
      summary: '[addPeer]'
      description: |
        The addPeer is an administrative method that requests adding a new remote node to the list of tracked static nodes. The node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down.

        The method accepts a single argument kni, which means "Klaytn Network Identifier". It is similar to the enode concept in the geth. It is URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred.

        **JSONRPC:** `admin_addPeer`
      tags:
        - admin
      parameters:
        - name: url
          required: true
          schema:
            type: string
          description: Peer's kni URL.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/AddPeerReq'
      responses:
        '200':
          description: true if the peer was accepted, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/AddPeerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/addPeer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_addPeer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.BooleanResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class AdminAddPeerExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminAddPeerExample() throws IOException {
                    String url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323";

                    BooleanResponse response = w3.adminAddPeer(url).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const url = 'kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323'

                sdk.admin.addPeer(url, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"
            url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"
            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.add_peer(url)
            print(admin_response)
  /admin/datadir:
    post:
      operationId: datadir
      summary: '[datadir]'
      description: |
        The datadir administrative property can be queried for the absolute path the running Klaytn node currently uses to store all its databases. The default path is different depending on the node types (kcn, kpn, and ken) and the OS type.

        **JSONRPC:** `admin_datadir`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DatadirReq'
      responses:
        '200':
          description: The datadir path.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DatadirResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/datadir' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_datadir",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminDatadirResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminDataDirExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminDataDirExample() throws IOException {
                    AdminDatadirResponse response = w3.adminDatadir().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.datadir({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.datadir()

            print(admin_response)
  /admin/exportChain:
    post:
      operationId: exportChain
      summary: '[exportChain]'
      description: |
        The exportChain is an administrative method that exports the blockchain to a file.

        **JSONRPC:** `admin_exportChain`
      tags:
        - admin
      parameters:
        - name: fileName
          required: true
          schema:
            type: string
          description: the fully qualified path to the file where the blockchain must be exported.
          in: query
        - name: firstBlock
          required: false
          schema:
            $ref: '#/components/schemas/IntegerBlockNumber'
          description: First block
          in: query
        - name: lastBlock
          required: false
          schema:
            $ref: '#/components/schemas/IntegerBlockNumber'
          description: Last block
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ExportChainReq'
      responses:
        '200':
          description: true if chain was exported, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ExportChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/exportChain' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_exportChain",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "/tmp/chain.txt", 1, 1000
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminExportChainResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminExportChainExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminExportChainExample() throws IOException {
                    String file = "/tmp/chain3.txt";
                    int firstBlock = 1;
                    int lastBlock = 500;
                    AdminExportChainResponse response = w3.adminExportChain(file, firstBlock, lastBlock).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const fileName = '/tmp/chain.txt'
                const startBlock = 1
                const endBlock = 1000
                
                sdk.admin.exportChain(fileName, startBlock, endBlock, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "/tmp/chain.txt"
            startBlock = 1
            endBlock = 1000

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.export_chain(fileName, startBlock, endBlock)

            print(admin_response)
  /admin/getSpamThrottlerCandidateList:
    post:
      operationId: getSpamThrottlerCandidateList
      summary: '[getSpamThrottlerCandidateList]'
      description: |
        Get spam throttler candidate list

        **JSONRPC:** `admin_getSpamThrottlerCandidateList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetSpamThrottlerCandidateListReq'
      responses:
        '200':
          description: Get spam throttler candidate list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetSpamThrottlerCandidateListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/getSpamThrottlerCandidateList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_getSpamThrottlerCandidateList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminGetSpamThrottlerCandidateListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminGetSpamThrottlerCandidateListExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminGetSpamThrottlerCandidateListExample() throws IOException {
                    AdminGetSpamThrottlerCandidateListResponse response = w3.adminGetSpamThrottlerCandidateList().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.getSpamThrottlerCandidateList({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.get_spam_throttler_candidate_list()

            print(admin_response)
  /admin/getSpamThrottlerThrottleList:
    post:
      operationId: getSpamThrottlerThrottleList
      summary: '[getSpamThrottlerThrottleList]'
      description: |
        Get spam throttler throttle list

        **JSONRPC:** `admin_getSpamThrottlerThrottleList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetSpamThrottlerThrottleListReq'
      responses:
        '200':
          description: Get spam throttler throttle list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetSpamThrottlerThrottleListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/getSpamThrottlerThrottleList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_getSpamThrottlerThrottleList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminGetSpamThrottlerThrottleListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminGetSpamThrottlerThrottleListExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminGetSpamThrottlerThrottleListExample() throws IOException {
                    AdminGetSpamThrottlerThrottleListResponse response = w3.adminGetSpamThrottlerThrottleList().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.getSpamThrottlerThrottleList({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.get_spam_throttler_throttle_list()

            print(admin_response)
  /admin/getSpamThrottlerWhiteList:
    post:
      operationId: getSpamThrottlerWhiteList
      summary: '[getSpamThrottlerWhiteList]'
      description: |
        Get spam throttler white list

        **JSONRPC:** `admin_getSpamThrottlerWhiteList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetSpamThrottlerWhiteListReq'
      responses:
        '200':
          description: Get spam throttler white list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetSpamThrottlerWhiteListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/getSpamThrottlerWhiteList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_getSpamThrottlerWhiteList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminGetSpamThrottlerWhiteListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminGetSpamThrottlerWhiteListExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminGetSpamThrottlerWhiteListExample() throws IOException {
                    AdminGetSpamThrottlerWhiteListResponse response = w3.adminGetSpamThrottlerWhiteList().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.getSpamThrottlerWhiteList({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.get_spam_throttler_white_list()

            print(admin_response)
  /admin/importChain:
    post:
      operationId: importChain
      summary: '[importChain]'
      description: |
        The importChain is an administrative method that imports an exported chain from a file into a node. This method imports only blocks that haven't existed in a Klaytn node. This method does not delete any data of the existing chain.

        **JSONRPC:** `admin_importChain`
      tags:
        - admin
      parameters:
        - name: fileName
          required: true
          schema:
            type: string
          description: the fully qualified path to the file containing the chain to be imported.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ImportChainReq'
      responses:
        '200':
          description: true if chain was imported, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ImportChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/importChain' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_importChain",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "/tmp/chain.txt"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminImportChainResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminImportChainExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminImportChainExample() throws IOException {
                    String fileName = "/tmp/chain.txt";

                    AdminImportChainResponse response = w3.adminImportChain(fileName).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const fileName = '/tmp/chain.txt'

                sdk.admin.importChain(fileName, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "/tmp/chain.txt"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.import_chain(fileName)

            print(admin_response)
  /admin/importChainFromString:
    post:
      operationId: importChainFromString
      summary: '[importChainFromString]'
      description: |
        The importChainFromString is an administrative method that imports a chain from a RLP-encoded string of blocks into a Klaytn node. This only works if there is no existing chain in a Klaytn node. This method does not delete any data of the existing chain.       

        **JSONRPC:** `admin_importChainFromString`
      tags:
        - admin
      parameters:
        - name: blockRlp
          required: true
          schema:
            type: string
          description: the RLP-encoded string that represents the blocks to be imported. (equals to the return value of debug.getBlockRlp)
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ImportChainFromStringReq'
      responses:
        '200':
          description: true if chain was imported, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ImportChainFromStringResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/importChainFromString' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_importChainFromString",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "f9071...080c0"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminImportChainFromStringResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminImportChainFromStringExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminImportChainFromStringExample() throws IOException {
                    String blockRlp = "0xf90273f9026fa0c36f3961fd16dff60764c63f76f67542ca20dedbff039ee52cd20e772f567bd794043c471bee060e00a56ccd02c0ca286808a5a436a0d044a2b68f0e5da76178af5ea4a7deb852fd6cb4a8369f6f924e72414ef1cf99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc9cc2eb8c0d883010a02846b6c617988676f312e31352e37856c696e757800000000000000f89ed59465b47be3457ff26f2911cf89fd079cef0475a2e6b841395cf5ecab6c9c69d4571dc85bc39075242570c9c947fb4be4e23639faae4d512d5690f47244f41e0138314098a63d533e761a16b7e36e68322d7605a2ea6b0f01f843b8418259cb2f6beaee384e0a52e8b37fca77084982557d406817cc1ae8e1b96556a243e97b51317b9e3fa1545942b18e2ba68b94d33bb0fd62a5a5fdba23cc85be040180808505d21dba00c0";

                    AdminImportChainFromStringResponse response = w3.adminImportChainFromString(blockRlp).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const blockRlp = '0xf90273f9026fa0c36f3961fd16dff60764c63f76f67542ca20dedbff039ee52cd20e772f567bd794043c471bee060e00a56ccd02c0ca286808a5a436a0d044a2b68f0e5da76178af5ea4a7deb852fd6cb4a8369f6f924e72414ef1cf99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc9cc2eb8c0d883010a02846b6c617988676f312e31352e37856c696e757800000000000000f89ed59465b47be3457ff26f2911cf89fd079cef0475a2e6b841395cf5ecab6c9c69d4571dc85bc39075242570c9c947fb4be4e23639faae4d512d5690f47244f41e0138314098a63d533e761a16b7e36e68322d7605a2ea6b0f01f843b8418259cb2f6beaee384e0a52e8b37fca77084982557d406817cc1ae8e1b96556a243e97b51317b9e3fa1545942b18e2ba68b94d33bb0fd62a5a5fdba23cc85be040180808505d21dba00c0'
                
                sdk.admin.importChainFromString(blockRlp, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockRlp = "0xf90273f9026fa0c36f3961fd16dff60764c63f76f67542ca20dedbff039ee52cd20e772f567bd794043c471bee060e00a56ccd02c0ca286808a5a436a0d044a2b68f0e5da76178af5ea4a7deb852fd6cb4a8369f6f924e72414ef1cf99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc9cc2eb8c0d883010a02846b6c617988676f312e31352e37856c696e757800000000000000f89ed59465b47be3457ff26f2911cf89fd079cef0475a2e6b841395cf5ecab6c9c69d4571dc85bc39075242570c9c947fb4be4e23639faae4d512d5690f47244f41e0138314098a63d533e761a16b7e36e68322d7605a2ea6b0f01f843b8418259cb2f6beaee384e0a52e8b37fca77084982557d406817cc1ae8e1b96556a243e97b51317b9e3fa1545942b18e2ba68b94d33bb0fd62a5a5fdba23cc85be040180808505d21dba00c0"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.import_chain_from_string(blockRlp)

            print(admin_response)
  /admin/nodeInfo:
    post:
      operationId: nodeInfo
      summary: '[nodeInfo]'
      description: |
        The nodeInfo administrative property can be queried for all the information known about the running Klaytn node at the networking granularity. These include general information about the node itself as a participant of the devp2p P2P overlay protocol, as well as specialized information added by each of the running application protocols, e.g., klay.

        **JSONRPC:** `admin_nodeInfo`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/NodeInfoReq'
      responses:
        '200':
          description: The node information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/NodeInfoResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/nodeInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_nodeInfo",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.admin.AdminNodeInfo;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminNodeInfoExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminNodeInfoExample() throws IOException {
                    AdminNodeInfo response = w3.adminNodeInfo().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.nodeInfo({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.node_info()

            print(admin_response)
  /admin/peers:
    post:
      operationId: peers
      summary: '[peers]'
      description: |
        The peers administrative property can be queried for all the information known about the connected remote nodes at the networking granularity. These include general information about the nodes themselves as participants of the devp2p P2P overlay protocol, as well as specialized information added by each of the running application protocols.        

        **JSONRPC:** `admin_peers`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PeersReq'
      responses:
        '200':
          description: The information about all connected peers.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/PeersResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/peers' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_peers",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.admin.AdminPeers;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminPeersExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminPeersExample() throws IOException {
                    AdminPeers response = w3.adminPeers().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.peers({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.peers()

            print(admin_response)
  /admin/removePeer:
    post:
      operationId: removePeer
      summary: '[removePeer]'
      description: |
        The removePeer is an administrative method that requests removing a node from the list of tracked static nodes.

        The method accepts a single argument kni, which means "Klaytn Network Identifier". It is similar to the enode concept in the geth. It is URL of the remote peer to be removed from a list and returns a BOOL indicating whether the peer was removed or some error occurred.        

        **JSONRPC:** `admin_removePeer`
      tags:
        - admin
      parameters:
        - name: url
          required: true
          schema:
            type: string
          description: Peer's kni URL.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/RemovePeerReq'
      responses:
        '200':
          description: true if the peer was accepted, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/RemovePeerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/removePeer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_removePeer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"
              ]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.BooleanResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminRemovePeerExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminRemovePeerExample() throws IOException {
                    String url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323";

                    BooleanResponse response = w3.adminRemovePeer(url).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const url = 'kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323'
                
                sdk.admin.removePeer(url, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.remove_peer(url)

            print(admin_response)
  /admin/saveTrieNodeCacheToDisk:
    post:
      operationId: saveTrieNodeCacheToDisk
      summary: '[saveTrieNodeCacheToDisk]'
      description: |
        The saveTrieNodeCacheToDisk is an administrative method that starts saving the cached trie node to the disk to reuse them when the node restarts. Cached trie node data will be stored to and loaded from $DATA_DIR/fastcache . This method returns an error if the saving process has been already triggered or trie node cache is disabled. This feature is supported since Klaytn 1.5.3.       

        **JSONRPC:** `admin_saveTrieNodeCacheToDisk`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SaveTrieNodeCacheToDiskReq'
      responses:
        '200':
          description: null if saving the trie node has started, or an error message if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SaveTrieNodeCacheToDiskResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/saveTrieNodeCacheToDisk' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_saveTrieNodeCacheToDisk",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminSaveTrieNodeCacheToDiskResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminSaveTrieNodeCacheToDiskExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminSaveTrieNodeCacheToDiskExample() throws IOException {
                    AdminSaveTrieNodeCacheToDiskResponse response = w3.adminSaveTrieNodeCacheToDisk().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.saveTrieNodeCacheToDisk({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.save_trie_node_cache_to_disk()

            print(admin_response)
  /admin/setMaxSubscriptionPerWSConn:
    post:
      operationId: setMaxSubscriptionPerWSConn
      summary: '[setMaxSubscriptionPerWSConn]'
      description: |
        The setMaxSubscriptionPerWSConn is an administrative method that sets the maximum allowed number of subscriptions per single WebSocket connection. For example, if the maximum number is set to five and a user requests more than five subscriptions through the klay_subscribe API, an error message "Maximum 5 subscriptions are allowed for a WebSocket connection" will be displayed. This feature is supported since Klaytn 1.6.0.

        **JSONRPC:** `admin_setMaxSubscriptionPerWSConn`
      tags:
        - admin
      parameters:
        - name: limit
          required: true
          schema:
            type: integer
          description: The maximum allowed number of subscriptions per single WebSocket connection.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SetMaxSubscriptionPerWSConnReq'
      responses:
        '200':
          description: Return null if the limit is set successfully; otherwise, it returns an error message.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SetMaxSubscriptionPerWSConnResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/setMaxSubscriptionPerWSConn' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_setMaxSubscriptionPerWSConn",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [5]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminSetMaxSubscriptionPerWSConnResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminSetMaxSubscriptionPerWSConnExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminSetMaxSubscriptionPerWSConnExample() throws IOException {
                    int limit = 5;

                    AdminSetMaxSubscriptionPerWSConnResponse response = w3.adminSetMaxSubscriptionPerWSConn(limit).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const maxSubscriptionPerWSConn = 5
             
                sdk.admin.setMaxSubscriptionPerWSConn(maxSubscriptionPerWSConn, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            limit = 5

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.set_max_subscription_per_ws_conn(limit)

            print(admin_response)
  /admin/setSpamThrottlerWhiteList:
    post:
      operationId: setSpamThrottlerWhiteList
      summary: '[setSpamThrottlerWhiteList]'
      description: |
        Set spam throttler white list

        **JSONRPC:** `admin_setSpamThrottlerWhiteList`
      tags:
        - admin
      parameters:
        - name: addresses
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Address'
            description: list of address to put to spam white list
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SetSpamThrottlerWhiteListReq'
      responses:
        '200':
          description: Set spam throttler white list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SetSpamThrottlerWhiteListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/setSpamThrottlerWhiteList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_setSpamThrottlerWhiteList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [["0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5"]]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminSetSpamThrottlerWhiteListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.List;

            public class AdminSetSpamThrottlerWhiteListExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminSetSpamThrottlerWhiteListExample() throws IOException {
                    List<String> addresses = List.of("0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5");
                    AdminSetSpamThrottlerWhiteListResponse response = w3.adminSetSpamThrottlerWhiteList(addresses).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const address = ['0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5']
                sdk.admin.setSpamThrottlerWhiteList(address, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = ["0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5"]

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.set_spam_throttler_white_list(address)

            print(admin_response)
  /admin/spamThrottlerConfig:
    post:
      operationId: spamThrottlerConfig
      summary: '[spamThrottlerConfig]'
      description: |
        Get spam throttler config

        **JSONRPC:** `admin_spamThrottlerConfig`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SpamThrottlerConfigReq'
      responses:
        '200':
          description: Get spam throttler config
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SpamThrottlerConfigResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/spamThrottlerConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_spamThrottlerConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminSpamThrottlerConfigResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminSpamThrottlerConfigExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminSpamThrottlerConfigExample() throws IOException {
                    AdminSpamThrottlerConfigResponse response = w3.adminSpamThrottlerConfig().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.spamThrottlerConfig({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.spam_throttler_config()

            print(admin_response)
  /admin/startHTTP:
    post:
      operationId: startHTTP
      summary: '[startHTTP]'
      description: |
        The startHTTP is an administrative method that starts an HTTP based JSON RPC API webserver to handle client requests.

        The method returns a boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time.

        **NOTE:** *This API replaces admin_startRPC. The admin_startRPC will be deprecated soon.*

        **JSONRPC:** `admin_startHTTP`
      tags:
        - admin
      parameters:
        - name: host
          schema:
            type: string
          description: (optional) network interface to open the listener socket on (default "localhost").
          in: query
        - name: port
          schema:
            type: integer
          description: (optional) network port to open the listener socket on (default 8551).
          in: query
        - name: cors
          schema:
            type: string
          description: (optional) cross-origin resource sharing header to use (default "").
          in: query
        - name: apis
          schema:
            type: string
          description: (optional) API modules to offer over this interface (default "klay,net,rpc").
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartHTTPReq'
      responses:
        '200':
          description: Return true if the HTTP RPC listener was opened, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartHTTPResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startHTTP' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startHTTP",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["127.0.0.1", 8551, "", "klay"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStartHTTPResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartHTTPExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStartHTTPExample() throws IOException {
                    String adminHost = "127.0.0.1";
                    int port = 8551;
                    String cors = "";
                    String apis = "klay";
                    AdminStartHTTPResponse response = w3.adminStartHTTP(adminHost, port, cors, apis).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                const host = '127.0.0.1'
                const port = 8555
                const cors = ''
                const apis = 'klay'

                sdk.admin.startHTTP({ host, port, cors, apis }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            adminHost = "127.0.0.1"
            port = 8551
            cors = ""
            apis = "klay"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.start_http(adminHost, port, cors, apis)

            print(admin_response)
  /admin/startSpamThrottler:
    post:
      operationId: startSpamThrottler
      summary: '[startSpamThrottler]'
      description: |
        Start spam throttler

        **JSONRPC:** `admin_startSpamThrottler`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/startSpamThrottlerReq'
      responses:
        '200':
          description: Start spam throttler
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/startSpamThrottlerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startSpamThrottler' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startSpamThrottler",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStartSpamThrottlerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartSpamThrottlerExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStartSpamThrottlerExample() throws IOException {
                    AdminStartSpamThrottlerResponse response = w3.adminStartSpamThrottler().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.startSpamThrottler({}, {}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.start_spam_throttler()

            print(admin_response)
  /admin/startStateMigration:
    post:
      operationId: startStateMigration
      summary: '[startStateMigration]'
      description: |
        The startStateMigration is an administrative method that starts a state migration and removes old state/storage trie nodes. This can save the storage space of a Klaytn node. The method returns an error if it fails to start a state migration, or null if it succeeds to start. NOTE: After the state migration, the node cannot serve APIs with previous states.

        **JSONRPC:** `admin_startStateMigration`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartStateMigrationReq'
      responses:
        '200':
          description: null if the state migration has started, or an error message if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartStateMigrationResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startStateMigration' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startStateMigration",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStartStateMigrationResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartStateMigrationExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStartStateMigrationExample() throws IOException {
                    AdminStartStateMigrationResponse response = w3.adminStartStateMigration().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.admin.startStateMigration({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.start_state_migration()

            print(admin_response)
  /admin/startWS:
    post:
      operationId: startWS
      summary: '[startWS]'
      description: |
        The startWS is an administrative method that starts an WebSocket based JSON RPC API webserver to handle client requests.

        The method returns a boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time.     

        **JSONRPC:** `admin_startWS`
      tags:
        - admin
      parameters:
        - name: host
          schema:
            type: string
          description: (optional) network interface to open the listener socket on (default "localhost").
          in: query
        - name: port
          schema:
            type: integer
          description: (optional) network port to open the listener socket on (default 8551).
          in: query
        - name: cors
          schema:
            type: string
          description: (optional) cross-origin resource sharing header to use (default "").
          in: query
        - name: apis
          schema:
            type: string
          description: (optional) API modules to offer over this interface (default "klay,net,rpc").
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartWSReq'
      responses:
        '200':
          description: true if the WebSocket RPC listener was opened, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartWSResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startWS' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startWS",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["127.0.0.1", 8552, "", "klay"]
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStartWSResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartWSExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStartWSExample() throws IOException {
                    String host = "127.0.0.1";
                    int port = 8552;
                    String cors = "";
                    String apis = "klay";

                    AdminStartWSResponse response = w3.adminStartWS(host, port, cors, apis).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                const host = '127.0.0.1'
                const port = 8552
                const cors = ''
                const apis = 'klay'

                sdk.admin.startWS({ host, port, cors, apis }, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            adminHost = "127.0.0.1"
            port = 8552
            cors = ""
            apis = "klay"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.start_ws(adminHost, port, cors, apis)

            print(admin_response)
  /admin/stateMigrationStatus:
    post:
      operationId: stateMigrationStatus
      summary: '[stateMigrationStatus]'
      description: |
        The stateMigrationStatus is an administrative method that returns the status information of the state migration. This method takes no parameters and returns the status of the currently running state migration.

        **JSONRPC:** `admin_stateMigrationStatus`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StateMigrationStatusReq'
      responses:
        '200':
          description: Returns the status information of the state migration
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StateMigrationStatusResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stateMigrationStatus' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stateMigrationStatus",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStateMigrationStatusResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStateMigrationStatusExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStateMigrationStatusExample() throws IOException {
                    AdminStateMigrationStatusResponse response = w3.adminStateMigrationStatus().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.stateMigrationStatus({}, (err, data, response) => {
                    console.log(data);
                });   
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.state_migration_status()

            print(admin_response)
  /admin/stopHTTP:
    post:
      operationId: stopHTTP
      summary: '[stopHTTP]'
      description: |
        The stopHTTP is an administrative method that closes the currently open HTTP RPC endpoint. As the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.

        **NOTE:** This API replaces admin_stopRPC. The admin_stopRPC will be deprecated soon.

        **JSONRPC:** `admin_stopHTTP`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopHTTPReq'
      responses:
        '200':
          description: true if the endpoint was closed, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopHTTPResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopHTTP' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopHTTP",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStopHTTPResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopHTTPExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStopHttpExample() throws IOException {
                    AdminStopHTTPResponse response = w3.adminStopHTTP().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.stopHTTP({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.stop_http()

            print(admin_response)
  /admin/stopSpamThrottler:
    post:
      operationId: stopSpamThrottler
      summary: '[stopSpamThrottler]'
      description: |
        Stop spam throttler

        **JSONRPC:** `admin_stopSpamThrottler`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopSpamThrottlerReq'
      responses:
        '200':
          description: Stop spam throttler
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/stopSpamThrottlerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopSpamThrottler' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopSpamThrottler",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStopSpamThrottlerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopSpamThrottlerExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStopSpamThrottlerExample() throws IOException {
                    AdminStopSpamThrottlerResponse response = w3.adminStopSpamThrottler().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.stopSpamThrottler({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.stop_spam_throttler()

            print(admin_response)
  /admin/stopStateMigration:
    post:
      operationId: stopStateMigration
      summary: '[stopStateMigration]'
      description: |
        The stopStateMigration is an administrative method that stops the currently running state migration. This method takes no parameters and returns null or an error whether the state migration was stopped or not.       

        **JSONRPC:** `admin_stopStateMigration`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopStateMigrationReq'
      responses:
        '200':
          description: null if the state migration is stopped, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopStateMigrationResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopStateMigration' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopStateMigration",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStopStateMigrationResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopStateMigrationExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStopStateMigrationExample() throws IOException {
                    AdminStopStateMigrationResponse response = w3.adminStopStateMigration().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.admin.stopStateMigration({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.stop_state_migration()

            print(admin_response)
  /admin/stopWS:
    post:
      operationId: stopWS
      summary: '[stopWS]'
      description: |
        The stopWS is an administrative method that closes the currently open WebSocket RPC endpoint. As the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.        

        **JSONRPC:** `admin_stopWS`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopWSReq'
      responses:
        '200':
          description: true if the endpoint was closed, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopWSResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopWS' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopWS",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.klaytn.core.method.response.AdminStopWSResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopWSExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminStopWSExample() throws IOException {
                    AdminStopWSResponse response = w3.adminStopWS().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));


                sdk.admin.stopWS({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.stop_ws()

            print(admin_response)
  /admin/nodeConfig:
    post:
      operationId: nodeConfig
      summary: '[nodeConfig]'
      description: |
        A series of node configurations

        **JSONRPC:** `admin_nodeConfig`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/NodeConfigReq'
      responses:
        '200':
          description: The node config information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/NodeConfigResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/nodeConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_nodeConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.admin;

            import opensdk.sdk.apis.constant.UrlConstants;
            import org.web3j.protocol.core.methods.response.admin.AdminNodeConfig;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminNodeConfigExample {
                private Web3j w3 = Web3j.build(new HttpService(UrlConstants.TEST_URL));

                void adminNodeConfigExample() throws IOException {
                    AdminNodeConfig response = w3.adminNodeConfig().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |-
            const OpenSdk = require("opensdk-javascript");

            (() => {
                const sdk = new OpenSdk(new OpenSdk.ApiClient("https://api.baobab.klaytn.net:8651"));

                sdk.admin.nodeConfig({}, (err, data, response) => {
                    console.log(data);
                });
            }
            )()
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"
            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.admin.node_config()
            print(admin_response)
  /mainbridge/convertChildChainBlockHashToParentChainTxHash:
    post:
      summary: '[convertChildChainBlockHashToParentChainTxHash]'
      tags:
        - mainbridge
      operationId: convertChildChainBlockHashToParentChainTxHash
      description: |
        Returns the anchoring transaction hash of the given child chain block hash.

        **JSONRPC:** `mainbridge_convertChildChainBlockHashToParentChainTxHash`
      parameters:
        - name: blockHash
          required: true
          in: query
          schema:
            type: string
            format: 32-byte DATA
          description: The child chain block hash.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/MainbridgeConvertChildChainBlockHashToParentChainTxHashReq'
      responses:
        '200':
          description: The anchoring transaction hash that includes the child chain block information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/MainbridgeConvertChildChainBlockHashToParentChainTxHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/mainbridge/convertChildChainBlockHashToParentChainTxHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "mainbridge_convertChildChainBlockHashToParentChainTxHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xeadc6a3a29a20c13824b5df1ba05cca1ed248d046382a4f2792aac8a6e0d1880"]
            }'
  /mainbridge/getChildChainIndexingEnabled:
    post:
      summary: '[getChildChainIndexingEnabled]'
      tags:
        - mainbridge
      operationId: getChildChainIndexingEnabled
      description: |
        mainbridge_getChildChainIndexingEnabled returns if indexing anchoring transaction is enabled or not.

        **JSONRPC:** `mainbridge_getChildChainIndexingEnabled`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/MainbridgeGetChildChainIndexingEnabledReq'
      responses:
        '200':
          description: mainbridge_getChildChainIndexingEnabled returns if indexing anchoring transaction is enabled or not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/MainbridgeGetChildChainIndexingEnabledResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/mainbridge/getChildChainIndexingEnabled' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "mainbridge_getChildChainIndexingEnabled",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /mainbridge/nodeInfo:
    post:
      summary: '[nodeInfo]'
      tags:
        - mainbridge
      operationId: nodeInfo
      description: |
        Returns bridge node information including the KNI (Klaytn Network Identifier) of the node. A mainbridge node can connect to a subbrige node via the KNI.

        **JSONRPC:** `mainbridge_nodeInfo`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/MainbridgeNodeInfoReq'
      responses:
        '200':
          description: Returns bridge node information including the KNI (Klaytn Network Identifier) of the node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/MainbridgeNodeInfoResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/mainbridge/nodeInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "mainbridge_nodeInfo",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /subbridge/addPeer:
    post:
      summary: '[addPeer]'
      tags:
        - subbridge
      operationId: addPeer
      description: |
        Returns true if adding a mainbridge peer is done successfully.

        The addPeer method adds a new remote node to the peer list. The node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down.

        The method accepts a single argument, the kni URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred.

        **JSONRPC:** `subbridge_addPeer`
      parameters:
        - name: url
          required: true
          schema:
            type: string
          description: Peer's kni URL.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-AddPeerReq'
      responses:
        '200':
          description: true if the peer was accepted, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/AddPeerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/addPeer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_addPeer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:50505"]
            }'
  /subbridge/anchoring:
    post:
      summary: '[anchoring]'
      tags:
        - subbridge
      operationId: anchoring
      description: |
        The subbridge_anchoring can enable/disable the anchoring feature of the service chain.

        **JSONRPC:** `subbridge_anchoring`
      parameters:
        - name: enable
          required: true
          schema:
            type: boolean
          description: true enables the anchoring feature, false disables it.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/AnchoringReq'
      responses:
        '200':
          description: true if the anchoring was enabled, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/AnchoringResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/anchoring' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_anchoring",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [true]
            }'
  /subbridge/convertRequestTxHashToHandleTxHash:
    post:
      summary: '[convertRequestTxHashToHandleTxHash]'
      tags:
        - subbridge
      operationId: convertRequestTxHashToHandleTxHash
      description: |
        The subbridge_convertRequestTxHashToHandleTxHash returns the corresponding "handle value transfer transaction" hash in the opposite chain for the given "request value transfer transaction" hash. "Request value transfer transaction" is a transaction initiated by a user, requesting a cross-chain value transfer. "Handle value transfer transaction" is the transaction created by the sub-bridge to handle the value transfer request from the user.

        **JSONRPC:** `subbridge_convertRequestTxHashToHandleTxHash`
      parameters:
        - name: Hash
          required: true
          schema:
            type: string
            format: 32-byte DATA
          description: Hash of a "request value transfer" transaction.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ConvertRequestTxHashToHandleTxHashReq'
      responses:
        '200':
          description: Hash of a "handle value transfer" transaction. zero hash means there is no corresponding "handle value transfer" transaction.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ConvertRequestTxHashToHandleTxHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/convertRequestTxHashToHandleTxHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_convertRequestTxHashToHandleTxHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xc585cfd1e7047b4faae69e62e77db192d8a339701b40d6ab4adb58453b934bec"]
            }'
  /subbridge/deployBridge:
    post:
      summary: '[deployBridge]'
      tags:
        - subbridge
      operationId: deployBridge
      description: |
        The subbridge_deployBridge deploys a bridge contract to the parent and child chains and returns the addresses of deployed bridge contracts. This method also registers the bridge contracts with the sub-bridge.

        **JSONRPC:** `subbridge_deployBridge`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeDeployBridgeReq'
      responses:
        '200':
          description: Returns the addresses of deployed bridge contracts.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeDeployBridgeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/deployBridge' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_deployBridge",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /subbridge/deregisterBridge:
    post:
      summary: '[deregisterBridge]'
      tags:
        - subbridge
      operationId: deregisterBridge
      description: |
        The subbridge.deregisterBridge deregisters already registered bridge contracts in the parent/child chain.

        **JSONRPC:** `subbridge_deregisterBridge`
      parameters:
        - name: childAccount
          in: query
          required: true
          description: Address of bridge contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: parentAccount
          in: query
          required: true
          description: Address of bridge contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeDeregisterBridgeReq'
      responses:
        '200':
          description: The subbridge.deregisterBridge deregisters already registered bridge contracts in the parent/child chain.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeDeregisterBridgeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/deregisterBridge' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_deregisterBridge",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a", "0x23dab942822021bbd6d551ef51003208924877e4"]
            }'
  /subbridge/deregisterToken:
    post:
      summary: '[deregisterToken]'
      tags:
        - subbridge
      operationId: deregisterToken
      description: |
        The subbridge_deregisterBridge deregisters already registered token pair from the bridge contracts.

        **JSONRPC:** `subbridge_deregisterToken`
      parameters:
        - name: childAccount
          in: query
          required: true
          description: Address of bridge contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: parentAccount
          in: query
          required: true
          description: Address of bridge contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: tokenChildAccount
          in: query
          required: true
          description: Address of token contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: tokenParentAccount
          in: query
          required: true
          description: Address of token contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeDeregisterTokenReq'
      responses:
        '200':
          description: null if the deregistration succeeds, Error object otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeDeregisterTokenResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/deregisterToken' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_deregisterToken",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a", "0x23dab942822021bbd6d551ef51003208924877e4","0xA4b0c6e12346426a09FaD70dAE0651E6Dbdd5198","0x865Cca53828C91663BFf0Ca9808827Bac552BAec"]
            }'
  /subbridge/getBridgeInFormation:
    post:
      summary: '[getBridgeInformation]'
      tags:
        - subbridge
      operationId: getBridgeInformation
      description: |
        The subbridge_getBridgeInformation returns the information of the given bridge contract.

        **JSONRPC:** `subbridge_getBridgeInformation`
      parameters:
        - name: account
          required: true
          in: query
          schema:
            type: string
            format: 20-byte DATA
          description: Address of a bridge contract
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetBridgeInformationReq'
      responses:
        '200':
          description: returns the information of the given bridge contract.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetBridgeInformationResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/getBridgeInformation' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_getBridgeInformation",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x27caeba831d98b5fbb1d81ce0ed20801702f443a"]
            }'
  /subbridge/getReceiptFromParentChain:
    post:
      summary: '[getReceiptFromParentChain]'
      tags:
        - subbridge
      operationId: getReceiptFromParentChain
      description: |
        The subbridge_getReceiptFromParentChain returns the receipt of the anchoring transaction.

        **JSONRPC:** `subbridge_getReceiptFromParentChain`
      parameters:
        - name: blockHash
          in: query
          required: true
          description: The child chain block hash that was included the anchoring tx hash.
          schema:
            $ref: '#/components/schemas/BlockHash'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeGetReceiptFromParentChainReq'
      responses:
        '200':
          description: Object - A transaction receipt object, or null when no receipt was found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeGetReceiptFromParentChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/getReceiptFromParentChain' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_getReceiptFromParentChain",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x4f300d6574e71d7940c88fe08f27d9ac45cbc7b81d45c17e848d3772f64377b5"]
            }'
  /subbridge/listBridge:
    post:
      summary: '[listBridge]'
      tags:
        - subbridge
      operationId: listBridge
      description: |
        The subbridge_listBridge returns the list of all bridge contract pairs that are registered (stored) in the sub-bridge.

        **JSONRPC:** `subbridge_listBridge`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ListBridgeReq'
      responses:
        '200':
          description: returns the list of all bridge contract pairs that are registered (stored) in the sub-bridge.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ListBridgeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/listBridge' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_listBridge",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /subbridge/nodeInfo:
    post:
      summary: '[nodeInfo]'
      tags:
        - subbridge
      operationId: nodeInfo
      description: |
        Returns bridge node information including the KNI (Klaytn Network Identifier) of the node. A subbridge node can connect to a mainbridge node via the KNI.

        **JSONRPC:** `subbridge_nodeInfo`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-NodeInfoReq'
      responses:
        '200':
          description: the bridge node information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-NodeInfoResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/nodeInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_nodeInfo",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /subbridge/registerBridge:
    post:
      summary: '[registerBridge]'
      tags:
        - subbridge
      operationId: registerBridge
      description: |
        The subbridge_registerBridge registers already deployed bridge contracts in the parent and child chains.

        **JSONRPC:** `subbridge_registerBridge`
      parameters:
        - name: childAccount
          in: query
          required: true
          description: Address of bridge contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: parentAccount
          in: query
          required: true
          description: Address of bridge contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeRegisterBridgeReq'
      responses:
        '200':
          description: The subbridge_registerBridge registers already deployed bridge contracts in the parent and child chains.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeRegisterBridgeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/registerBridge' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_registerBridge",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a", "0x23dab942822021bbd6d551ef51003208924877e4"]
            }'
  /subbridge/registerToken:
    post:
      summary: '[registerToken]'
      tags:
        - subbridge
      operationId: registerToken
      description: |
        The subbridge_registerToken registers a pair of ERC-20 or 721 tokens with the bridge contracts.

        **JSONRPC:** `subbridge_registerToken`
      parameters:
        - name: childAccount
          in: query
          required: true
          description: Address of bridge contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: parentAccount
          in: query
          required: true
          description: Address of bridge contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: tokenChildAccount
          in: query
          required: true
          description: Address of token contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: tokenParentAccount
          in: query
          required: true
          description: Address of token contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeRegisterTokenReq'
      responses:
        '200':
          description: The subbridge_registerToken registers a pair of ERC-20 or 721 tokens with the bridge contracts.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeRegisterTokenResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/registerToken' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_registerToken",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a", "0x23dab942822021bbd6d551ef51003208924877e4","0xA4b0c6e12346426a09FaD70dAE0651E6Dbdd5198","0x865Cca53828C91663BFf0Ca9808827Bac552BAec"]
            }'
  /subbridge/removePeer:
    post:
      summary: '[removePeer]'
      tags:
        - subbridge
      operationId: removePeer
      description: |
        Returns true if removing the peer is done successfully.

        The removePeer method disconnects and removes the remote node in the list of tracked static nodes. The method accepts a single argument, the kni URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred.

        **JSONRPC:** `subbridge_removePeer`
      parameters:
        - name: url
          required: true
          schema:
            type: string
          description: Peer's kni URL.
          in: query
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-RemovePeerReq'
      responses:
        '200':
          description: true if the peer was removed, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-RemovePeerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/removePeer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_removePeer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:50505"]
            }'
  /subbridge/subscribeBridge:
    post:
      summary: '[subscribeBridge]'
      tags:
        - subbridge
      operationId: subscribeBridge
      description: |
        The subbridge_subscribeBridge subscribes to the registered bridge contracts in the parent and child chains. If the sub-bridge node is subscribed to the bridge contract pair, cross-chain value-transfer requests are handled automatically by the sub-bridge.

        **JSONRPC:** `subbridge_subscribeBridge`
      parameters:
        - name: childAccount
          in: query
          required: true
          description: Address of bridge contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: parentAccount
          in: query
          required: true
          description: Address of bridge contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeSubscribeBridgeReq'
      responses:
        '200':
          description: The subbridge_subscribeBridge subscribes to the registered bridge contracts in the parent and child chains.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeSubscribeBridgeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/subscribeBridge' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_subscribeBridge",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a", "0x23dab942822021bbd6d551ef51003208924877e4"]
            }'
  /subbridge/txPending:
    post:
      summary: '[txPending]'
      tags:
        - subbridge
      operationId: txPending
      description: |
        The subbridge_txPending returns the list of pending transactions in the bridge transaction pool.

        **JSONRPC:** `subbridge_txPending`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeTxPendingReq'
      responses:
        '200':
          description: List of pending transactions in the bridge transaction pool.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeTxPendingResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/txPending' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_txPending",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /subbridge/txPendingCount:
    post:
      summary: '[txPendingCount]'
      tags:
        - subbridge
      operationId: txPendingCount
      description: |
        The subbridge_txPendingCount returns the number of pending transactions in the bridge transaction pool.

        **JSONRPC:** `subbridge_txPendingCount`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeTxPendingCountReq'
      responses:
        '200':
          description: The number of pending transactions in the bridge transaction pool.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeTxPendingCountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/txPendingCount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_txPendingCount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /subbridge/unsubscribeBridge:
    post:
      summary: '[unsubscribeBridge]'
      tags:
        - subbridge
      operationId: unsubscribeBridge
      description: |
        The subbridge_ununsubscribeBridge unsubscribes the sub-bridge from the bridge contracts in the parent and child chains. If the sub-bridge is unsubscribed from the bridge contracts, cross-chain value transfer requests can not be handled by the sub-bridge.

        **JSONRPC:** `subbridge_unsubscribeBridge`
      parameters:
        - name: childAccount
          in: query
          required: true
          description: Address of bridge contract on child chain.
          schema:
            $ref: '#/components/schemas/Address'
        - name: parentAccount
          in: query
          required: true
          description: Address of bridge contract on parent chain.
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SubbridgeUnsubscribeBridgeReq'
      responses:
        '200':
          description: The subbridge_unsubscribeBridge unsubscribes the sub-bridge from the bridge contracts in the parent and child chains.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SubbridgeUnsubscribeBridgeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/subbridge/unsubscribeBridge' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "subbridge_unsubscribeBridge",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a", "0x23dab942822021bbd6d551ef51003208924877e4"]
            }'
components:
  schemas:
    IntegerBlockNumber:
      title: IntegerBlockNumber
      description: the block number with type integer
      type: number
    HexadecimalBlockNumber:
      title: HexadecimalBlockNumber
      type: string
      format: hexadecimal
      description: the block number with type hexadecimal
    BlockTag:
      title: BlockTag
      type: string
      description: the block tag [latest, pending, earliest]
    BlockHash:
      title: BlockHash
      type: string
      format: 32-byte DATA
      description: the block hash
    BlockNumberOrHashOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
        - $ref: '#/components/schemas/BlockHash'
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int64
          description: Request ID, Random or Auto incrementation
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    KlayAccountCreatedReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_accountCreated
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Account
                format: 20-byte DATA
                description: Address
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xa4f42d4d2a3a13874406435500950c9bf2d783db'
            - latest
    ErrorMember:
      type: object
      title: ErrorMember
      required:
        - code
      properties:
        code:
          type: integer
          format: int64
          example: -32700
          description: |
            A Number that indicates the error type that occurred.
            This MUST be an integer.

            | code | message | description |
            |-----|-----|-------|
            | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |
            |-32602 | Invalid params | Invalid method parameter(s). |
        message:
          type: string
          example: Parse error
          description: |
            A String providing a short description of the error.
            The message SHOULD be limited to a concise single sentence.
        data:
          type: string
          description: |
            A Primitive or Structured value that contains additional information about the error.
            This may be omitted.
            The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          $ref: '#/components/schemas/ErrorMember'
        result: {}
    Address:
      title: Address
      type: string
      format: 20-byte DATA
      description: Address
    KlayAccountsResp:
      type: object
      properties:
        result:
          type: array
          description: Addresses owned by the client
          items:
            $ref: '#/components/schemas/Address'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    KlayDecodeAccountKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_decodeAccountKey
        params:
          type: array
          description: RLP encoded account key
          items:
            title: EncodedAccountKey
            type: string
            format: DATA
          example:
            - '0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447'
    KlayDecodeAccountKeyResp:
      type: object
      properties:
        result:
          type: object
          required:
            - keytype
            - key
          properties:
            keytype:
              type: number
              description: Integer value indicating account key type.
            key:
              type: array
              items:
                type: object
              description: Account key object
          example:
            key:
              - key:
                  x: '0xe4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512d'
                  'y': '0xa5735a23ce1654b14680054a993441eae7c261983a56f8e0da61280758b5919'
                keyType: 2
              - key:
                  keys:
                    - key:
                        x: '0xe4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512d'
                        'y': '0xa5735a23ce1654b14680054a993441eae7c261983a56f8e0da61280758b5919'
                      weight: 1
                    - key:
                        x: '0x36f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06'
                        'y': '0x6fdf9fc87a16ac359e66d9761445d5ccbb417fb7757a3f5209d713824596a50d'
                      weight: 1
                  threshold: 2
                keyType: 4
              - key:
                  x: '0xc8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447'
                  'y': '0x94c27901465af0a703859ab47f8ae17e54aaba453b7cde5a6a9e4a32d45d72b2'
                keyType: 2
            keyType: 5
    KlayEncodeAccountKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_encodeAccountKey
        params:
          type: array
          items:
            type: object
            properties:
              keytype:
                type: integer
                description: Integer value indicating account key type. For the value of each account key type, see AccountKey.
              key:
                type: object
                description: Account key object
          example:
            - keyType: 1
              key: {}
    KlayEncodeAccountKeyResp:
      type: object
      properties:
        result:
          type: string
          description: RLP encoded account key
          format: DATA
          example: '0x01c0'
    KlayGetAccountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getAccount
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    AccountKeyLegacy:
      title: AccountKeyLegacy
      type: object
      required:
        - key
        - keyType
      description: AccountKeyLegacy is used for the account having an address derived from the corresponding key pair
      properties:
        key:
          type: object
        keyType:
          type: integer
          description: The type of AccountKeyLegacy. This must be 0x01.
    AccountKeyNil:
      title: AccountKeyNil
      type: string
    AccountKeyPublic:
      title: AccountKeyPublic
      type: object
      required:
        - key
        - keyType
      description: AccountKeyPublic is used for accounts having one public key.
      properties:
        key:
          type: object
          required:
            - x
            - 'y'
          description: Key should be a compressed public key on S256 curve.
          properties:
            x:
              type: string
              format: 32-byte DATA
              description: The x coordinate of the public key.
            'y':
              type: string
              format: 32-byte DATA
              description: The y coordinate of the public key.
        keyType:
          type: integer
          description: The type of AccountKeyPublic. This must be 0x02.
    AccountKeyFail:
      title: AccountKeyFail
      type: object
      required:
        - keyType
        - key
      description: If an account has the key AccountKeyFail, the transaction validation process always fails. It can be used for smart contract accounts so that a transaction sent from the smart contract account always fails.
      properties:
        key:
          type: object
        keyType:
          type: integer
          description: The type of AccountKeyFail. This must be 0x03.
    AccountKeyWeightedMultiSig:
      title: AccountKeyWeightedMultiSig
      type: object
      required:
        - keyType
        - Threshold
        - WeightedPublicKeys
      description: AccountKeyWeightedMultiSig is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.
      properties:
        keyType:
          type: integer
          description: The type of AccountKeyWeightedMultiSig. This must be 0x04.
        Threshold:
          type: integer
          description: Validation threshold. To be a valid transaction, the weight sum of signatures should be larger than or equal to the threshold.
        WeightedPublicKeys:
          type: array
          description: A list of weighted public keys. A weighted public key contains a compressed public key and its weight.
          items:
            type: object
            required:
              - PublicKey
              - Weight
            properties:
              PublicKey:
                type: object
                required:
                  - x
                  - 'y'
                properties:
                  x:
                    type: string
                    format: 32-byte DATA
                    description: The x coordinate of the public key.
                  'y':
                    type: string
                    format: 32-byte DATA
                    description: The y coordinate of the public key.
              Weight:
                type: integer
    AccountKeyRoleBased:
      title: AccountKeyRoleBased
      type: object
      required:
        - keyType
        - key
      description: AccountKeyRoleBased represents a role-based key
      properties:
        key:
          type: array
          description: A list of keys. A key can be any of AccountKeyNil, AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, and AccountKeyWeightedMultiSig
          items:
            anyOf:
              - $ref: '#/components/schemas/AccountKeyNil'
              - $ref: '#/components/schemas/AccountKeyLegacy'
              - $ref: '#/components/schemas/AccountKeyPublic'
              - $ref: '#/components/schemas/AccountKeyFail'
              - $ref: '#/components/schemas/AccountKeyWeightedMultiSig'
        keyType:
          type: integer
          description: The type of AccountKeyRoleBased. This must be 0x05.
    KlayGetAccountResp:
      type: object
      properties:
        result:
          type: object
          description: Each account type has different attributes.
          required:
            - accType
            - account
          properties:
            accType:
              type: number
              default: 1
            account:
              type: object
              properties:
                balance:
                  type: string
                humanReadable:
                  type: boolean
                key:
                  type: object
                  properties:
                    key:
                      oneOf:
                        - $ref: '#/components/schemas/AccountKeyLegacy'
                        - $ref: '#/components/schemas/AccountKeyNil'
                        - $ref: '#/components/schemas/AccountKeyPublic'
                        - $ref: '#/components/schemas/AccountKeyFail'
                        - $ref: '#/components/schemas/AccountKeyWeightedMultiSig'
                        - $ref: '#/components/schemas/AccountKeyRoleBased'
                    keyType:
                      type: number
                nonce:
                  type: number
          example:
            accType: 1
            account:
              balance: 4985316100000000000
              humanReadable: false
              key:
                key:
                  x: '0x230037a99462acd829f317d0ce5c8e2321ac2951de1c1b1a18f9af5cff66f0d7'
                  'y': '0x18a7fb1b9012d2ac87bc291cbf1b3b2339356f1ce7669ae68405389be7f8b3b6'
                keyType: 2
              nonce: 11
    KlayGetAccountKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getAccountKey
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Address
                format: 20-byte DATA
                description: Address
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    KlayGetAccountKeyResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/AccountKeyLegacy'
            - $ref: '#/components/schemas/AccountKeyNil'
            - $ref: '#/components/schemas/AccountKeyPublic'
            - $ref: '#/components/schemas/AccountKeyFail'
            - $ref: '#/components/schemas/AccountKeyWeightedMultiSig'
            - $ref: '#/components/schemas/AccountKeyRoleBased'
          example:
            key:
              x: '0x230037a99462acd829f317d0ce5c8e2321ac2951de1c1b1a18f9af5cff66f0d7'
              'y': '0x18a7fb1b9012d2ac87bc291cbf1b3b2339356f1ce7669ae68405389be7f8b3b6'
            keyType: 2
    KlayGetBalanceReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBalance
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    KlayGetBalanceResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the current balance in peb.
          example: 158972490234375000
    KlayGetCodeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCode
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Account
                format: 20-byte DATA
                description: Address
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b'
            - '0x2'
    KlayGetTransactionCountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionCount
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
            - latest
    KlayGetTransactionCountResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions send from this address.
          example: '0x1'
    schemas-KlayGetTransactionCountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_isContractAccount
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
            - latest
    schemas-KlayGetTransactionCountResp:
      type: object
      properties:
        result:
          type: boolean
          description: true means the input parameter is an existing smart contract address.
          example: true
    KlaySignReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sign
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Account
                format: 20-byte DATA
                description: Address
              - type: string
                title: Message
                format: N-byte DATA
                description: Message to sign
          example:
            - '0x9b2055d370f73ec7d8a03e965129118dc8f5bf83'
            - '0xdeadbeaf'
    KlayGetBlockByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockByHash
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: HashOfBlock
                format: 32-byte DATA
                description: Hash of a block.
              - type: boolean
                title: ReturnTransactionObject
                description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          example:
            - '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
            - true
    KlayBlock:
      type: object
      required:
        - number
        - hash
        - parentHash
        - logsBloom
        - transactionsRoot
        - stateRoot
        - receiptsRoot
        - reward
        - blockScore
        - totalBlockScore
        - extraData
        - size
        - gasUsed
        - timestamp
        - timestampFoS
        - transactions
        - governanceData
        - voteData
        - baseFeePerGas
      description: A block object, or error when no block was found
      properties:
        number:
          type: string
          format: hex
          description: The block number. null when it is pending block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: The bloom filter for the logs of the block. null when it is pending block.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        reward:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the block rewards were given.
        blockScore:
          type: string
          format: hex
          description: Former difficulty. Always 1 in the BFT consensus engine
        totalBlockScore:
          type: string
          format: hex
          description: Integer of the total blockScore of the chain until this block.
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        size:
          type: string
          format: hex
          description: Integer the size of this block in bytes.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        timestamp:
          type: string
          format: hex
          description: The unix timestamp for when the block was collated.
        timestampFoS:
          type: string
          format: hex
          description: The fraction of a second of the timestamp for when the block was collated.
        transactions:
          type: array
          items:
            oneOf:
              - type: string
                format: 32-byte DATA
                description: Hash of a transaction.
              - type: object
                required:
                  - hash
                properties:
                  hash:
                    type: string
                    format: 32-byte DATA
                    description: Hash of the transaction.
                additionalProperties: true
          description: Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter.
        governanceData:
          type: string
          format: DATA
          description: RLP encoded governance configuration
        voteData:
          type: string
          format: DATA
          description: RLP encoded governance vote of the proposer
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas. It has a meaningful value when EthTxTypeCompatible and Magma hardforks are activated.
      example:
        baseFeePerGas: '0x0'
        blockscore: '0x1'
        extraData: '0xda83010800846b6c617989676f312e31362e31338664617277696e0000000000f89ed5949712f943b296758aaae79944ec975884188d3a96b841ddfdf7e2cb0a93538f757f87f23a93ee35df703c781c6f15e31e4978ecdfb3501fc00924372b9a01df2bc452f2a924c242d83580183d131c47e49a25b78f625201f843b841b9b6034d5a8c5f5b057274cda4f427614cd1f448ee781f4c4322861d1361d09d47d6030f2b69a26cb426db984f54e71f8c112fbf882930ccd715d595e8d8307500'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xe882d7a16f38126dc0c507f990b3fe18fa2d3a380002538581327abe96ca6edc'
        logsBloom: '0x
        number: '0x1e67'
        parentHash: '0x28b1c054346c3bd083741c757a750dcabf94b6d50c7f87158753544e96e73550'
        receiptsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        reward: '0x4b2c736fd05c2e2da3ccbd001a395a444f16a861'
        size: '0x272'
        stateRoot: '0xdf9885621c9e6e75912ca94d6987bcb1b54fef0e4a99cbec5e68f1ffc7468a78'
        timestamp: '0x62130beb'
        timestampFoS: '0x0'
        totalBlockScore: '0x1e68'
        transactions: []
        transactionsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        voteData: 0x
    KlayGetBlockByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayBlock'
    BlockNumberOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
    KlayGetBlockByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockByNumber
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - type: boolean
                title: Boolean
                description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    KlayGetBlockByNumberResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayBlock'
    KlayGetBlockReceiptsReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockReceipts
        params:
          type: array
          description: Hash of a block
          items:
            type: string
            title: HashOfBlock
            format: 32-byte DATA
            description: Hash of a block.
          example:
            - '0xdc762ed0274496e2a42278e2648d910d82468687b5415bb5eb058a96a0b93c30'
    KlayGetBlockReceiptsResp:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            description: A Block Receipts
          example:
            - blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
              blockNumber: '0x83db764'
              contractAddress: null
              effectiveGasPrice: '0x5d21dba00'
              feePayer: '0x5e6b99bca5a21818d40d12c56194674989146fc8'
              feePayerSignatures:
                - V: '0x7f5'
                  R: '0xfd3bf3bb2ee88b4a3399c0a87d21d1bd6f87f1510da495dad7d106774d882a95'
                  S: '0x17f88f413d72e15a0352b594bb138f5150c0eb68b673a56852f25d0d3a01f161'
              from: '0x95b4cef2d1d6a0b22b339306cea3aff74548cf83'
              gas: '0x61a80'
              gasPrice: '0xba43b7400'
              gasUsed: '0x23b6e'
              input: '0x202ee0ed000000000000000000000000000000000000000000000000000000000000e92d000000000000000000000000000000000000000000000000000000172f6e3700'
              logs:
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                    - '0x00000000000000000000000095b4cef2d1d6a0b22b339306cea3aff74548cf83'
                  data: '0x0000000000000000000000000000000000000000000000000000000065518cbe'
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x0'
                  removed: false
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x92e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c'
                    - '0x000000000000000000000000000000000000000000000000000000172f6e3700'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                    - '0x00000000000000000000000095b4cef2d1d6a0b22b339306cea3aff74548cf83'
                  data: 0x
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x1'
                  removed: false
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f'
                    - '0x000000000000000000000000000000000000000000000000000000172f6e3700'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                  data: '0x0000000000000000000000000000000000000000000000000000000065518cbe'
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x2'
                  removed: false
              logsBloom: '0x00000000000000000020000000000000400000000000000000000000000000000000000000000000040000000020000000000000000200000000000000000000000000000000000000000000002000000000000001000000000100000000000000000000000000001000000000000001000000000400000000008000100000000000000000000000000000000000000000000c80000000000000000000000000000000001000000000000000000000000000000000000000000400000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000'
              nonce: '0xe92c'
              senderTxHash: '0x557b98f94afd1270ba13c9f71c0b9ab862437ff155850a63d798156641b62368'
              signatures:
                - V: '0x7f5'
                  R: '0xc8817da92672f512af1573d50f998abd785013ba077760f7496550c0b98ea200'
                  S: '0x16d5a6a393488f002d63596f55d7b3c2425feff71df23cf44f90d48c88841529'
              status: '0x1'
              to: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
              transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
              transactionIndex: '0x0'
              type: TxTypeFeeDelegatedSmartContractExecution
              typeInt: 49
              value: '0x0'
    KlayGetBlockTransactionCountByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockTransactionCountByNumber
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xe8'
    KlayGetBlockWithConsensusInfoByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockWithConsensusInfoByHash
        params:
          type: array
          description: Hash of a block.
          items:
            $ref: '#/components/schemas/BlockHash'
          example:
            - '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
    BlockWithConsensusInfo:
      type: object
      required:
        - blockScore
        - totalBlockScore
        - committee
        - gasUsed
        - hash
        - number
        - parentHash
        - proposer
        - receiptsRoot
        - size
        - stateRoot
        - timestamp
        - timestampFoS
        - transactions
        - transactionsRoot
        - baseFeePerGas
      properties:
        blockScore:
          type: string
          format: hex
          description: Former difficulty. Always 1 in the BFT consensus engine
        totalBlockScore:
          type: string
          format: hex
          description: Integer of the total blockScore of the chain until this block.
        committee:
          type: array
          items:
            type: string
          description: Array of addresses of committee members of this block. The committee is a subset of validators participated in the consensus protocol for this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is pending block.
        number:
          type: string
          format: hex
          description: The block number. null when it is pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        proposer:
          type: string
          format: 20-byte DATA
          description: Address of the proposer.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        size:
          type: string
          format: hex
          description: Integer the size of this block in bytes.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        timestampFoS:
          type: string
          format: hex
          description: The fraction of a second of the timestamp for when the block was collated.
        transactions:
          type: array
          items:
            type: object
          description: Array of transaction objects.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas. It has a meaningful value when EthTxTypeCompatible and Magma hardforks are activated.
      example:
        baseFeePerGas: '0x5d21dba00'
        blockscore: '0x1'
        committee:
          - '0xe783fc94fddaeebef7293d6c5864cff280f121e1'
          - '0x8a88a093c05376886754a9b70b0d0a826a5e64be'
          - '0xf113ec8c22765d485309cf1d025d1b975245b9f8'
          - '0xe3d92072d8b9a59a0427485a1b5f459271df457c'
          - '0xa2ba8f7798649a778a1fd66d3035904949fec555'
          - '0x2bdd279522b8a0843831fbb94cfbb24a913597c5'
          - '0x9419fa2e3b9eb1158de31be66c586a52f49c5de7'
          - '0xc032c34cb9fe064fe435199e1078dd8756a166b5'
          - '0x56e8c1463c341abf8b168c3079ea41ce8a387e18'
          - '0x6873352021fe9226884616dc6f189f289aeb0cc5'
          - '0xe93a890fb7ec5e993b1a7fd77b0d13a0763eff3d'
          - '0xbca8ffa45cc8e30bbc0522cdf1a1e0ebf540dfe2'
          - '0x386ca3cb8bb13f48d1a6adc1fb8df09e7bb7f9c8'
          - '0x1782834bf8847e235f21f2c1f13fca4d5dff6621'
          - '0x6f6770f1f67f44fb15b335b49581ad6b935d963a'
          - '0x0b59cae1f03534209fdb9ddf5ea65b310cd7060c'
          - '0xb9456fd65a6810b19df24832c50b2e61a41867f8'
          - '0x16c192585a0ab24b552783b4bf7d8dc9f6855c35'
          - '0xec6c1cede510be308f0fdbbc8dbdf238829bdb34'
          - '0xf8c9c61c5e7f2b6219d1c28b94e5cb3cdc802594'
          - '0x5e59db28cef098d5a2e877f84127aed10d7378f2'
          - '0x52d41ca72af615a1ac3301b0a93efa222ecc7541'
        extraData: '0xd883010101846b6c617988676f312e31322e35856c696e757800000000000000f90604f901ce9452d41ca72af615a1ac3301b0a93efa222ecc7541948a88a093c05376886754a9b70b0d0a826a5e64be94f113ec8c22765d485309cf1d025d1b975245b9f894e3d92072d8b9a59a0427485a1b5f459271df457c94a2ba8f7798649a778a1fd66d3035904949fec555942bdd279522b8a0843831fbb94cfbb24a913597c594bca8ffa45cc8e30bbc0522cdf1a1e0ebf540dfe294c032c34cb9fe064fe435199e1078dd8756a166b59456e3a565e31f8fb0ba0b12c03355518c64372120946f6770f1f67f44fb15b335b49581ad6b935d963a94e93a890fb7ec5e993b1a7fd77b0d13a0763eff3d94e783fc94fddaeebef7293d6c5864cff280f121e194386ca3cb8bb13f48d1a6adc1fb8df09e7bb7f9c8941782834bf8847e235f21f2c1f13fca4d5dff6621949419fa2e3b9eb1158de31be66c586a52f49c5de7940b59cae1f03534209fdb9ddf5ea65b310cd7060c94b9456fd65a6810b19df24832c50b2e61a41867f89416c192585a0ab24b552783b4bf7d8dc9f6855c3594ec6c1cede510be308f0fdbbc8dbdf238829bdb3494f8c9c61c5e7f2b6219d1c28b94e5cb3cdc802594946873352021fe9226884616dc6f189f289aeb0cc59456e8c1463c341abf8b168c3079ea41ce8a387e18b8418890007a341ee171ba8d5e3cb546d1d927c8202f0df3c3f381c8173eb36db41305227c289fb528a4614b1a2c04a7ec5a1b5d76f62b829496aa36979e88a9610c01f903edb841f0ba93ac8e28a021e582e50abbaa24fa5174674b3b0873dc568f6c9ebaf830bb4d03b857416304f97b4314e310f66f6c8043e716e70751bc9663dd6f9e5d6a9100b84174717204aa9d9f2dcb1269c89141ec2ee9d447e1981e8a704caa5a6ce376b0901f3e0ddf0ebe08542af86b23637df2f962b0f7ced5469cea310cb71c2358357300b841aa3aa8b450a6f4d883dcf2eda0f964ff4d35a250996b34aa91279c9c7f4383a22c879e2f21c9fddf8c3b1a6cbc59b273b4a0daf4b15aaf18f5e33e70c9277e6f00b8414adbeaaf82da005a33f00e7f74a3eeecb989698968b3694ea9e74018a0836184188eca727900280734ead256af02e72679addcddbf5ebd82c04c030c2bd85f4a01b841610b61422badd11afa2a617502f81c0c8aa1f11951d80893976a391026a3859c1f5e6c6d28e8b2ca8c4281c699b7b8ec30625801d4a6637291f9a8d1a2d8244f00b8417590e3d92063d4162f49493848ef0557daba3c2d82b9498eda09d5d08837296937a69e7b852579eeadf1c077d3b80d232ece03a12f4c45896e518cbb0771c52700b8415a2a40f416154793535cfe133040236ecc8b1f276df39e0a3713992fad06e38a42a455a636add93bff218544a4c53b852b8c4e461d3ae0663fdefe8fe7e327cc00b841e0c64cc8a30d84196d57639a42c5da941164b0700476d1b91d18f7c8f58d12f932ad1362270ec968294257f9c5cb60c40a7d4a5932a8f4d537be4db51f7dcf2500b841f61b6f014628ab751d79f095b1e739bc2b31fa8b6b847878e13b000a6dd53fa8467903119a72c7445f8490cf4932a42f4a418b89436b70d100c56c083399579500b841e6fe4f7c4bdcb4a81125bd282d0b9fedf1f51636c69bd4684d3131d685a7aed34face3d943d02b6ad632bb337f89fd6b0fb08e163ef84bb87fe556f4bafa0d3401b8412c6666136414f88327e07a6e8a2b04d105d6cf64daee239cea647a25f93ce0e6542f59f4363e3522bc838841e6db1940e569938b9458fb674fd543646a6b669b00b84134f967c4060d85a7c2f65d00695f3308d2ab78033e895775e0ab6f70cc6e71081c030bd997773191b3d2d7e5425e542c3b98fc127031784a858cf497c0e1532100b841d81aedf218d33e12087fb6c71b1d76e69dde542659c85661909b8c99793c7f1535afdc8addaefc5bcf6a3f99fd34518a1e9ab4a73ec9921e9865c1bd8543fd4c01b84199ec6f0fca02e48db37f0e4ae1b2fdf643abf610a9f1d7c0b490250aa7f1393d3069d1b4cec74ee99b0e18081bbf5e03d7b918d46499d579459cf0114ff76e9301b841d81a55eb96767edc5305dac78b904f70d2f44bd845fcd2bd581778669e5b8446220143680619986b9975ea528aacec0976406424588760f4fe086f16abaaaf4600'
        gasUsed: '0x1d065'
        governanceData: 0x
        hash: '0x7d68d09a7a571cdf8a3b6a5ef6e037265b3e3093cf145b0954d22bde5c1d4f61'
        logsBloom: '0x
        number: '0x6e0431'
        parentHash: '0xa76ef625874a4d2126eb3fd1ebb5c1a8d0deb360a12b4f8edf30fb417d82b5a1'
        proposer: '0xe783fc94fddaeebef7293d6c5864cff280f121e1'
        receiptsRoot: '0x56734b337c3daab6766104bb51bd2ca408cf4537f5528ab3362536c57e65ba67'
        reward: '0x79f83dbb81f6f706be3e8491b14790c30d03e659'
        size: '0x947'
        stateRoot: '0xf685dce2cbef004cb041cf23959aea65e8aa86911fac55739ae1971f7d1dacd4'
        timestamp: '0x5d801768'
        timestampFoS: '0x4'
        totalBlockScore: '0x6e0432'
        transactions:
          - blockHash: '0x7d68d09a7a571cdf8a3b6a5ef6e037265b3e3093cf145b0954d22bde5c1d4f61'
            blockNumber: '0x6e0431'
            contractAddress: null
            feePayer: '0x08260736c18bd8612bee2b21beedf4e97c0bc6b9'
            feePayerSignatures:
              - V: '0x4055'
                R: '0xd3fdd58e18e5a96d1f9af3d1aff31601d8e543a8085c78edfc8602db4c91b3c6'
                S: '0x19d937e315472a188f11a6bb87f47e66a30b44ba907b5f01fcd47dab8d99f3f0'
            from: '0x84b605b268e89ccdf591974db82deaa48bce59dc'
            gas: '0x419ce0'
            gasPrice: '0x5d21dba00'
            gasUsed: '0x1d065'
            input: '0x50716652000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000013416c50000000000000000000000000000000000000000000000000000000000001f3f000000000000000000000000000000000000000000000000000000003b9af23c'
            logs: []
            logsBloom: '0x
            nonce: '0x8'
            senderTxHash: '0x5fe7485db56c0c2b0eb54dd46e584a413193ad66b40e69281f44dadfa7409b2e'
            signatures:
              - V: '0x4056'
                R: '0xca32239c38e1080f3a394504e2a0bb9811cda0a87d25b750cbbab265d581074d'
                S: '0x584ab136a483e755d9d458f9965ca0d514724c7b45f6123d19323f6fa7ccdb5f'
            status: '0x1'
            to: '0x1db1b93447328dd904152f798ead97987844f7b7'
            transactionHash: '0x020a2156bb4b29dc84f26887efae79e07a3d738b2856a66bbaab8aee18d507b5'
            transactionIndex: '0x0'
            type: TxTypeFeeDelegatedSmartContractExecution
            typeInt: 49
            value: '0x0'
        transactionsRoot: '0x020a2156bb4b29dc84f26887efae79e07a3d738b2856a66bbaab8aee18d507b5'
        voteData: 0x
    KlayGetBlockWithConsensusInfoByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BlockWithConsensusInfo'
    KlayGetBlockWithConsensusInfoByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockWithConsensusInfoByNumber
        params:
          type: array
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x6e0431'
    KlayGetBlockWithConsensusInfoByNumberResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BlockWithConsensusInfo'
    KlayGetBlockWithConsensusInfoByNumberRangeReq:
      type: object
      properties:
        method:
          type: string
          default: klay_getBlockWithConsensusInfoByNumberRange
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
              - type: number
                title: Range
    KlayGetBlockWithConsensusInfoByNumberRangeResp:
      type: object
      properties:
        result:
          type: object
          properties:
            blockscore:
              type: string
            committee:
              type: array
              items:
                type: string
            extraData:
              type: string
            gasUsed:
              type: string
            governanceData:
              type: string
            hash:
              type: string
            logsBloom:
              type: string
            number:
              type: string
            parentHash:
              type: string
            proposer:
              type: string
            receiptsRoot:
              type: string
            reward:
              type: string
            size:
              type: string
            stateRoot:
              type: string
            timestamp:
              type: string
            timestampFoS:
              type: string
            totalBlockScore:
              type: string
            transactions:
              type: array
              items:
                type: object
                properties:
                  blockHash:
                    type: string
                  blockNumber:
                    type: string
                  contractAddress:
                    type: string
                  from:
                    type: string
                  gas:
                    type: string
                  gasPrice:
                    type: string
                  gasUsed:
                    type: string
                  logs:
                    type: array
                    items:
                      type: object
                  logsBloom:
                    type: string
                  nonce:
                    type: string
                  senderTxHash:
                    type: string
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        V:
                          type: string
                        R:
                          type: string
                        S:
                          type: string
                  status:
                    type: string
                  to:
                    type: string
                  transactionHash:
                    type: string
                  transactionIndex:
                    type: string
                  type:
                    type: string
                  typeInt:
                    type: integer
                  value:
                    type: string
            transactionsRoot:
              type: string
            voteData:
              type: string
          description: Object - A block object with consensus information (a proposer and a list of committee members)
          example:
            blockscore: '0x1'
            committee:
              - '0x715dd3ce7a285f21111715a2ba5537414d40506b'
              - '0x71959675eeb7c7ec1e0c74f206a9c488d7f178d4'
            extraData: '0xd7820a01846b6c617988676f312e31312e32856c696e75780000000000000000f8b3ea94715dd3ce7a285f21111715a2ba5537414d40506b9471959675eeb7c7ec1e0c74f206a9c488d7f178d4b8418e55cfb464eed804671bbee503f2dcacae9349f23aa3c42fc43349f96ef08bb07c1039541a3b768af32384c8e29ec7e673356a6b0ea4c6d88604ae8abae4303201f843b841386a3fbd09cd3a7c82c0b8fdc9ae8c3e624be5f12553dde42bed456093e40c113aa36fb7015b578611e2cd2ee979e6017b15be7d3cc645f455b32e8607c85d7100'
            gasUsed: '0x5208'
            governanceData: 0x
            hash: '0x6ccef34eb59fab927705d344f080f449b576c0626e4aa3e20f569feb8df6e283'
            logsBloom: '0x
            number: '0x4a99'
            parentHash: '0x3b56b598828368d86b175a78ba21845125372851154840c6b1b318da910849c2'
            proposer: '0x715dd3ce7a285f21111715a2ba5537414d40506b'
            receiptsRoot: '0xe38e5532717f12f769b07ea016014bd39b74fb72def4de8442114cc2728609f2'
            reward: '0x59e6931f46b091f4ecbc39e8626fc0be7d3fcdeb'
            size: '0x314'
            stateRoot: '0xc65b3e3f1c32c33c095507d6d37e2a8a5589b178b5b03a1365295908ac92c40c'
            timestamp: '0x5d11f951'
            timestampFoS: '0x0'
            totalBlockScore: '0x4a9a'
            transactions:
              - blockHash: '0x6ccef34eb59fab927705d344f080f449b576c0626e4aa3e20f569feb8df6e283'
                blockNumber: '0x4a99'
                contractAddress: null
                from: '0x71959675eeb7c7ec1e0c74f206a9c488d7f178d4'
                gas: '0x493e0'
                gasPrice: '0x5d21dba00'
                gasUsed: '0x5208'
                logs: []
                logsBloom: '0x
                nonce: '0x2'
                senderTxHash: '0xac418c96f7386a3343d149eeb29e48e28905525dda2e5afe55b0661f9ab01aca'
                signatures:
                  - V: '0x4e43'
                    R: '0xa857ef0676d7e65697cadeaf1654b2facd71d0b9f942d695f3972a1f7c34c25c'
                    S: '0x43fba9e5c2c16511f951e27957f1279ea3c1f913b27f9fbb2a8dcb5884e37e3d'
                status: '0x1'
                to: '0xef5cd886c7f8d85fbe8023291761341acbb4da01'
                transactionHash: '0xac418c96f7386a3343d149eeb29e48e28905525dda2e5afe55b0661f9ab01aca'
                transactionIndex: '0x0'
                type: TxTypeValueTransfer
                typeInt: 8
                value: '0xde0b6b3a7640000'
            transactionsRoot: '0xac418c96f7386a3343d149eeb29e48e28905525dda2e5afe55b0661f9ab01aca'
            voteData: 0x
    KlayGetCommitteeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCommittee
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetCommitteeResp:
      type: object
      properties:
        result:
          type: array
          description: Addresses of all validators in the committee.
          items:
            type: string
            format: hex
            example: '0x207e38864b45a538733741dc1ff92eff9d1a6159'
    KlayGetCommitteeSizeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCommitteeSize
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetCouncilReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCouncil
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetCouncilResp:
      type: object
      properties:
        result:
          description: Addresses of all validators of the council.
          type: array
          items:
            type: string
            format: hex
            description: Addresses of all validators of the council
            example: '0x207e38864b45a538733741dc1ff92eff9d1a6159'
    KlayGetCouncilSizeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCouncilSize
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetHeaderByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getHeaderByHash
        params:
          type: array
          description: Hash of a block.
          items:
            type: string
            title: HashOfBlock
            format: 32-byte DATA
            description: Hash of a block.
          example:
            - '0x1b4'
    KlayHeaderObject:
      title: KlayHeaderObject
      type: object
      description: The block header object.
      required:
        - parentHash
        - hash
        - transactionsRoot
        - stateRoot
        - receiptsRoot
        - reward
        - blockScore
        - extraData
        - gasUsed
        - timestamp
        - timestampFoS
        - governanceData
        - voteData
        - baseFeePerGas
      properties:
        number:
          type: string
          format: hex
          nullable: true
          description: The block number. null when its pending block.
        hash:
          type: string
          format: 32-byte DATA
          nullable: true
          description: Hash of the block. null when it is pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        logsBloom:
          type: string
          format: 256-byte DATA
          nullable: true
          description: The bloom filter for the logs of the block. null when it is pending block.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        reward:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the block rewards were given.
        blockScore:
          type: string
          format: hex
          description: Former difficulty. Always 1 in the BFT consensus engine
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        timestampFoS:
          type: string
          format: hex
          description: The fraction of a second of the timestamp for when the block was collated.
        governanceData:
          type: string
          format: DATA
          description: RLP encoded governance configuration
        voteData:
          type: string
          format: DATA
          description: RLP encoded governance vote of the proposer
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas. It has a meaningful value when EthTxTypeCompatible and Magma hardforks are activated.
      example:
        baseFeePerGas: '0x5d21dba00'
        blockScore: '0x1'
        extraData: '0xda83010800846b6c617989676f312e31362e31338664617277696e0000000000f89ed5949712f943b296758aaae79944ec975884188d3a96b841ddfdf7e2cb0a93538f757f87f23a93ee35df703c781c6f15e31e4978ecdfb3501fc00924372b9a01df2bc452f2a924c242d83580183d131c47e49a25b78f625201f843b841b9b6034d5a8c5f5b057274cda4f427614cd1f448ee781f4c4322861d1361d09d47d6030f2b69a26cb426db984f54e71f8c112fbf882930ccd715d595e8d8307500'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xe882d7a16f38126dc0c507f990b3fe18fa2d3a380002538581327abe96ca6edc'
        logsBloom: '0x
        number: '0x1e67'
        parentHash: '0x28b1c054346c3bd083741c757a750dcabf94b6d50c7f87158753544e96e73550'
        receiptsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        reward: '0x4b2c736fd05c2e2da3ccbd001a395a444f16a861'
        stateRoot: '0xdf9885621c9e6e75912ca94d6987bcb1b54fef0e4a99cbec5e68f1ffc7468a78'
        timestamp: '0x62130beb'
        timestampFoS: '0x0'
        transactionsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
    KlayGetHeaderByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayHeaderObject'
    KlayGetHeaderByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getHeaderByNumber
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetHeaderByNumberResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayHeaderObject'
    KlayGetRewardsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: klay_getRewards
        params:
          type: array
          default:
            - latest
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
    KlayGetRewardsResp:
      type: object
      properties:
        result:
          type: object
          required:
            - burntFee
            - kgf
            - kir
            - minted
            - proposer
            - rewards
            - stakers
            - totalFee
          properties:
            burntFee:
              type: integer
              format: int64
              description: the amount burnt
            kgf:
              type: integer
              format: int64
              description: the amount allocated to KGF
            kir:
              type: integer
              format: int64
              description: the amount allocated to KIR
            minted:
              type: number
              format: double
              description: the amount newly minted
              example: 9600000000000000000
            proposer:
              type: number
              format: double
              description: the amount allocated to the block proposer
              example: 9600000000000000000
            rewards:
              type: object
              description: mapping from reward recipient to amounts
              additionalProperties:
                type: number
                format: double
              example:
                '1.0278187497989767e+48': 9600000000000000000
            stakers:
              type: integer
              format: int64
              description: total amount allocated to stakers
            totalFee:
              type: integer
              format: int64
              description: total tx fee spent
    KlayGetStorageAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getStorageAt
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: StorageAddress
                format: 20-byte DATA
                description: Address of the storage.
              - type: string
                title: Position
                format: hex
                description: Integer of the position in the storage.
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x295a70b2de5e3953354a6a8344e616ed314d7251'
            - '0x0'
            - latest
    SyncingObject:
      title: SyncingObject
      type: object
      required:
        - startingBlock
        - currentBlock
        - highestBlock
        - pulledStates
        - knownStates
      properties:
        startingBlock:
          type: string
          format: hex
          description: The block at which the import started (will only be reset, after the sync reached his head).
        currentBlock:
          type: string
          format: hex
          description: The current block, same as klay_blockNumber.
        highestBlock:
          type: string
          format: hex
          description: The estimated highest block.
        pulledStates:
          type: string
          format: hex
          description: The number of state entries processed until now. If the sync mode is not "fast", zero is returned.
        knownStates:
          type: string
          format: hex
          description: The number of known state entries that still need to be pulled. If the sync mode is not "fast", zero is returned.
      example:
        currentBlock: '0x3e31e'
        highestBlock: '0x827eef'
        knownStates: '0x0'
        pulledStates: '0x0'
        startingBlock: '0x0'
    KlaySyncingResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/SyncingObject'
            - type: boolean
              example: false
    KlayCallObject:
      title: KlayCallObject
      type: object
      description: The transaction call object. See the next table for the object's properties.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: (optional) The address the transaction is sent from.
        to:
          type: string
          format: 20-byte DATA
          description: (optional when testing the deployment of a new contract) The address the transaction is directed to.
        gas:
          type: string
          format: hex
          description: (optional) Integer of the gas provided for the transaction execution. klay_call consumes zero gas, but this parameter may be needed by some executions.
        gasPrice:
          type: string
          format: hex
          description: (optional) Integer of the gasPrice used for each paid gas.
        value:
          type: string
          format: hex
          description: (optional) Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: (optional) Hash of the method signature and encoded parameters. It replaces data field, but 'data` field is still supported for backward compatibility.
    KlayCallReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_call
        params:
          type: array
          items:
            anyOf:
              - allOf:
                  - title: CallObject
                  - $ref: '#/components/schemas/KlayCallObject'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x3f71029af4e252b25b9ab999f77182f0cd3bc085'
              to: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              gas: '0x100000'
              gasPrice: '0x5d21dba00'
              value: '0x0'
              input: '0x8ada066e'
            - latest
    KlayCallResp:
      type: object
      properties:
        result:
          type: string
          format: DATA
          description: The return value of executed contract.
          example: '0x000000000000000000000000000000000000000000000000000000000000000a'
    KlayCreateAccessListReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_createAccessList
        params:
          type: array
          items:
            anyOf:
              - allOf:
                  - title: CallObject
                    description: A transaction call object. Please see caver.rpc.klay.call parameters.
                  - $ref: '#/components/schemas/KlayCallObject'
              - title: blockParameter
                description: (optional) A block number, blockhash or the block tag string (latest or earliest). If omitted, latest will be used.
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312'
              to: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'
              gas: '0x3d0900'
              gasPrice: '0x3b9aca00'
              data: '0x20965255'
            - latest
    KlayCreateAccessListResp:
      type: object
      properties:
        result:
          type: object
          required:
            - accessList
            - gasUsed
          properties:
            accessList:
              type: array
              items:
                type: object
                required:
                  - oldestBlock
                  - reward
                  - baseFeePerGas
                  - gasUsedRatio
                properties:
                  oldestBlock:
                    type: string
                    description: Lowest number block of returned range.
                  reward:
                    description: A two-dimensional array of effective priority fees per gas at the requested block percentiles.
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                  baseFeePerGas:
                    description: An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.
                    type: array
                    items:
                      type: string
                  gasUsedRatio:
                    description: An array of gasUsed/gasLimit in the block.
                    type: array
                    items:
                      type: string
                      format: hex
            gasUsed:
              type: string
              format: hex
          example:
            accessList: []
            gasUsed: '0x0'
    KlayEstimateComputationCostReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_estimateComputationCost
        params:
          type: array
          items:
            anyOf:
              - allOf:
                  - title: CallObject
                  - $ref: '#/components/schemas/KlayCallObject'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x73718c4980728857f3aa5148e9d1b471efa3a7dd'
              to: '0x069942a3ca0dabf495dba872533134205764bc9c'
              value: '0x0'
              input: '0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039'
            - latest
    KlayEstimateGasReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_estimateGas
        params:
          type: array
          items:
            allOf:
              - title: callObject
              - $ref: '#/components/schemas/KlayCallObject'
          example:
            - from: '0x3f71029af4e252b25b9ab999f77182f0cd3bc085'
              to: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              gas: '0x100000'
              gasPrice: '0x5d21dba00'
              value: '0x0'
              input: '0x8ada066e'
    KlayEstimateGasResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: The amount of gas used.
          example: '0x5208'
    KlayGetDecodedAnchoringTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getDecodedAnchoringTransactionByHash
        params:
          type: array
          description: Hash of a transaction.
          items:
            type: string
            format: 32-byte DATA
            title: HashOfTransaction
            description: Hash of a transaction.
          example:
            - '0x499350bc5e2f6fee1ba78b4d40a7a1db0a64f3c091112e6798a02ed9a4140084'
    KlayGetDecodedAnchoringTransactionByHashResp:
      title: KlayGetDecodedAnchoringTransactionByHashResp
      type: object
      properties:
        result:
          type: object
          required:
            - BlockHash
            - BlockNumber
            - ParentHash
            - TxHash
            - StateRootHash
            - ReceiptHash
            - BlockCount
            - TxCount
          properties:
            BlockHash:
              type: string
              format: 32-byte DATA
              description: Hash of the child chain block that this anchoring transaction was performed.
            BlockNumber:
              type: number
              description: The child chain block number that this anchoring transaction was performed.
            ParentHash:
              type: string
              format: 32-byte DATA
              description: Hash of the parent block.
            TxHash:
              type: string
              format: 32-byte DATA
              description: The root of the transaction trie of the block.
            StateRootHash:
              type: string
              format: 32-byte DATA
              description: The root of the final state trie of the block.
            ReceiptHash:
              type: string
              format: 32-byte DATA
              description: The root of the receipts trie of the block.
            BlockCount:
              type: number
              description: The number of blocks generated during this anchoring period. In most cases, this number is equal to the child chain's SC_TX_PERIOD, with the exception of the case that this transaction was the first anchoring tx after turning on the anchoring.
            TxCount:
              type: number
              description: The number of transactions generated in the child chain during this anchoring period.
          example:
            BlockCount: 1
            BlockHash: '0xcf5f591836d70a1da8e6bb8e5b2c5739329ca0e535b91e239b332af2e1b7f1f4'
            BlockNumber: 1055
            ParentHash: '0x70f6115a5b597f29791d3b5e3f129df54778f69ae669842cc81ec8c432fee37c'
            ReceiptHash: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
            StateRootHash: '0x654773348f77a6788c76c93946340323c9b39399d0aa173f6b23fe082848d056'
            TxCount: 0
            TxHash: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
    KlayGetRawTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getRawTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            anyOf:
              - title: BlockHash
                type: string
                format: hex
                description: Hex representation of a Keccak 256 hash
              - title: Index
                description: Hex representation of a uint
                type: string
                format: hex
          example:
            - '0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6'
            - '0x20965255'
    KlayGetRawTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Hex representation of some bytes
          title: dataWord
          example: 0x
    KlayGetRawTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getRawTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
              - type: string
                format: hex
                title: TransactionIndex
                description: The transaction index position.
          example:
            - '0x27'
            - '0x0'
    KlayGetRawTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          type: string
          description: Hex representation of some bytes
          example: '0x0'
    KlayGetRawTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getRawTransactionByHash
        params:
          type: array
          items:
            title: hash
            type: string
            format: hex
          description: Hex representation of a Keccak 256 hash
          example:
            - '0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6'
    KlayGetRawTransactionByHashResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          title: dataWord
          description: Hex representation of some bytes
          example: 0x
    KlayGetTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            anyOf:
              - type: string
                format: 32-byte DATA
                title: BlockHash
                description: Hash of a block.
              - type: string
                format: hex
                title: TransactionIndexPosition
                description: Integer of the transaction index position.
          example:
            - '0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68'
            - '0x0'
    Signature:
      title: Signature
      type: object
      required:
        - V
        - R
        - S
      properties:
        V:
          type: string
        R:
          type: string
        S:
          type: string
    TransactionObject:
      title: TransactionObject
      type: object
      description: Transaction object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - hash
        - nonce
        - senderTxHash
        - signatures
        - to
        - transactionIndex
        - type
        - typeInt
        - value
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        codeFormat:
          type: string
          description: (optional) The code format of smart contract code.
        feePayer:
          type: string
          format: 20-byte DATA
          description: (optional) Address of the fee payer.
        feePayerSignatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        feeRatio:
          type: string
          format: hex
          description: (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        humanReadable:
          type: boolean
          description: (optional) true if the address is humanReadable, false if the address is not humanReadable.
        key:
          type: string
          description: (optional) Key of the newly created account.
        input:
          type: string
          format: DATA
          description: (optional) The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        senderTxHash:
          type: string
          format: 32-byte DATA
          description: Hash of a transaction that is signed only by the sender. See SenderTxHash. This value is always the same as hash for non fee-delegated transactions.
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transactions index position in the block. null when it is pending.
        type:
          type: string
          description: A string representing the type of the transaction.
        typeInt:
          type: number
          description: An integer representing the type of the transaction.
        value:
          type: string
          format: hex
          description: Value transferred in peb.
      example:
        blockHash: '0x4d97cf1f686a925ed4f1ad42c635cedb54974fe23a2941c7825e1ed3163c0e41'
        blockNumber: '0x7008'
        feePayer: '0xa9d2cc2bb853163b6eadfb6f962d72f7e00bc2e6'
        feePayerSignatures:
          - V: '0x4e44'
            R: '0xa665e17d92e1c671c8b062cecb19790d49138a21854fc15c460c91035b1884e'
            S: '0x17165688acc01736f1221a39399e3aac7e1ece14731fcab31631e3e4a59b7441'
        from: '0xab0833d744a8943fe3c783f9cc70c13cbd70fcf4'
        gas: '0xdbba0'
        gasPrice: '0x5d21dba00'
        hash: '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
        nonce: '0x26'
        senderTxHash: '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
        signatures:
          - V: '0x4e44'
            R: '0x1b6bb3d996d903d0528565d13e8d9d122b2220ed09c5baf384114193a6977027'
            S: '0x20c506ce9f1bdd42183c40c44f414a3930f339f856e8be3cfcdf5ca0852fd378'
        to: '0x15a9119104e1bf0ec6d408b3cc188685e4402a2c'
        transactionIndex: '0x0'
        type: TxTypeFeeDelegatedValueTransfer
        typeInt: 9
        value: '0x1'
    KlayGetTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - type: string
                format: hex
                title: TransactionIndex
                description: The transaction index position.
          example:
            - 118593751
            - '0x0'
    KlayGetTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionByHash
        params:
          type: array
          description: Hash of a transaction.
          items:
            type: string
            format: 32-byte DATA
            title: TransactionHash
            description: Hash of a transaction.
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    KlayGetTransactionByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionBySenderTxHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionBySenderTxHash
        params:
          type: array
          description: Hash of a transaction that is signed only by the sender.
          items:
            type: string
            format: 32-byte DATA
            title: TransactionHash
            description: Hash of a transaction that is signed only by the sender.
          example:
            - '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
    KlayGetTransactionBySenderTxHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionReceiptReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionReceipt
        params:
          type: array
          description: Hash of a transaction.
          items:
            type: string
            format: 32-byte DATA
            title: TransactionHash
            description: Hash of a transaction.
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    LogObject:
      title: LogObject
      type: object
      required:
        - removed
        - logIndex
        - transactionIndex
        - transactionHash
        - blockHash
        - blockNumber
        - address
        - data
        - topics
      description: For filters created with klay_newFilter logs are objects with following properties
      properties:
        removed:
          type: boolean
          description: true when the log was removed, due to a chain reorganization. false if its a valid log.
        logIndex:
          type: string
          format: hex
          description: Integer of the log index position in the block. null when it is a pending log.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transactions index position log was created from. null when pending.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transactions this log was created from. null when pending.
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this log was in. null when pending.
        blockNumber:
          type: string
          format: hex
          description: The block number where this log was in. null when pending.
        address:
          type: string
          format: 20-byte DATA
          description: Address from which this log originated.
        data:
          type: string
          format: DATA
          description: Contains the non-indexed arguments of the log.
        topics:
          type: array
          items:
            type: string
            format: 32-byte DATA
          description: Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity The first topic is the hash of the signature of the event (e.g., Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.).
    KlayArrayOfLog:
      title: KlayArrayOfLog
      type: array
      items:
        anyOf:
          - type: string
            format: 32-byte DATA
            title: BlockHash
            description: For filters created with klay_newBlockFilter, the return are block hashes (32-byte DATA), e.g., ["0x3454645634534..."].
          - type: string
            format: 32-byte DATA
            title: TransactionHash
            description: For filters created with klay_newPendingTransactionFilter, the return are transaction hashes (32-byte DATA), e.g., ["0x6345343454645..."].
          - $ref: '#/components/schemas/LogObject'
      description: Array of log objects, or an empty array if nothing has changed since last poll.
      example:
        - address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
          topics:
            - '0xfa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef'
          data: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000d3564e57bb5c6f4d983a493a946534f8e1e8b481000000000000000000000000000000000000000000000000000000000000001341646472657373426f6f6b436f6e747261637400000000000000000000000000'
          blockNumber: '0xd3b5'
          transactionHash: '0x57ca8ff0a0d454d4c5418694c21bc4ef3de26cf7cd18dd404d6a7189a826bfe0'
          transactionIndex: '0x0'
          blockHash: '0x279251a907c6ab1fb723595511ff401432e7c2437d54189298f53a7d33ce3a60'
          logIndex: '0x0'
          removed: false
        - address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
          topics:
            - '0xfa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa'
          data: '0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000300000000000000000000000041383b6ee0ea5108d6b139165a9c85351aacd39800000000000000000000000057f7439898e652fa9b5654022297588532e5e0370000000000000000000000005b5b7a718a4124eb746ae00b1ce6edcaa5ab55bc'
          blockNumber: '0xd3b5'
          transactionHash: '0x57ca8ff0a0d454d4c5418694c21bc4ef3de26cf7cd18dd404d6a7189a826bfe0'
          transactionIndex: '0x0'
          blockHash: '0x279251a907c6ab1fb723595511ff401432e7c2437d54189298f53a7d33ce3a60'
          logIndex: '0x1'
          removed: false
    TransactionReceipt:
      title: TransactionReceipt
      type: object
      required:
        - blockHash
        - blockNumber
        - contractAddress
        - from
        - gas
        - effectiveGasPrice
        - gasPrice
        - gasUsed
        - logs
        - logsBloom
        - nonce
        - senderTxHash
        - signature
        - status
        - to
        - transactionHash
        - transactionIndex
        - type
        - typeInt
        - value
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in.
        blockNumber:
          type: string
          format: hex
          description: The block number where this transaction was in.
        codeFormat:
          type: string
          description: (optional) The code format of smart contract code.
        contractAddress:
          type: string
          format: DATA
          description: The contract address created, if the transaction was a contract creation, otherwise null.
        feePayer:
          type: string
          format: 20-byte DATA
          description: (optional) Address of the fee payer.
        feePayerSignatures:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Signature'
            type: object
          description: (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        feeRatio:
          type: string
          format: hex
          description: (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        effectiveGasPrice:
          type: string
          format: hex
          description: The actual value per gas deducted from the senders account.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        gasUsed:
          type: string
          format: hex
          description: The amount of gas used by this specific transaction alone.
        humanReadable:
          type: boolean
          description: (optional) true if the address is humanReadable, false if the address is not humanReadable.
        key:
          type: string
          description: (optional) Key of the newly created account.
        input:
          type: string
          format: DATA
          description: (optional) The data sent along with the transaction.
        logs:
          $ref: '#/components/schemas/KlayArrayOfLog'
          description: Array of log objects, which this transaction generated.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: Bloom filter for light clients to quickly retrieve related logs.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        senderTxHash:
          type: string
          format: (optional) 32-byte DATA
          description: Hash of the tx without the fee payer's address and signature. This value is always the same as the value of transactionHash for non fee-delegated transactions.
        signature:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Signature'
            type: object
          description: (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        status:
          type: string
          format: hex
          description: Either 1 (success) or 0 (failure).
        txError:
          type: string
          format: hex
          description: (optional) detailed error code if status is equal to zero.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block.
        type:
          type: string
          description: A string representing the type of the transaction.
        typeInt:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        value:
          type: string
          format: hex
          description: Value transferred in peb.
      example:
        blockHash: '0x4d97cf1f686a925ed4f1ad42c635cedb54974fe23a2941c7825e1ed3163c0e41'
        blockNumber: '0x7008'
        contractAddress: null
        feePayer: '0xa9d2cc2bb853163b6eadfb6f962d72f7e00bc2e6'
        feePayerSignatures:
          - V: '0x4e44'
            R: '0xa665e17d92e1c671c8b062cecb19790d49138a21854fc15c460c91035b1884e'
            S: '0x17165688acc01736f1221a39399e3aac7e1ece14731fcab31631e3e4a59b7441'
        effectiveGasPrice: '0x5d21dba00'
        from: '0xab0833d744a8943fe3c783f9cc70c13cbd70fcf4'
        gas: '0xdbba0'
        gasPrice: '0x5d21dba00'
        gasUsed: '0x7918'
        logs: []
        logsBloom: '0x
        nonce: '0x26'
        senderTxHash: '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
        signatures:
          - V: '0x4e44'
            R: '0x1b6bb3d996d903d0528565d13e8d9d122b2220ed09c5baf384114193a6977027'
            S: '0x20c506ce9f1bdd42183c40c44f414a3930f339f856e8be3cfcdf5ca0852fd378'
        status: '0x1'
        to: '0x15a9119104e1bf0ec6d408b3cc188685e4402a2c'
        transactionHash: '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
        transactionIndex: '0x0'
        type: TxTypeFeeDelegatedValueTransfer
        typeInt: 9
        value: '0x1'
    KlayGetTransactionReceiptResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionReceipt'
    schemas-KlayGetTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionReceiptBySenderTxHash
        params:
          type: array
          description: Hash of a transaction before signing of feePayer(senderTransactionHash).
          items:
            type: string
            format: 32-byte DATA
            title: Hash
            description: Hash of a transaction before signing of feePayer(senderTransactionHash).
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    schemas-TransactionObject:
      type: object
      required:
        - blockHash
        - blockNumber
        - contractAddress
        - feePayer
        - feePayerSignatures
        - from
        - gas
        - gasPrice
        - gasUsed
        - logs
        - logsBloom
        - nonce
        - senderTxHash
        - signatures
        - status
        - to
        - transactionHash
        - transactionIndex
        - type
        - typeInt
        - value
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in.
        blockNumber:
          type: string
          format: hex
          description: The block number where this transaction was in.
        codeFormat:
          type: string
          description: (optional) The code format of smart contract code.
        contractAddress:
          type: string
          format: DATA
          description: The contract address created, if the transaction was a contract creation, otherwise null.
        feePayer:
          type: string
          format: 20-byte DATA
          description: Address of the fee payer.
        feePayerSignatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        feeRatio:
          type: string
          format: hex
          description: (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        gasUsed:
          type: string
          format: hex
          description: The amount of gas used by this specific transaction alone.
        humanReadable:
          type: boolean
          description: (optional) true if the address is humanReadable, false if the address is not humanReadable.
        key:
          type: string
          description: (optional) Key of the newly created account.
        input:
          type: string
          format: DATA
          description: (optional) The data sent along with the transaction.
        logs:
          type: array
          items:
            type: object
          description: Array of log objects, which this transaction generated.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: Bloom filter for light clients to quickly retrieve related logs.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        senderTxHash:
          type: string
          format: (optional) 32-byte DATA
          description: Hash of the tx without the fee payer's address and signature. This value is always the same as the value of transactionHash for non fee-delegated transactions.
        signature:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        status:
          type: string
          format: hex
          description: Either 1 (success) or 0 (failure).
        txError:
          type: string
          format: hex
          description: (optional) detailed error code if status is equal to zero.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block.
        type:
          type: string
          description: A string representing the type of the transaction.
        typeInt:
          type: number
          description: An integer representing the type of the transaction.
        value:
          type: string
          format: hex
          description: Value transferred in peb.
      example:
        blockHash: '0x4d97cf1f686a925ed4f1ad42c635cedb54974fe23a2941c7825e1ed3163c0e41'
        blockNumber: '0x7008'
        contractAddress: null
        feePayer: '0xa9d2cc2bb853163b6eadfb6f962d72f7e00bc2e6'
        feePayerSignatures:
          - V: '0x4e44'
            R: '0xa665e17d92e1c671c8b062cecb19790d49138a21854fc15c460c91035b1884e'
            S: '0x17165688acc01736f1221a39399e3aac7e1ece14731fcab31631e3e4a59b7441'
        from: '0xab0833d744a8943fe3c783f9cc70c13cbd70fcf4'
        gas: '0xdbba0'
        gasPrice: '0x5d21dba00'
        gasUsed: '0x7918'
        logs: []
        logsBloom: '0x
        nonce: '0x26'
        senderTxHash: '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
        signatures:
          - V: '0x4e44'
            R: '0x1b6bb3d996d903d0528565d13e8d9d122b2220ed09c5baf384114193a6977027'
            S: '0x20c506ce9f1bdd42183c40c44f414a3930f339f856e8be3cfcdf5ca0852fd378'
        status: '0x1'
        to: '0x15a9119104e1bf0ec6d408b3cc188685e4402a2c'
        transactionHash: '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
        transactionIndex: '0x0'
        type: TxTypeFeeDelegatedValueTransfer
        typeInt: 9
        value: '0x1'
    schemas-KlayGetTransactionByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/schemas-TransactionObject'
    KlayPendingTransactionsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: klay_pendingTransactions
    components-schemas-TransactionObject:
      type: object
      required:
        - type
        - nonce
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - gas
        - value
        - v
        - r
        - s
        - chainId
        - accessList
        - hash
      properties:
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        nonce:
          type: string
          format: hex
          description: The block number where this transaction was in.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
        maxFeePerGas:
          type: string
          format: hex
          description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
        maxPriorityFeePerGas:
          type: string
          format: hex
          description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        accessList:
          type: array
          items:
            type: string
          description: An array of accessList.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
    KlayPendingTransactionsResp:
      type: object
      properties:
        result:
          type: array
          description: An array of transactions.
          items:
            $ref: '#/components/schemas/components-schemas-TransactionObject'
          example:
            - blockHash: null
              blockNumber: null
              from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              gas: '0x5208'
              gasPrice: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityFeePerGas: '0x5d21dba00'
              hash: '0xb5cd867ccc356b86634092919fb1acf4e315618d6c804df3ec3d30d66b6baba5'
              input: 0x
              nonce: '0xdb'
              to: '0x3e2ac308cd78ac2fe162f9522deb2b56d9da9499'
              transactionIndex: null
              value: '0x1'
              type: '0x2'
              accessList: []
              chainId: '0x2edaf'
              v: '0x1'
              r: '0x73992e7c3b9f6cd73176969efa8509d8e9ae0739e24b03d514508f8ef03f19ef'
              s: '0x7035dd8639e82ea3ba922ff02e1f21f4cff92d0de33050934f5c70908d61e8c3'
    SendArgs:
      type: object
      required:
        - nonce
        - to
      properties:
        accessList:
          type: array
          items:
            type: object
            required:
              - address
              - storageKeys
            properties:
              address:
                type: string
                format: hex
              storageKeys:
                type: array
                items:
                  type: string
                  format: hex
        chainId:
          type: string
          format: hex
        data:
          type: string
          format: hex
        from:
          type: string
          format: hex
        gas:
          type: string
          format: hex
        gasPrice:
          type: string
          format: hex
        input:
          type: string
          format: hex
        maxFeePerGas:
          type: string
          format: hex
        maxPriorityFeePerGas:
          type: string
          format: hex
        nonce:
          type: string
          format: hex
        to:
          type: string
          format: hex
        value:
          type: string
          format: hex
    KlayResendReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_resend
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SendArgs'
              - title: GasPrice
                description: Hex representation of the integer
                type: string
                format: hex
              - title: GasLimit
                description: Hex representation of a uint64
                type: string
                format: hex
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityPerGas: '0x5d21dba00'
            - '0x5d21dba99'
            - '0x5d21dba99'
    KlaySendRawTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sendRawTransaction
        params:
          type: array
          description: The signed transaction data.
          items:
            type: string
            format: DATA
            title: SingedTransactionData
            description: The signed transaction data.
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    TxTypeLegacyTransaction:
      title: TxTypeLegacyTransaction
      type: object
      required:
        - from
        - data
      description: TxTypeLegacyTransaction represents a type of transaction existed previously in Klaytn. This transaction type exists to support compatibility. For more information, see TxTypeLegacyTransaction.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: (optional when creating a new contract) The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        value:
          type: string
          format: hex
          description: (optional) Integer of the value sent with this transaction.
        data:
          type: string
          format: DATA
          description: The compiled byte code of a contract to deploy or data (function indicator and parameter values) required to call a contract.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
    TxTypeValueTransfer:
      title: TxTypeValueTransfer
      type: object
      required:
        - typeInt
        - from
        - to
        - value
      description: TxTypeValueTransfer is used when a user wants to send KLAY. For more information, see TxTypeValueTransfer.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeValueTransfer 8
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
    SignatureArray:
      title: SignatureArray
      type: array
      items:
        $ref: '#/components/schemas/Signature'
      description: (optional - only for klay_sendTransactionAsFeePayer API) An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
    TxTypeFeeDelegatedValueTransfer:
      title: TxTypeFeeDelegatedValueTransfer
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - feePayer
      description: Fee delegating version of TxTypeValueTransfer. For more information, see TxTypeFeeDelegatedValueTransfer.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransfer 9
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The address which pays the transaction fee.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedValueTransferWithRatio:
      title: TxTypeFeeDelegatedValueTransferWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - feePayer
        - feeRatio
      description: Partial fee delegating version of TxTypeValueTransfer. For more information, see TxTypeFeeDelegatedValueTransferWithRatio.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransferWithRatio 10
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: number
          format: integer
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeValueTransferMemo:
      title: TxTypeValueTransferMemo
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
      description: TxTypeValueTransferMemo is used when a user wants to send KLAY with a specific message. For more information, see TxTypeValueTransferMemo.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeValueTransferMemo 16
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
    TxTypeFeeDelegatedValueTransferMemo:
      title: TxTypeFeeDelegatedValueTransferMemo
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
      description: Fee delegating version of TxTypeValueTransferMemo. For more information, see TxTypeFeeDelegatedValueTransferMemo.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransferMemo 17
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedValueTransferMemoWithRatio:
      title: TxTypeFeeDelegatedValueTransferMemoWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
        - feeRatio
      description: Partial fee delegating version of TxTypeValueTransferMemo. For more information, see TxTypeFeeDelegatedValueTransferMemoWithRatio.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransferMemoWithRatio 18
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeAccountUpdate:
      title: TxTypeAccountUpdate
      type: object
      required:
        - typeInt
        - from
        - key
      description: TxTypeAccountUpdate updates the key of the given account. For more information, see TxTypeAccountUpdate.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeAccountUpdate 32
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        key:
          type: string
          format: DATA
          description: The new account key of the from account in RLP encoded format. For more information about the account key, see Account Key.
    TxTypeFeeDelegatedAccountUpdate:
      title: TxTypeFeeDelegatedAccountUpdate
      type: object
      required:
        - typeInt
        - from
        - key
        - feePayer
      description: Fee delegating version of TxTypeAccountUpdate. For more information, see TxTypeFeeDelegatedAccountUpdate.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedAccountUpdate 33
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        key:
          type: string
          format: DATA
          description: The new account key of the from account in RLP encoded format. For more information about the account key, see Account Key.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedAccountUpdateWithRatio:
      title: TxTypeFeeDelegatedAccountUpdateWithRatio
      type: object
      required:
        - typeInt
        - from
        - key
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedAccountUpdateWithRatio: 34'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        key:
          type: string
          format: DATA
          description: The new account key of the from account in RLP encoded format. For more information about the account key, see Account Key.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeSmartContractDeploy:
      title: TxTypeSmartContractDeploy
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - humanReadable
        - codeFormat
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeSmartContractDeploy: 40'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        humanReadable:
          type: boolean
          description: true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
        codeFormat:
          type: string
          format: hex
          description: The code format of smart contract code. The value 0 indicates EVM.
    TxTypeFeeDelegatedSmartContractDeploy:
      title: TxTypeFeeDelegatedSmartContractDeploy
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - humanReadable
        - codeFormat
        - feePayer
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractDeploy: 41'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        humanReadable:
          type: boolean
          description: true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
        codeFormat:
          type: string
          format: hex
          description: The code format of smart contract code. The value 0 indicates EVM.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedSmartContractDeployWithRatio:
      title: TxTypeFeeDelegatedSmartContractDeployWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - humanReadable
        - codeFormat
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractDeployWithRatio: 42'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        humanReadable:
          type: boolean
          description: true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
        codeFormat:
          type: string
          format: hex
          description: The code format of smart contract code. The value 0 indicates EVM.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
    TxTypeSmartContractExecution:
      title: TxTypeSmartContractExecution
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeSmartContractExecution: 48'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
    TxTypeFeeDelegatedSmartContractExecution:
      title: TxTypeFeeDelegatedSmartContractExecution
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractExecution: 49'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedSmartContractExecutionWithRatio:
      title: TxTypeFeeDelegatedSmartContractExecutionWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractExecutionWithRatio: 50'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeCancel:
      title: TxTypeCancel
      type: object
      required:
        - typeInt
        - from
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeCancel: 56'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
    TxTypeFeeDelegatedCancel:
      title: TxTypeFeeDelegatedCancel
      type: object
      required:
        - typeInt
        - from
        - feePayer
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedCancel: 57'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedCancelWithRatio:
      title: TxTypeFeeDelegatedCancelWithRatio
      type: object
      required:
        - typeInt
        - from
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedCancelWithRatio: 58'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    KlaytnTransactionTypes:
      type: object
      oneOf:
        - $ref: '#/components/schemas/TxTypeLegacyTransaction'
        - $ref: '#/components/schemas/TxTypeValueTransfer'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransfer'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransferWithRatio'
        - $ref: '#/components/schemas/TxTypeValueTransferMemo'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransferMemo'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransferMemoWithRatio'
        - $ref: '#/components/schemas/TxTypeAccountUpdate'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedAccountUpdate'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedAccountUpdateWithRatio'
        - $ref: '#/components/schemas/TxTypeSmartContractDeploy'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractDeploy'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractDeployWithRatio'
        - $ref: '#/components/schemas/TxTypeSmartContractExecution'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractExecution'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractExecutionWithRatio'
        - $ref: '#/components/schemas/TxTypeCancel'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedCancel'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedCancelWithRatio'
    KlaySendTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sendTransaction
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - from: '0xb60e8dd61c5d32be8058bb8eb970870f07233155'
              to: '0xd46e8dd67c5d32be8058bb8eb970870f07244567'
              gas: '0x76c0'
              gasPrice: '0x5d21dba00'
              value: '0x9184e72a'
              input: '0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675'
    KlaySendTransactionAsFeePayerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sendTransactionAsFeePayer
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - typeInt: 18
              from: '0xcd01b2b44584fb143824c1ea0231bebaea826b9d'
              to: '0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075'
              gas: '0x4a380'
              gasPrice: '0x5d21dba00'
              nonce: '0x2c'
              value: '0xf4'
              input: '0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001'
              feePayer: '0xcd01b2b44584fb143824c1ea0231bebaea826b9d'
              feeRatio: 30
              signatures:
                - V: '0x4e43'
                  R: '0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9'
                  S: '0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef'
    KlaySignTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_signTransaction
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - from: '0x77982323172e5b6182539d3522d5a33a944206d4'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              gas: '0x1000000'
              nonce: '0x2'
              gasprice: '0x25000000000'
    KlaySignTransactionResp:
      type: object
      properties:
        result:
          type: object
          properties:
            raw:
              type: string
              description: Signed raw transaction
            tx:
              type: object
              description: Transaction object including the sender's signature
          example:
            raw: '0xf86c0286025000000000840100000094cd6bfdb523a4d030890d28bf1eb6ef36307c9aaa8301000080820fe8a056d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1a03443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
            tx:
              nonce: '0x2'
              gasPrice: '0x5d21dba00'
              gas: '0x1000000'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              input: 0x
              v: '0xfe8'
              r: '0x56d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1'
              s: '0x3443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
              hash: '0xb53cc9128a19c3916c0de1914725b7337bba84666c2556d8682c72ca34c6874c'
    KlaySignTransactionAsFeePayerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_signTransactionAsFeePayer
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - from: '0x77982323172e5b6182539d3522d5a33a944206d4'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              gas: '0x1000000'
              nonce: '0x2'
              gasprice: '0x25000000000'
    KlaySignTransactionAsFeePayerResp:
      type: object
      properties:
        result:
          type: object
          properties:
            raw:
              type: string
              description: Signed raw transaction
            tx:
              type: object
              description: Transaction object including the fee payer's signature
          example:
            raw: '0xf86c0286025000000000840100000094cd6bfdb523a4d030890d28bf1eb6ef36307c9aaa8301000080820fe8a056d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1a03443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
            tx:
              nonce: '0x2'
              gasPrice: '0x5d21dba00'
              gas: '0x1000000'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              input: 0x
              v: '0xfe8'
              r: '0x56d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1'
              s: '0x3443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
              hash: '0xb53cc9128a19c3916c0de1914725b7337bba84666c2556d8682c72ca34c6874c'
    KlayGasPriceAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_gasPriceAt
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/IntegerBlockNumber'
              - $ref: '#/components/schemas/HexadecimalBlockNumber'
          example:
            - '0x64'
    KlayGetChainConfigReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getChainConfig
        params:
          type: array
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - 100
    KlayGetChainConfigResp:
      type: object
      properties:
        result:
          type: object
          properties:
            chainId:
              type: integer
            deriveShaImpl:
              type: string
            ethTxTypeCompatibleBlock:
              type: integer
            governance:
              type: object
              properties:
                govParamContract:
                  type: string
                governanceMode:
                  type: string
                governingNode:
                  type: string
                kip71:
                  type: object
                  properties:
                    basefeedenominator:
                      type: integer
                    gastarget:
                      type: number
                    lowerboundbasefee:
                      type: number
                    maxblockgasusedforbasefee:
                      type: number
                    upperboundbasefee:
                      type: number
                reward:
                  type: object
                  properties:
                    deferredTxFee:
                      type: boolean
                    kip82ratio:
                      type: string
                    minimumStake:
                      type: integer
                    mintingAmount:
                      type: number
                    proposerUpdateInterval:
                      type: integer
                    ratio:
                      type: string
                    stakingUpdateInterval:
                      type: integer
                    useGiniCoeff:
                      type: boolean
            istanbul:
              type: object
              properties:
                epoch:
                  type: integer
                policy:
                  type: integer
                sub:
                  type: integer
            istanbulCompatibleBlock:
              type: integer
            koreCompatibleBlock:
              type: integer
            londonCompatibleBlock:
              type: integer
            magmaCompatibleBlock:
              type: integer
            unitPrice:
              type: number
          example:
            chainId: 1001
            istanbulCompatibleBlock: 75373312
            londonCompatibleBlock: 80295291
            ethTxTypeCompatibleBlock: 86513895
            magmaCompatibleBlock: 98347376
            koreCompatibleBlock: 111736800
            kip103CompatibleBlock: 119145600
            kip103ContractAddress: '0xd5ad6d61dd87edabe2332607c328f5cc96aecb95'
            istanbul:
              epoch: 604800
              policy: 2
              sub: 22
            unitPrice: 25000000000
            deriveShaImpl: 2
            governance:
              governingNode: '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
              governanceMode: single
              govParamContract: '0x0000000000000000000000000000000000000000'
              reward:
                mintingAmount: 9600000000000000000
                ratio: 34/54/12
                kip82ratio: 20/80
                useGiniCoeff: true
                deferredTxFee: true
                stakingUpdateInterval: 86400
                proposerUpdateInterval: 3600
                minimumStake: 5000000
              kip71:
                lowerboundbasefee: 25000000000
                upperboundbasefee: 750000000000
                gastarget: 30000000
                maxblockgasusedforbasefee: 60000000
                basefeedenominator: 20
    KlayGetFilterChangesResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayArrayOfLog'
    KlayGetFilterLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayArrayOfLog'
    FilterOptions:
      title: FilterOptions
      type: object
      properties:
        fromBlock:
          allOf:
            - title: fromBlock
              default: latest
              description: (optional, default "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
            - $ref: '#/components/schemas/BlockNumberOrTag'
        toBlock:
          allOf:
            - title: toBlock
              default: latest
              description: (optional, default "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
            - $ref: '#/components/schemas/BlockNumberOrTag'
        address:
          oneOf:
            - type: string
              format: 20-byte DATA
              title: Address
              description: Contract address
            - type: array
              title: ArrayOfAddress
              items:
                type: string
                format: 20-byte DATA
                description: Address
          description: (optional) Contract address or a list of addresses from which logs should originate.
        topics:
          type: array
          items:
            type: string
            format: 32-byte DATA
          description: (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with “or” options.
        blockHash:
          type: string
          format: 32-byte DATA
          description: (optional) A filter option that restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in in the filter criteria, then neither fromBlock nor toBlock are allowed
    KlayGetLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayArrayOfLog'
    Topics:
      type: array
      description: (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with "or" options.
      items:
        type: string
        format: 32-byte DATA
    schemas-FilterOptions:
      title: FilterOptions
      type: object
      properties:
        fromBlock:
          allOf:
            - $ref: '#/components/schemas/BlockNumberOrTag'
            - title: BlockNumberOrTag
              description: |
                (optional, default: "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
        toBlock:
          allOf:
            - $ref: '#/components/schemas/BlockNumberOrTag'
            - title: BlockNumberOrTag
              description: |
                (optional, default: "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
        address:
          oneOf:
            - type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/Address'
          description: (optional) Contract address or a list of addresses from which logs should originate.
        topics:
          $ref: '#/components/schemas/Topics'
    KlayNewFilterReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_newFilter
        params:
          type: array
          items:
            $ref: '#/components/schemas/schemas-FilterOptions'
          example:
            - fromBlock: earliest
              toBlock: latest
              address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              topics:
                - '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
    KlayNewFilterResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: A filter id
          example: '0xd32fd16b6906e67f6e2b65dcf48fc272'
    BlockCount:
      title: BlockCount
      type: string
      format: Hexadecimal
      description: Number of blocks in the requested range in hexadecimal. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
    RewardPercentiles:
      title: RewardPercentiles
      type: array
      items:
        type: number
        format: float
      description: An array of floating point values between 0 and 100.
    KlayFeeHistoryReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_feeHistory
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockCount'
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - $ref: '#/components/schemas/RewardPercentiles'
          example:
            - '0x10'
            - latest
            - - 0.1
              - 0.2
              - 0.3
    BaseFeePerGas:
      title: BaseFeePerGas
      type: array
      items:
        type: string
        format: Hexadecimal
      description: An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block.
    Reward:
      title: Reward
      type: array
      description: An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.
      items:
        type: array
        items:
          type: string
          format: hex
    KlayFeeHistoryResp:
      type: object
      properties:
        result:
          type: object
          required:
            - oldestBlock
            - baseFeePerGas
            - gasUsedRatio
            - reward
          properties:
            oldestBlock:
              type: string
              format: Hexadecimal
              description: Lowest numbered block of the returned range in hexadecimal.
            baseFeePerGas:
              $ref: '#/components/schemas/BaseFeePerGas'
            gasUsedRatio:
              type: array
              items:
                type: number
                format: float
              description: An array of the ratios of gas used per block. These are calculated as the ratio of gasUsed and gasLimit.
            reward:
              $ref: '#/components/schemas/Reward'
          example:
            oldestBlock: '0xa5b'
            reward:
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x5d21dba00'
                - '0x5d21dba00'
                - '0x5d21dba00'
            baseFeePerGas:
              - '0x0'
              - ...
              - '0x0'
            gasUsedRatio:
              - 0
              - ...
              - 0.0002963777000002964
    KlayGetStakingInfoReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getStakingInfo
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - latest
    KlayGetStakingInfoResp:
      type: object
      properties:
        result:
          type: object
          description: Staking information
          example:
            BlockNum: 57801600
            CouncilNodeAddrs:
              - '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
              - '0x571e53df607be97431a5bbefca1dffe5aef56f4d'
              - '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'
              - '0x5cb1a7dccbd0dc446e3640898ede8820368554c8'
              - '0x776817c0ef3d06d794cf01ae9afa33d7397b9b40'
              - '0xc180ca565b34b5b63877674f5fe647e7da079022'
              - '0x03497f51c31fe8b402df0bde90fd5a85f87aa943'
            CouncilRewardAddrs:
              - '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d'
              - '0x6559a7b6248b342bc11fbcdf9343212bbc347edc'
              - '0x82829a60c6eac4e3e9d6ed00891c69e88537fd4d'
              - '0xa86fd667c6a340c53cc5d796ba84dbe1f29cb2f7'
              - '0x6e22cbe2b8bbd1df9f1d3c8ebae6d7ff5414a734'
              - '0x24e593fb29731e54905025c230727dc28d229f77'
              - '0x2b2a7a1d29a203f60e0a964fc64231265a49cd97'
            CouncilStakingAddrs:
              - '0x12fa1ab4c3e17c1c08c1b5a945c864c8e8bf707e'
              - '0xfd56604f1a20268ff7a0eab2ab48e25ee1e0f653'
              - '0x1e0f6aaa9baa6081dc4910a854eebf8854c262ab'
              - '0x5e6988415ebe0f6b088f5a676003ba60f572875a'
              - '0xbb44998c2af35b8faee694cffe216558056d747e'
              - '0x68cba498b7175cde9de08fc2e85ad3e9c8caefa8'
              - '0x98efb31eeccafe35d53a6926e2a54c0858d9eebc'
            CouncilStakingAmounts:
              - 5000000
              - 5000000
              - 5000000
              - 5000000
              - 5000000
              - 5000000
              - 5000000
            Gini: 0
            KIRAddr: '0x716f89d9bc333286c79db4ebb05516897c8d208a'
            PoCAddr: '0x2bcf9d3e4a846015e7e3152a614c684de16f37c6'
            UseGini: true
    KlaySha3Req:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sha3
        params:
          type: array
          items:
            title: data
            type: string
            format: DATA
          description: The data to convert into a SHA3 hash.
          example:
            - '0x11223344'
    KlaySha3Resp:
      type: object
      properties:
        result:
          type: string
          format: 32-byte DATA
          example: '0x36712aa4d0dd2f64a9ae6ac09555133a157c74ddf7c079a70c33e8b4bf70dd73'
          description: The SHA3 result of the given data.
    EthAccountsResp:
      type: object
      properties:
        result:
          type: array
          description: Addresses owned by the client.
          items:
            type: string
            format: 20-byte DATA
            readOnly: true
            example: '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    EthGetBalanceReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getBalance
        params:
          type: array
          items:
            anyOf:
              - title: Address
                type: string
                format: 20-byte DATA
                description: Address to check for balance.
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    EthGetBalanceResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the current balance in peb.
          example: 158972490234375000
    EthGetCodeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getCode
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b'
            - '0x2'
    EthGetCodeResp:
      type: object
      properties:
        result:
          type: string
          format: DATA
          description: The code from the given address.
          example: '0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056'
    EthGetTransactionCountReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionCount
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Address'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
            - latest
    EthGetTransactionCountResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions send from this address.
          example: '0x1'
    schemas-KlayGetBlockByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getBlockByHash
        params:
          type: array
          items:
            anyOf:
              - title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              - title: IsTransactionObjects
                description: If true, it returns the full transaction objects, if false only the hashes of the transactions.
                type: boolean
          example:
            - '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
            - true
    EthBlockObject:
      type: object
      required:
        - baseFeePerGas
        - difficulty
        - extraData
        - gasLimit
        - gasUsed
        - hash
        - logsBloom
        - miner
        - mixHash
        - nonce
        - number
        - parentHash
        - receiptsRoot
        - sha3Uncles
        - size
        - stateRoot
        - timestamp
        - totalDifficulty
        - transactionsRoot
      properties:
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas.
        difficulty:
          type: string
          format: hex
          description: The integer of the difficulty for this block
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        gasLimit:
          type: string
          format: hex
          description: The maximum gas allowed in this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is a pending block.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: The bloom filter for the logs of the block. null when it is a pending block.
        miner:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the mining rewards were given.
        mixHash:
          type: string
          format: 32-byte DATA
          description: The hash which proves combined with the nonce that a sufficient amount of computation has been carried out on this block.
        nonce:
          type: string
          format: 8-byte DATA
          description: The hash of the generated proof-of-work.
        number:
          type: string
          format: hex
          description: The block number. null when it is a pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        sha3Uncles:
          type: string
          format: 32-byte DATA
          description: The SHA3 of the uncles data in the block.
        size:
          type: string
          format: hex
          description: Integer of the size of this block in bytes.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        totalDifficulty:
          type: string
          format: hex
          description: The total blockScore of the chain until this block
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
        transactions:
          type: array
          items:
            oneOf:
              - type: string
                title: TransactionHash
                format: 32-byte DATA
              - type: object
                title: TransactionObject
          description: Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter.
        uncles:
          type: array
          description: Array of uncle hashes.
          items:
            type: string
            format: 32-byte DATA
      example:
        baseFeePerGas: '0x5d21dba00'
        difficulty: '0x1'
        extraData: '0xd8820505846b6c617988676f312e31312e328664617277696e00000000000000f89ed594e733cb4d279da696f30d470f8c04decb54fcb0d2b841f1f600d136f93a5a2d9c12a7a9f6d7ba80a047c3910a2bbc01e38bcce25e48ed2004d21f134df5efaf1f8cbb9a26e1548e57628ab258c935490c11a7cd65324701f843b841444b3efc40071b6eec2c4d2630b483710b8fc7a601432431b0161f489102d1ca02f2ef93153d0be3843aa563d34cee1716163f58711843442aedd94a56303c0400'
        gasLimit: '0xe8d4a50fff'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
        logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        miner: '0x0000000000000000000000000000000000000000'
        mixHash: '0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365'
        nonce: '0x0000000000000000'
        number: '0x1'
        parentHash: '0x73255a60e9491b5715f9bfcb7fa1143296810f629836d4cefbd1921d9173d63d'
        receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        reward: '0x0000000000000000000000000000000000000000'
        size: '0x2d7'
        stateRoot: '0xedb87f4b0f905a655c80d1768eb22b1eff2405098c4748b8364c869611e02a2b'
        timestamp: '0x5c99cbd8'
        totalDifficulty: '0x2'
        transactions: []
        transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        uncles: []
    schemas-KlayGetBlockByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthBlockObject'
    EthGetBlockByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getBlockByNumber
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - type: boolean
                title: IsTransactionObjects
                description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          example:
            - '0xd0054e'
            - false
    EthGetBlockByNumberResp:
      type: object
      properties:
        result:
          type: object
          nullable: true
          required:
            - baseFeePerGas
            - difficulty
            - extraData
            - gasLimit
            - gasUsed
            - hash
            - logsBloom
            - miner
            - mixHash
            - nonce
            - number
            - parentHash
            - receiptsRoot
            - sha3Uncles
            - size
            - stateRoot
            - timestamp
            - totalDifficulty
            - transactionsRoot
            - transactions
            - uncles
          properties:
            baseFeePerGas:
              type: string
              format: hex
              description: The base fee per gas.
            difficulty:
              type: string
              format: hex
              description: The integer of the difficulty for this block
            extraData:
              type: string
              format: DATA
              description: The "extra data" field of this block.
            gasLimit:
              type: string
              format: hex
              description: The maximum gas allowed in this block.
            gasUsed:
              type: string
              format: hex
              description: The total used gas by all transactions in this block.
            hash:
              type: string
              format: 32-byte DATA
              nullable: true
              description: Hash of the block. null when it is a pending block.
            logsBloom:
              type: string
              format: 256-byte DATA
              nullable: true
              description: The bloom filter for the logs of the block. null when it is a pending block.
            miner:
              type: string
              format: 20-byte DATA
              description: The address of the beneficiary to whom the mining rewards were given.
            mixHash:
              type: string
              format: 32-byte DATA
              description: The hash which proves combined with the nonce that a sufficient amount of computation has been carried out on this block.
            nonce:
              type: string
              format: 8-byte DATA
              description: The hash of the generated proof-of-work.
            number:
              type: string
              format: hex
              nullable: true
              description: The block number. null when it is a pending block.
            parentHash:
              type: string
              format: 32-byte DATA
              description: Hash of the parent block.
            receiptsRoot:
              type: string
              format: 32-byte DATA
              description: The root of the receipts trie of the block.
            sha3Uncles:
              type: string
              format: 32-byte DATA
              description: The SHA3 of the uncles data in the block.
            size:
              type: string
              format: hex
              description: Integer of the size of this block in bytes.
            stateRoot:
              type: string
              format: 32-byte DATA
              description: The root of the final state trie of the block.
            timestamp:
              type: string
              format: hex
              description: The Unix timestamp for when the block was collated.
            totalDifficulty:
              type: string
              format: hex
              description: The total blockScore of the chain until this block
            transactionsRoot:
              type: string
              format: 32-byte DATA
              description: The root of the transaction trie of the block.
            transactions:
              type: array
              description: Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter.
              items:
                anyOf:
                  - type: string
                    format: 32-byte DATA
                  - type: object
                    title: TransactionObject
            uncles:
              type: array
              items:
                type: string
              description: Array of uncle hashes.
          example:
            baseFeePerGas: '0x5d21dba00'
            difficulty: '0x1'
            extraData: 0x
            gasLimit: '0xe8d4a50fff'
            gasUsed: '0x44437'
            hash: '0x456a7cbb6fada11a0ca8cec24510d89da1c52898f1087528752ae6e13973fbc5'
            logsBloom: '0x0000100000000094000000400000080000000040000000000000000000000002000000000000000000000000004001000000200000000000000008000220000000080400000800000000000a000000000000000000000000000010000000000000002000000408000000000000000010000080101002000000000010000000100000010000200800000400000080000000000000000000000002000000102000024000080200000000000082000000000000000000000000010000000000000000100012000000000000011000000000002000201000000008000000002000000010002800000000001400000000000000000000000100000000200000000000'
            miner: '0x1ad91ee08f21be3de0ba2ba6918e714da6b45836'
            mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000'
            nonce: '0x0000000000000000'
            number: '0xd0054e'
            parentHash: '0x2b88fdb3821669357a0b8367115e30145135c44bb8f62641d4e7765a7f555d17'
            receiptsRoot: '0xc36bc44d0b52dee954be9bbd519bddc0bf6e991af2ed6f6ba506f89f10cdb9a7'
            sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
            size: '0x64c'
            stateRoot: '0x123a0da1c621236e64f9b486a9a9712ec6ce07d6690acab5a18b716d17cdc29f'
            timestamp: '0x6194f184'
            totalDifficulty: '0xd0054f'
            transactions:
              - '0x5b3492f8199ee2a551d991b7d00bd48967ca5e5c1c15d6e1ee9fda97e3126e9a'
              - '0x8e1870262f2ba0452458280ad6ad5d54e5288623e415692c822979b7608c7297'
              - '0x98053d20b01c9e56964a57084fb91ccc01b242adfb09c23534162dcbbcc094c2'
            transactionsRoot: '0x29b9880f57c0e79d0be5aa4fcc6b4cfcbed3e51478ad8f44533acce012df8cf1'
            uncles: []
    KlayGetBlockTransactionCountByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getBlockTransactionCountByHash
        params:
          type: array
          description: Hash of a block.
          items:
            title: blockHash
            type: string
            format: 32-byte DATA
          example:
            - '0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621'
    EthGetBlockTransactionCountByNumberReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getBlockTransactionCountByNumber
        params:
          type: array
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xe8'
    EthGetBlockTransactionCountByNumberResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions in this block.
    EthGetHeaderByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getHeaderByHash
        params:
          type: array
          items:
            type: string
            format: 32-byte DATA
            title: blockHash
          description: Hash of a block.
          example:
            - '0x1b4'
    EthHeaderObject:
      title: EthHeaderObject
      type: object
      required:
        - baseFeePerGas
        - difficulty
        - extraData
        - gasLimit
        - gasUsed
        - hash
        - logsBloom
        - miner
        - mixHash
        - nonce
        - number
        - parentHash
        - receiptsRoot
        - sha3Uncles
        - size
        - stateRoot
        - timestamp
        - totalDifficulty
        - transactionsRoot
      properties:
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas.
        difficulty:
          type: string
          format: hex
          description: The integer of the difficulty for this block.
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        gasLimit:
          type: string
          format: hex
          description: The maximum gas allowed in this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is a pending block.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: The bloom filter for the logs of the block.
        miner:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the mining rewards were given.
        mixHash:
          type: string
          format: 32-byte DATA
          description: The hash which proves combined with the nonce that a sufficient amount of computation has been carried out on this block.
        nonce:
          type: string
          format: 8-byte DATA
          description: The hash of the generated proof-of-work.
        number:
          type: string
          format: hex
          description: The block number. null when it is a pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        sha3Uncles:
          type: string
          format: 32-byte DATA
          description: The SHA3 of the uncles data in the block.
        size:
          type: string
          format: hex
          description: Integer of the size of this block in bytes.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        totalDifficulty:
          type: string
          format: hex
          description: The total blockScore of the chain until this block.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
      example:
        baseFeePerGas: '0x5d21dba00'
        difficulty: '0x1'
        extraData: '0xd8820505846b6c617988676f312e31312e328664617277696e00000000000000f89ed594e733cb4d279da696f30d470f8c04decb54fcb0d2b841f1f600d136f93a5a2d9c12a7a9f6d7ba80a047c3910a2bbc01e38bcce25e48ed2004d21f134df5efaf1f8cbb9a26e1548e57628ab258c935490c11a7cd65324701f843b841444b3efc40071b6eec2c4d2630b483710b8fc7a601432431b0161f489102d1ca02f2ef93153d0be3843aa563d34cee1716163f58711843442aedd94a56303c0400'
        gasLimit: '0xe8d4a50fff'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
        logsBloom: '0x
        miner: '0x0000000000000000000000000000000000000000'
        mixHash: '0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365'
        nonce: '0x0000000000000000'
        number: '0x1'
        parentHash: '0x73255a60e9491b5715f9bfcb7fa1143296810f629836d4cefbd1921d9173d63d'
        receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        reward: '0x0000000000000000000000000000000000000000'
        size: '0x2d7'
        stateRoot: '0xedb87f4b0f905a655c80d1768eb22b1eff2405098c4748b8364c869611e02a2b'
        timestamp: '0x5c99cbd8'
        totalDifficulty: '0x2'
        transactions: []
        transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        uncles: []
    EthGetHeaderByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthHeaderObject'
    EthGetHeaderByNumberReq:
      type: object
      properties:
        method:
          type: string
          default: eth_getHeaderByNumber
        params:
          type: array
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    EthGetHeaderByNumberResp:
      title: EthGetHeaderByNumberResp
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthHeaderObject'
    schemas-EthGetHeaderByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getStorageAt
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Address
                description: Address of the storage.
                format: 20-byte DATA
              - type: string
                title: Quantity
                description: Integer of the position in the storage.
                format: hex
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x295a70b2de5e3953354a6a8344e616ed314d7251'
            - '0x0'
            - latest
    schemas-EthGetHeaderByHashResp:
      type: object
      properties:
        result:
          type: string
          format: DATA
          description: The value at this storage position.
          example: '0x00000000000000000000000000000000000000000000000000000000000004d2'
    EthGetUncleByBlockHashAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleByBlockHashAndIndex
        params:
          type: array
          items:
            anyOf:
              - title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              - title: UncleIndex
                description: The uncle's index position.
                type: string
                format: hex
          example:
            - '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
            - '0x1'
    EthGetUncleByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    EthGetUncleByBlockNumberAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleByBlockNumberAndIndex
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - title: UncleIndex
                description: The uncle's index position.
                type: string
                format: hex
          example:
            - '0xe8'
            - '0x1'
    EthGetUncleByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    EthGetUncleCountByBlockHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleCountByBlockHash
        params:
          type: array
          description: Hash of a block.
          items:
            title: BlockHash
            type: string
            format: 32-byte DATA
          example:
            - '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
    EthGetUncleCountByBlockHashResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          nullable: true
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          example: '0x0'
    EthGetUncleCountByBlockNumberReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleCountByBlockNumber
        params:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xe8'
    EthGetUncleCountByBlockNumberResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          example: '0x0'
    EthMiningReq:
      type: object
      properties:
        method:
          type: string
          default: eth_mining
    EthMiningResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the client is mining, otherwise false.
          example: true
    schemas-KlayGetBlockReceiptsReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getBlockReceipts
        params:
          type: array
          description: Hash of a block
          items:
            type: string
            title: HashOfBlock
            format: 32-byte DATA
            description: Hash of a block.
          example:
            - '0xdc762ed0274496e2a42278e2648d910d82468687b5415bb5eb058a96a0b93c30'
    EthCallObject:
      title: EthCallObject
      type: object
      description: The transaction call object. See the next table for the object's properties.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is simulated to have been sent from. The 0x00..0 address is used if no address is specified.
        to:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is sent to.
        gas:
          type: string
          format: hex
          description: (optional) Maximum gas allowance for the code execution to avoid infinite loops. Defaults to 2^63 or whatever value the node operator specified via --rpc.gascap.
        gasPrice:
          type: string
          format: hex
          description: (optional) Number of peb to simulate paying for each unit of gas during execution. Defaults to 0 peb.
        value:
          type: string
          format: hex
          description: (optional) Amount of peb to simulate sending along with the transaction. Defaults to 0.
        input:
          type: string
          format: DATA
          description: (optional) Hash of the method signature and encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
    StateOverrideSet:
      type: object
      description: The state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.
      properties:
        balance:
          type: integer
          format: int64
          description: (optional) Fake balance to set for the account before executing the call.
        nonce:
          type: integer
          format: int64
          description: (optional) Fake nonce to set for the account before executing the call.
        code:
          type: string
          format: DATA
          description: (optional) Fake EVM bytecode to inject into the account before executing the call.
        state:
          type: object
          description: (optional) Fake key-value mapping to override all slots in the account storage before executing the call.
        stateDiff:
          type: object
          description: (optional) Fake key-value mapping to override individual slots in the account storage before executing the call.
    schemas-KlayCallReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_call
        params:
          type: array
          items:
            anyOf:
              - allOf:
                  - title: CallObject
                  - $ref: '#/components/schemas/EthCallObject'
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - $ref: '#/components/schemas/StateOverrideSet'
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0xbE3892d33620bE5aca8c75D39e7401871194d290'
              input: '0x2e64cec1'
            - latest
            - '0xbE3892d33620bE5aca8c75D39e7401871194d290':
                code: '0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029'
    schemas-KlayCallResp:
      type: object
      properties:
        result:
          type: string
          example: '0x0000000000000000000000000000000000000000000000000000000000000000'
    EthTransactionArgs:
      type: object
      title: TransactionArgs
      required:
        - accessList
        - chainId
        - data
        - from
        - gas
        - gasPrice
        - input
        - maxFeePerGas
        - maxPriorityFeePerGas
        - nonce
        - to
        - value
      properties:
        accessList:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
              storageKeys:
                type: array
                items:
                  type: string
                  description: Hex representation of a Keccak 256 hash
        chainId:
          type: string
        data:
          type: string
        from:
          type: string
        gas:
          type: string
        gasPrice:
          type: string
        input:
          type: string
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
        nonce:
          type: string
        to:
          type: string
        value:
          type: string
    EthCreateAccessListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_createAccessList
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EthTransactionArgs'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312'
              data: '0x20965255'
              gasPrice: '0x3b9aca00'
              gas: '0x3d0900'
              to: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'
    EthCreateAccessListResp:
      type: object
      properties:
        result:
          type: object
          required:
            - accessList
            - gasUsed
          properties:
            accessList:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                  storageKeys:
                    type: array
                    items:
                      type: string
                      description: Hex representation of a Keccak 256 hash
            error:
              type: string
            gasUsed:
              type: string
          example:
            accessList:
              - address: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'
                storageKeys:
                  - '0x0000000000000000000000000000000000000000000000000000000000000000'
            gasUsed: '0x644e'
    EthEstimateGasReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_estimateGas
        params:
          type: array
          items:
            anyOf:
              - allOf:
                  - title: callObject
                  - $ref: '#/components/schemas/EthCallObject'
          description: The transaction call object. See the next table for the object's properties.
          example:
            - from: '0x3f71029af4e252b25b9ab999f77182f0cd3bc085'
              to: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              gas: '0x100000'
              gasPrice: '0x5d21dba00'
              value: '0x0'
              input: '0x8ada066e'
    EthEstimateGasResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: The amount of gas used.
          example: '0x5208'
    TransactionArgsInEthSendTransaction:
      title: TransactionArgs
      type: object
      required:
        - from
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: (not required when creating a new contract) The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional) The integer of the gas provided for the transaction's execution. It will return unused gas.
        maxFeePerGas:
          type: string
          format: hex
          description: '(optional, default: 250 ston) The maximum amount to pay for the transaction''s execution. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).'
        maxPriorityFeePerGas:
          type: string
          format: hex
          description: '(optional, default: 250 ston) Gas tip cap for dynamic fee transaction in peb. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).'
        input:
          type: string
          format: DATA
          description: (optional) The hash of the method signature and the encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
        value:
          type: string
          format: hex
          description: (optional) The integer of values sent with this transaction.
        nonce:
          type: string
          format: hex
          description: (optional) The integer of a nonce.
    EthFillTransactionReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_fillTransaction
        params:
          type: array
          description: An object of transaction arguments. See the table below for the object's properties.
          items:
            $ref: '#/components/schemas/TransactionArgsInEthSendTransaction'
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
    Tx:
      title: Tx
      type: object
      required:
        - type
        - nonce
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - gas
        - value
        - v
        - r
        - s
        - chainId
        - accessList
        - hash
      properties:
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        nonce:
          type: string
          format: hex
          description: The block number where this transaction was in.
        gasPrice:
          type: string
          format: hex
          nullable: true
          description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
        maxFeePerGas:
          type: string
          format: hex
          nullable: true
          description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
        maxPriorityFeePerGas:
          type: string
          format: hex
          nullable: true
          description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        accessList:
          type: array
          items:
            type: string
          description: An array of accessList.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
    EthFillTransactionResp:
      type: object
      properties:
        result:
          type: object
          required:
            - raw
            - tx
          properties:
            raw:
              type: string
              description: A rawTransaction string (a RLP-encoded transaction string).
            tx:
              $ref: '#/components/schemas/Tx'
          example:
            raw: '0x02ef8302edaf808505d21dba008505d21dba00829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee0180c0808080'
            tx:
              type: '0x2'
              nonce: '0x0'
              gasPrice: null
              maxPriorityFeePerGas: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              gas: '0x9999'
              value: '0x1'
              input: 0x
              v: '0x0'
              r: '0x0'
              s: '0x0'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              chainId: '0x2edaf'
              accessList: []
              hash: '0x83e382bfb39249dc0e2b4283702bc1c0685deffad1316d166546da9c4c14c59d'
    EthGetRawTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getRawTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            anyOf:
              - title: BlockHash
                type: string
                format: hex
                description: Hex representation of a Keccak 256 hash
              - title: Index
                description: Hex representation of a uint
                type: string
                format: hex
          example:
            - '0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6'
            - '0x20965255'
    EthGetRawTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Hex representation of some bytes
          title: dataWord
          example: 0x
    EthGetRawTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getRawTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - type: string
                format: hex
                title: Index
                description: Hex representation of a uint.
          example:
            - 118593751
            - '0x0'
    EthGetRawTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Hex representation of some bytes
          example: '0x0'
    EthGetRawTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getRawTransactionByHash
        params:
          type: array
          description: Hex representation of a Keccak 256 hash
          items:
            title: Hash
            type: string
            format: hex
          example:
            - '0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687'
    EthGetRawTransactionByHashResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          title: dataWord
          description: Hex representation of some bytes
          example: 0x
    EthGetTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            anyOf:
              - title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              - title: TransactionIndexPosition
                description: Integer of the transaction index position.
                type: string
                format: hex
          example:
            - '0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68'
            - '0x0'
    LegacyTransaction:
      title: LegacyTransaction
      type: object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - hash
        - input
        - nonce
        - to
        - value
        - transactionIndex
        - type
        - v
        - r
        - s
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block. null when it is pending.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
    AccessListTransaction:
      title: AccessListTransaction
      type: object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - hash
        - input
        - nonce
        - to
        - value
        - transactionIndex
        - type
        - accessList
        - chainId
        - v
        - r
        - s
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block. null when it is pending.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        accessList:
          type: array
          description: An array of accessList.
          items:
            type: object
            properties:
              address:
                type: string
                format: 20-byte DATA
                description: Address of the contract.
              storageKeys:
                type: array
                description: An array of storage keys.
                items:
                  type: string
                  format: 32-byte DATA
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
    DynamicFeeTransaction:
      title: DynamicFeeTransaction
      type: object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - hash
        - input
        - nonce
        - to
        - value
        - transactionIndex
        - type
        - accessList
        - chainId
        - v
        - r
        - s
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        maxFeePerGas:
          type: string
          format: hex
          description: A maximum amount to pay for the transaction to execute.
        maxPriorityFeePerGas:
          type: string
          format: hex
          description: Gas tip cap for dynamic fee transaction in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block. null when it is pending.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        accessList:
          type: array
          description: An array of accessList.
          items:
            type: object
            properties:
              address:
                type: string
                format: 20-byte DATA
                description: Address of the contract.
              storageKeys:
                type: array
                description: An array of storage keys.
                items:
                  type: string
                  format: 32-byte DATA
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
    EthGetTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/LegacyTransaction'
            - $ref: '#/components/schemas/AccessListTransaction'
            - $ref: '#/components/schemas/DynamicFeeTransaction'
          example:
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
            gas: '0x19a28'
            gasPrice: '0x5d21dba00'
            hash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            input: '0xa9059cbb000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8000000000000000000000000000000000000000000000000000000000cd0a3c0'
            nonce: '0x1bea18'
            r: '0x85d848276f22f8ce5aa17cd27ded21269e17cacc258ef2aaece296497803aa9'
            s: '0x2d9ae07f349c66628b02db7033a8a35d18f6338c39f995d7e8336d635002df54'
            to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            transactionIndex: '0x3'
            type: '0x0'
            v: '0x25'
            value: '0x0'
    EthGetTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - title: TransactionIndexPosition
                description: Integer of the transaction index position.
                type: string
                format: hex
          example:
            - '0x27'
            - '0x0'
    EthGetTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/LegacyTransaction'
            - $ref: '#/components/schemas/AccessListTransaction'
            - $ref: '#/components/schemas/DynamicFeeTransaction'
          example:
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
            gas: '0x19a28'
            gasPrice: '0x5d21dba00'
            hash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            input: '0xa9059cbb000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8000000000000000000000000000000000000000000000000000000000cd0a3c0'
            nonce: '0x1bea18'
            r: '0x85d848276f22f8ce5aa17cd27ded21269e17cacc258ef2aaece296497803aa9'
            s: '0x2d9ae07f349c66628b02db7033a8a35d18f6338c39f995d7e8336d635002df54'
            to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            transactionIndex: '0x3'
            type: '0x0'
            v: '0x25'
            value: '0x0'
    EthGetTransactionByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionByHash
        params:
          type: array
          items:
            type: string
            format: hex
          description: Hash of a transaction.
          example:
            - '0x27'
    EthGetTransactionByHashResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/LegacyTransaction'
            - $ref: '#/components/schemas/AccessListTransaction'
            - $ref: '#/components/schemas/DynamicFeeTransaction'
          example:
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
            gas: '0x19a28'
            gasPrice: '0x5d21dba00'
            hash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            input: '0xa9059cbb000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8000000000000000000000000000000000000000000000000000000000cd0a3c0'
            nonce: '0x1bea18'
            r: '0x85d848276f22f8ce5aa17cd27ded21269e17cacc258ef2aaece296497803aa9'
            s: '0x2d9ae07f349c66628b02db7033a8a35d18f6338c39f995d7e8336d635002df54'
            to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            transactionIndex: '0x3'
            type: '0x0'
            v: '0x25'
            value: '0x0'
    schemas-EthGetTransactionByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionReceipt
        params:
          type: array
          items:
            type: string
            format: hex
          description: Hash of a transaction.
          example:
            - '0x27'
    TransactionReceiptObject:
      title: TransactionReceiptObject
      type: object
      required:
        - blockHash
        - blockNumber
        - contractAddress
        - cumulativeGasUsed
        - effectiveGasPrice
        - from
        - logs
        - logsBloom
        - status
        - to
        - transactionHash
        - transactionIndex
        - type
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in.
        blockNumber:
          type: string
          format: hex
          description: The block number where this transaction was in.
        contractAddress:
          type: string
          format: DATA
          description: The contract address created, if the transaction was a contract creation, otherwise null.
        cumulativeGasUsed:
          type: string
          format: hex
          description: The total amount of gas used when this transaction was executed in the block.
        effectiveGasPrice:
          type: string
          format: hex
          description: The actual value per gas deducted from the senders account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        logs:
          type: array
          items:
            type: object
          description: Array of log objects, which this transaction generated.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: Bloom filter for light clients to quickly retrieve related logs.
        status:
          type: string
          format: hex
          description: Either 1 (success) or 0 (failure).
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
      example:
        blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
        blockNumber: '0xd017a7'
        contractAddress: null
        cumulativeGasUsed: '0x8dc5d'
        effectiveGasPrice: '0x315c2f4800'
        from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
        gasUsed: '0xf6e9'
        logs:
          - address: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            data: '0x000000000000000000000000000000000000000000000000000000000cd0a3c0'
            logIndex: '0x13'
            removed: false
            topics:
              - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
              - '0x00000000000000000000000046705dfff24256421a05d056c29e81bdc09723b8'
              - '0x000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8'
            transactionHash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            transactionIndex: '0x3'
        logsBloom: '0x
        status: '0x1'
        to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
        transactionHash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
        transactionIndex: '0x3'
        type: '0x0'
    schemas-EthGetTransactionByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionReceiptObject'
    ethPendingTransactionsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_pendingTransactions
    ethPendingTransactionsResp:
      type: object
      properties:
        result:
          type: array
          description: An array of transactions.
          items:
            type: object
            required:
              - type
              - nonce
              - gasPrice
              - maxFeePerGas
              - maxPriorityFeePerGas
              - gas
              - value
              - v
              - r
              - s
              - chainId
              - accessList
              - hash
            properties:
              type:
                type: string
                format: hex
                description: An integer representing the type of the transaction.
              nonce:
                type: string
                format: hex
                description: The block number where this transaction was in.
              gasPrice:
                type: string
                format: hex
                nullable: true
                description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
              maxFeePerGas:
                type: string
                format: hex
                nullable: true
                description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
              maxPriorityFeePerGas:
                type: string
                format: hex
                nullable: true
                description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
              gas:
                type: string
                format: hex
                description: Gas provided by the sender.
              value:
                type: string
                format: hex
                description: Integer of values sent with this transaction.
              v:
                type: string
                format: hex
                description: ECDSA recovery id.
              r:
                type: string
                format: 32-byte DATA
                description: ECDSA recovery r.
              s:
                type: string
                format: 32-byte DATA
                description: ECDSA recovery s.
              chainId:
                type: string
                format: hex
                description: Chain id set on the requested node.
              accessList:
                type: array
                items:
                  type: object
                  required:
                    - address
                    - storageKeys
                  properties:
                    address:
                      type: string
                    storageKeys:
                      type: array
                      items:
                        type: string
              hash:
                type: string
                format: 32-byte DATA
                description: Hash of the transaction.
            example:
              type: '0x2'
              nonce: '0x4'
              gasPrice: null
              maxPriorityFeePerGas: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              gas: '0x9999'
              value: '0x1'
              input: 0x
              v: '0x1'
              r: '0xb6e16781d247b505aa8eaf363a6ea61e7c23c77ad64846ffda28e73e31304884'
              s: '0x5a296904cd009506cb5ed006af016d2c5dab255966af9ba6f8fc352f75e9b079'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              chainId: '0x2edaf'
              accessList: []
              hash: '0x9cfbea4942b334050660ec7207f3323ee13e3196b06279f922404384acbf7b47'
    EthResendReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_resend
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SendArgs'
              - title: GasPrice
                description: Hex representation of the integer
                type: string
                format: hex
              - title: GasLimit
                description: Hex representation of a uint64
                type: string
                format: hex
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityPerGas: '0x5d21dba00'
            - '0x5d21dba99'
            - '0x5d21dba99'
    schemas-KlaySendTransactionReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_sendTransaction
        params:
          type: array
          items:
            $ref: '#/components/schemas/TransactionArgsInEthSendTransaction'
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityFeePerGas: '0x5d21dba00'
    KlaySendTransactionResp:
      type: object
      properties:
        result:
          type: string
          format: 32-byte DATA
          description: The transaction hash or the zero hash if the transaction is not yet available.
          example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
    EthSignTransactionReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_signTransaction
        params:
          type: array
          items:
            title: transactionArgs
            type: object
            required:
              - from
              - gas
              - maxFeePerGas
              - maxPriorityFeePerGas
              - nonce
            properties:
              from:
                type: string
                format: 20-byte DATA
                description: The address from which the transaction is sent.
              to:
                type: string
                format: 20-byte DATA
                description: (not required when creating a new contract) The address to which the transaction is directed.
              gas:
                type: string
                format: hex
                description: The integer of the gas provided for the transaction's execution. It will return unused gas.
              maxFeePerGas:
                type: string
                format: hex
                description: The maximum amount to pay for the transaction's execution. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).
              maxPriorityFeePerGas:
                type: string
                format: hex
                description: Gas tip cap for dynamic fee transaction in peb. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).
              input:
                type: string
                format: DATA
                description: (optional) The hash of the method signature and the encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
              value:
                type: string
                format: hex
                description: (optional) The integer of values sent with this transaction.
              nonce:
                type: string
                format: hex
                description: The integer of a nonce.
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityFeePerGas: '0x5d21dba00'
              nonce: '0x1'
    EthSignTransactionResp:
      type: object
      properties:
        result:
          type: object
          required:
            - raw
            - tx
          properties:
            raw:
              type: string
              format: DATA
              description: A rawTransaction string (a RLP-encoded transaction string).
            tx:
              type: object
              required:
                - type
                - nonce
                - gasPrice
                - maxFeePerGas
                - maxPriorityFeePerGas
                - gas
                - value
                - v
                - r
                - s
                - chainId
                - accessList
                - hash
              properties:
                type:
                  type: string
                  format: hex
                  description: An integer representing the type of the transaction.
                nonce:
                  type: string
                  format: hex
                  description: The block number where this transaction was in.
                gasPrice:
                  type: string
                  format: hex
                  nullable: true
                  description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
                maxFeePerGas:
                  type: string
                  format: hex
                  nullable: true
                  description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
                maxPriorityFeePerGas:
                  type: string
                  format: hex
                  nullable: true
                  description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
                gas:
                  type: string
                  format: hex
                  description: Gas provided by the sender.
                value:
                  type: string
                  format: hex
                  description: Integer of values sent with this transaction.
                v:
                  type: string
                  format: hex
                  description: ECDSA recovery id.
                r:
                  type: string
                  format: 32-byte DATA
                  description: ECDSA recovery r.
                s:
                  type: string
                  format: 32-byte DATA
                  description: ECDSA recovery s.
                chainId:
                  type: string
                  format: hex
                  description: Chain id set on the requested node.
                accessList:
                  type: array
                  items:
                    type: object
                    required:
                      - address
                      - storageKeys
                    properties:
                      address:
                        type: string
                      storageKeys:
                        type: array
                        items:
                          type: string
                hash:
                  type: string
                  format: 32-byte DATA
                  description: Hash of the transaction.
          example:
            raw: '0x02f86f8302edaf048505d21dba008505d21dba00829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee0180c001a0b6e16781d247b505aa8eaf363a6ea61e7c23c77ad64846ffda28e73e31304884a05a296904cd009506cb5ed006af016d2c5dab255966af9ba6f8fc352f75e9b079'
            tx:
              type: '0x2'
              nonce: '0x4'
              gasPrice: null
              maxPriorityFeePerGas: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              gas: '0x9999'
              value: '0x1'
              input: 0x
              v: '0x1'
              r: '0xb6e16781d247b505aa8eaf363a6ea61e7c23c77ad64846ffda28e73e31304884'
              s: '0x5a296904cd009506cb5ed006af016d2c5dab255966af9ba6f8fc352f75e9b079'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              chainId: '0x2edaf'
              accessList: []
              hash: '0x9cfbea4942b334050660ec7207f3323ee13e3196b06279f922404384acbf7b47'
    EthChainIdResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Chain id set on the requested node.
          example: '0x2019'
    CoinbaseReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_coinbase
    CoinbaseResp:
      type: object
      properties:
        result:
          type: string
          format: 20-byte DATA
          description: The current coinbase address.
          example: '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    EthEtherbaseReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_etherbase
    EthEtherbaseResp:
      type: object
      properties:
        result:
          type: string
          format: 20-byte DATA
          description: The current etherbase address.
          example: '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    EthGasPriceResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the current gas price in peb.
          example: '0xAE9F7BCC00'
    EthFeeHistoryReq:
      type: object
      properties:
        method:
          type: string
          default: eth_feeHistory
        params:
          type: array
          items:
            anyOf:
              - title: BlockCount
                type: string
                format: Hexadecimal
                description: Number of blocks in the requested range expressed as a hexidecimal number. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
              - $ref: '#/components/schemas/BlockNumberOrTag'
              - $ref: '#/components/schemas/RewardPercentiles'
          example:
            - '0x10'
            - latest
            - - 0.1
              - 0.2
              - 0.3
    EthFeeHistoryResp:
      type: object
      properties:
        result:
          type: object
          required:
            - oldestBlock
            - baseFeePerGas
            - gasUsedRatio
            - reward
          properties:
            oldestBlock:
              type: string
              format: hex
              description: Lowest number block of the returned range expressed as a hexidecimal number.
            baseFeePerGas:
              $ref: '#/components/schemas/BaseFeePerGas'
            gasUsedRatio:
              type: array
              description: An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
              items:
                type: number
                format: float
            reward:
              $ref: '#/components/schemas/Reward'
          example:
            oldestBlock: '0xa5b'
            reward:
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x5d21dba00'
                - '0x5d21dba00'
                - '0x5d21dba00'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x5d21dba00'
                - '0x5d21dba00'
                - '0x5d21dba00'
              - - '0x0'
                - '0x0'
                - '0x0'
            baseFeePerGas:
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
            gasUsedRatio:
              - 0
              - 0
              - 0
              - 0
              - 0
              - 0.0002952004000002952
              - 0
              - 0
              - 0.00029504250000029504
              - 0
              - 0
              - 0.0002963777000002964
              - 0
              - 0
              - 0
              - 0
    EthMaxPriorityFeePerGasReq:
      type: object
      properties:
        method:
          type: string
          default: eth_maxPriorityFeePerGas
    EthMaxPriorityFeePerGasResp:
      type: object
      properties:
        result:
          type: string
          description: Integer of the current gas price in peb.
          format: hex
          example: '0xAE9F7BCC00'
    EthArrayOfLog:
      title: EthArrayOfLog
      type: array
      items:
        anyOf:
          - type: string
            format: 32-byte DATA
            title: BlockHash
            description: For filters created with eth_newBlockFilter, the return are block hashes (32-byte DATA), e.g., ["0x3454645634534..."].
          - type: string
            title: TransactionHash
            format: 32-byte DATA
            description: For filters created with eth_newPendingTransactionFilter, the return are transaction hashes (32-byte DATA), e.g., ["0x6345343454645..."].
          - $ref: '#/components/schemas/LogObject'
      description: Array of log objects, or an empty array if nothing has changed since last poll.
      example:
        - address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
          topics:
            - '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
          data: '0x0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007b'
          blockNumber: '0x54'
          transactionHash: '0xcd4703cd62bd930d4652999bce8dcb75b7ade49d922fa42dc11e568c52a5fa6f'
          transactionIndex: '0x0'
          blockHash: '0x9a49f30f1d1876ff3913bd0aa58f328822e7a369cb13e0640b82234f26e781bb'
          logIndex: '0x0'
          removed: false
    EthGetFilterChangesResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthArrayOfLog'
    KlayGetFilterLogsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getFilterLogs
        params:
          type: array
          items:
            title: id
            type: string
            format: hex
          description: The filter id
          example:
            - '0xd32fd16b6906e67f6e2b65dcf48fc272'
    schemas-KlayGetFilterLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthArrayOfLog'
    EthGetLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthArrayOfLog'
    EthNewFilterReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_newFilter
        params:
          type: array
          items:
            $ref: '#/components/schemas/schemas-FilterOptions'
          example:
            - fromBlock: earliest
              toBlock: latest
              address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              topics:
                - '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
    EthNewFilterResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: A filter id
          example: '0xd32fd16b6906e67f6e2b65dcf48fc272'
    KlayUninstallFilterReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_uninstallFilter
        params:
          type: array
          description: A filter id
          items:
            title: Filter
            type: string
            format: hex
          example:
            - '0xb'
    KlayUninstallFilterResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the filter was successfully uninstalled, otherwise false.
          example: true
    EthGetProofResp:
      type: object
      properties:
        result:
          type: object
          required:
            - balance
            - codeHash
            - nonce
            - storageHash
            - accountProof
            - storageProof
          description: Object - A account object
          properties:
            balance:
              type: string
              format: hex
              description: the balance of the account. See eth_getBalance
            codeHash:
              type: string
              format: 32-byte DATA
              description: hash of the code of the account. For a simple Account without code it will return
            nonce:
              type: string
              format: hex
              description: nonce of the account. See eth-getTransactionCount
            storageHash:
              type: string
              format: DATA
              description: SHA3 of the StorageRoot. All storage will deliver a MerkleProof starting with this rootHash.
            accountProof:
              type: array
              items:
                type: string
              description: Array of rlp-serialized MerkleTree-Nodes, starting with the stateRoot-Node, following the path of the SHA3 (address) as key.
            storageProof:
              type: array
              items:
                type: object
                required:
                  - key
                  - value
                  - proof
                properties:
                  key:
                    type: string
                    format: hex
                    description: the requested storage key
                  value:
                    type: string
                    format: hex
                    description: the storage value
                  proof:
                    type: array
                    items:
                      type: string
                    description: Array of rlp-serialized MerkleTree-Nodes, starting with the storageHash-Node, following the path of the SHA3 (key) as path.
              description: Array of storage-entries as requested. Each entry is an object with these properties
    EthGetHashrateReq:
      type: object
      properties:
        method:
          type: string
          default: eth_getHashrate
    EthGetHashrateResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          example: '0x0'
    EthGetWorkReq:
      type: object
      properties:
        method:
          type: string
          default: eth_getWork
    EthGetWorkResp:
      type: object
      properties:
        result:
          type: array
          items:
            type: string
            format: 32-byte DATA
          example: []
    EthHashRateReq:
      type: object
      properties:
        method:
          type: string
          default: eth_hashrate
    EthHashRateResp:
      type: object
      properties:
        result:
          type: string
          description: The number of hashes per second.
          format: hex
          example: '0x0'
    EthSubmitHashrateReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_submitHashrate
        params:
          type: array
          items:
            anyOf:
              - title: Hashrate
                description: A hexadecimal string representation (32 bytes) of the hash rate.
                type: string
                format: 32-byte DATA
              - title: Id
                description: A random hexadecimal(32 bytes) ID identifying the client.
                type: string
                format: 32-byte DATA
          example:
            - '0x5'
            - '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
    EthSubmitHashrateResp:
      type: object
      properties:
        result:
          type: boolean
          description: Returns true if submitting went through succesfully and false otherwise.
          example: false
    KlaySubmitWorkReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_submitWork
        params:
          type: array
          items:
            anyOf:
              - title: Nonce
                description: The nonce found (64 bits)
                type: string
                format: 8-byte DATA
              - title: PowHash
                description: The header’s pow-hash (256 bits)
                type: string
                format: 32-byte DATA
              - title: MixDigest
                description: The mix digest (256 bits)
                type: string
                format: 32-byte DATA
          example:
            - '0x0000000000000001'
            - '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
            - '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
    KlaySubmitWorkResp:
      type: object
      properties:
        result:
          type: boolean
          description: Returns true if the provided solution is valid, otherwise false.
          example: false
    PersonalDeriveAccountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_deriveAccount
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Url
                description: Wallet url
              - type: string
                title: Path
                description: derivation path
              - type: boolean
                title: Pin
                description: optionally pinning
          example:
            - url
            - path
            - true
    PersonalEcRecoverReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_ecRecover
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Message
                description: A message.
              - type: string
                title: Signature
                description: The signature.
          example:
            - '0xdead'
            - '0xccb8cce176b01fdc8f7ac3c101b8eb3b9005e938a60800e517624419dd8b7fba0e4598bdf1c4fa1743e1288e89b8b7090cc11f4b3640aafcbc71896ec73eec241b'
    PersonalImportRawKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_importRawKey
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Keydata
                description: The unencrypted private key (hex string without leading '0x') or a Klaytn wallet key.
              - type: string
                title: Passphrase
                description: The pass phrase for encryption.
          example:
            - cd87934ee007b7a458fa00dc0314fff8b2bd43b3071f46c820c379e483b4fd8e
            - gr8=B!0@uc$b
    ListWallets:
      type: object
      required:
        - url
        - status
        - accounts
      properties:
        url:
          type: string
          description: Wallet url
        status:
          type: string
          description: Locking status
        failure:
          type: string
          description: Error condition
        accounts:
          type: array
          items:
            type: object
          description: The list of account addresses.
    PersonalListWalletsResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/ListWallets'
          example:
            - url: keystore:///
              status: Locked
              accounts:
                - address: '0x336010a2f91728ffe01414a87ae5d8af55f310c6'
                  url: keystore://
    PersonalOpenWalletReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_openWallet
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Url
                description: Wallet url
              - type: string
                title: Passphrase
                description: passphrase for wallet
          example:
            - keystore://
            - gr8=B!0@uc$b
    PersonalReplaceRawKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_replaceRawKey
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Keydata
                description: The unencrypted private key (hex string without leading '0x') or a Klaytn wallet key.
              - type: string
                title: OldPassphrase
                description: The passphrase to decrypt the old private key.
              - type: string
                title: NewPassphrase
                description: The passphrase to encrypt the new private key.
          example:
            - '0xcd87934ee007b7a458fa00dc0314fff8b2bd43b3071f46c820c379e483b4fd8e'
            - df4=B@0@xe$d
            - gr8=B!0@uc$b
    PersonalSendAccountUpdateReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_sendAccountUpdate
        params:
          type: array
          items:
            anyOf:
              - type: object
                title: Tx
                description: A transaction object. from and key must be specified.
              - type: string
                title: Passphrase
                description: The passphrase to decrypt the private key of tx.from.
          example:
            - from: '0x1d4e05bb72677cb8fa576149c945b57d13f855e4'
              key: '0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8'
            - gr8=B!0@uc$b
    PersonalSendTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_sendTransaction
        params:
          type: array
          items:
            anyOf:
              - type: object
                title: Tx
                description: A transaction object. from is a required field. to, value, gas, gasPrice and nonce are optional fields.
              - type: string
                title: Passphrase
                description: The passphrase to decrypt the private key of tx.from.
          example:
            - from: '0x1d4e05bb72677cb8fa576149c945b57d13f855e4'
              to: '0xafa3f8684e54059998bc3a7b0d2b0da075154d66'
              value: '0x1230000000'
            - gr8=B!0@uc$b
    PersonalSendValueTransferReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_sendValueTransfer
        params:
          type: array
          items:
            anyOf:
              - type: object
                title: Tx
                description: A transaction object. from, to, and value must be specified.
              - type: string
                title: Passphrase
                description: The passphrase to decrypt the private key of tx.from.
          example:
            - from: '0x1d4e05bb72677cb8fa576149c945b57d13f855e4'
              to: '0xafa3f8684e54059998bc3a7b0d2b0da075154d66'
              value: '0x1230000000'
            - gr8=B!0@uc$b
    PersonalSignReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_sign
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Message
                description: A message to sign.
              - type: string
                title: Account
                description: The account address.
              - type: string
                title: Password
                description: The pass phrase used for signing.
          example:
            - '0xdead'
            - '0x9b2055d370f73ec7d8a03e965129118dc8f5bf83'
            - gr8=B!0@uc$b
    PersonalSignTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_signTransaction
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/KlaytnTransactionTypes'
              - type: string
                title: Password
                description: password
          example:
            - from: '0x77982323172e5b6182539d3522d5a33a944206d4'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              gas: '0x1000000'
              nonce: '0x2'
              gasPrice: '0x25000000000'
    PersonalSignTransactionResp:
      type: object
      properties:
        result:
          type: object
          required:
            - raw
            - tx
            - password
          properties:
            raw:
              type: string
              description: Signed raw transaction
            tx:
              type: object
              description: Transaction object including the sender's signature
            password:
              type: string
              description: Sender's password
          example:
            raw: '0xf86c0286025000000000840100000094cd6bfdb523a4d030890d28bf1eb6ef36307c9aaa8301000080820fe8a056d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1a03443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
            tx:
              nonce: '0x2'
              gasPrice: '0x5d21dba00'
              gas: '0x1000000'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              input: 0x
              v: '0xfe8'
              r: '0x56d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1'
              s: '0x3443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
              hash: '0xb53cc9128a19c3916c0de1914725b7337bba84666c2556d8682c72ca34c6874c'
            password: gr8=B!0@uc$b
    PersonalUnlockAccountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: personal_unlockAccount
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Address
                description: The account address to unlock.
              - type: string
                title: Passphrase
                description: the passphrase used for the encryption.
              - type: integer
                title: Duration
                default: 300
                description: (optional) the unlock duration (default to 300 seconds).
          example:
            - '0x5e97870f263700f46aa00d967821199b9bc5a120'
            - foo
            - 30
    BacktraceAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_backtraceAt
        params:
          description: The logging backtrace location specified as \<filename>:\<line>.
          items:
            title: Location
            type: string
          example:
            - server.go:443
    BacktraceAtResp:
      type: object
      properties:
        result:
          type: string
          example: null
    VerbosityReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_verbosity
        params:
          description: The logging verbosity level.
          items:
            title: Level
            type: integer
          example:
            - 3
    VerbosityResp:
      type: object
      properties:
        result:
          type: string
          example: null
    VerbosityByIDReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_verbosityByID
        params:
          items:
            anyOf:
              - title: Id
                description: The module id.
                type: integer
              - title: Level
                description: The logging verbosity level.
                type: integer
          example:
            - 1
            - 3
    VerbosityByIDResp:
      type: object
      properties:
        result:
          type: string
          example: null
    VerbosityByNameReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_verbosityByName
        params:
          items:
            anyOf:
              - title: Name
                description: The module name.
                type: string
              - title: Level
                description: The logging verbosity level.
                type: integer
          example:
            - API
            - 1
    VerbosityByNameResp:
      type: object
      properties:
        result:
          type: string
          example: null
    VmoduleReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_vmodule
        params:
          description: The module name for logging.
          items:
            title: Module
            type: string
          example:
            - p2p=4
    VmoduleResp:
      type: object
      properties:
        result:
          type: string
          example: null
    ChaindbCompactReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: debug_chaindbCompact
    chaindbPropertyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_chaindbProperty
        params:
          type: array
          items:
            type: string
          example:
            - string
    DebugDumpBlockReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_dumpBlock
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - latest
    DebugDumpBlockResp:
      type: object
      properties:
        result:
          type: object
          required:
            - accounts
            - root
          description: The block information.
          properties:
            accounts:
              type: object
            root:
              type: string
          example:
            accounts:
              '0000000000000000000000000000000000000035':
                balance: '12800000000000000000'
                nonce: 0
                root: 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421
                codeHash: 62b00472fac99d94ccc52f5addac43d54c129cd2c6d2357c9557abea67efdec5
                code: 6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a723058201307c3756f4e627009187dcdbc0b3e286c13b98ba9279a25bfcc18dd8bcd73e40029
                storage: {}
              '0000000000000000000000000000000000000036':
                balance: '12800000000000000000'
                nonce: 1
                root: 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421
                codeHash: 3f34b5d7038ae652086ba4847ede2668b26a50107c5258d1412f764b942e2661
                code: 6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a723058201307c3756f4e627009187dcdbc0b3e286c13b98ba9279a25bfcc18dd8bcd73e40029
                storage: {}
            root: 70383c826d1161ec2f12d799023317d8da7775dd47b8502d2d7ef646d094d3a5
    DumpStateTrieResp:
      type: object
      properties:
        result:
          type: object
          required:
            - root
            - tries
          description: The dump state Trie result
          properties:
            root:
              type: string
            tries:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  hash:
                    type: string
                  parent:
                    type: string
                  path:
                    type: string
          example:
            root: '0xd62748ae1ba12975f61470f06912c05d92b4366611338e57ee165802d392e628'
            tries:
              - type: state
                hash: '0xd62748ae1ba12975f61470f06912c05d92b4366611338e57ee165802d392e628'
                parent: '0x0000000000000000000000000000000000000000000000000000000000000000'
                path: 0x
    GetBlockRlpReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getBlockRlp
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - latest
    GetModifiedAccountsByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getModifiedAccountsByHash
        params:
          type: array
          items:
            anyOf:
              - type: string
                format: 32-byte DATA
                title: StartBlockHash
                description: The first block number of the range to check.
              - type: string
                format: 32-byte DATA
                title: EndBlockHash
                description: (optional) The last block number of the range.
          example:
            - '0xcc1ac1e244f9f83b812b5d77ada1c399f02ea7b61e72ff31789d9ef6dad45442'
            - '0x437e92b2d30a0a828dfdd23b837a8ddf8c8b79c222e191d16c47afbf5a6aaed7'
    GetModifiedAccountsByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getModifiedAccountsByNumber
        params:
          type: array
          items:
            anyOf:
              - type: integer
                title: StartBlockNum
                description: The first block number of the range to check
              - type: integer
                title: EndBlockNum
                description: (optional) The last block number of the range
          example:
            - 128
    GetModifiedStorageNodesByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getModifiedStorageNodesByNumber
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Address
                description: The contract address.
              - type: integer
                title: StartBlockNum
                description: The first block number of the range to check.
              - type: integer
                title: EndBlockNum
                description: The last block number of the range.
          example:
            - '0x77982323172e5b6182539d3522d5a33a944206d4'
            - 100
            - 200
    PrintBlockReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_printBlock
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x80'
    SeedHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_seedHash
        params:
          type: array
          items:
            type: integer
            format: uint64
          description: The block number.
          example:
            - 100
    DebugStorageRangeAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_storageRangeAt
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockHash'
              - title: TxIndex
                type: integer
              - $ref: '#/components/schemas/Address'
              - title: KeyStart
                type: string
                format: hex
              - title: MaxResult
                type: integer
          example:
            - '0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21'
            - 1
            - '0x73a7d19d14f7dfac5b799e405e22133b2adc57a6'
            - '0x12'
            - 1
    TracingOptions:
      title: TracingOptions
      type: object
      properties:
        disableStorage:
          type: boolean
          description: Setting this to true will disable storage capture (default = false).
          default: false
        disableMemory:
          type: boolean
          description: Setting this to true will disable memory capture (default = false).
          default: false
        disableStack:
          type: boolean
          description: Setting this to true will disable stack capture (default = false).
          default: false
        timeout:
          type: string
          description: Overrides the default timeout of 5 seconds for JavaScript-based tracing calls. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
        trace:
          type: string
          enum:
            - 4byteTracer
            - callTracer
            - fastCallTracer
            - evmdisTracer
            - noopTracer
            - opcountTracer
            - prestateTracer
            - revertTracer
            - unigramTracer
            - bigramTracer
            - trigramTracer
          description: |
            Setting this will enable JavaScript-based transaction tracing, described in the next section. If set, the previous four arguments will be ignored. The predefined tracers can also be used as the following table.
            | Tracer Name | Description |
            |-----|-----|
            | 4byteTracer | 4byteTracer searches for 4byte-identifiers, and collects them for post-processing. It collects the methods identifiers along with the size of the supplied data, so a reversed signature can be matched against the size of the data. |
            | callTracer | callTracer is a full-blown transaction tracer that extracts and reports all the internal calls made by a transaction, along with any useful information. |
            | fastCallTracer | fastCallTracer is a Go-native version of callTracer. Since it is not executed on JavaScript VM, it shows more than 10x speedup compared to callTracer. Please use fastCallTracer instead of callTracer if the performance is the matter of the first importance. |
            | evmdisTracer | evmdisTracer returns sufficient information from a trace to perform evmdis-style disassembly. |
            | noopTracer | noopTracer is just the barebone boilerplate code required from a JavaScript object to be usable as a transaction tracer. |
            | opcountTracer | opcountTracer is a sample tracer that just counts the number of instructions executed by the KLVM before the transaction terminated. |
            | prestateTracer | prestateTracer outputs sufficient information to create a local execution of the transaction from a custom assembled genesis block. |
            | revertTracer | revertTracer outputs the error string of REVERT. If the execution is not reverted, it outputs an empty string. |
            | unigramTracer | unigramTracer returns the number of occurrences of each opcode. |
            | bigramTracer | bigramTracer returns the number of occurrences of two consecutive opcodes. |
            | trigramTracer | trigramTracer returns the number of occurrences of three consecutive opcodes. |
    DebugTraceBadBlockReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBadBlock
        params:
          type: array
          items:
            anyOf:
              - title: Hash
                type: string
                format: 32-byte DATA
                description: Hash of a block.
              - $ref: '#/components/schemas/TracingOptions'
          example:
            - '0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6'
    DebugTraceBadBlockResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
                  properties:
                    gas:
                      type: integer
                    failed:
                      type: boolean
                    returnValue:
                      type: string
                    structLogs:
                      type: array
                      items:
                        type: object
          example:
            - result:
                failed: false
                gas: 67100
                returnValue: ''
                structLogs: []
            - result:
                failed: false
                gas: 195179
                returnValue: ''
                structLogs:
                  - gas: 67100
                    failed: false
                    returnValue: ''
                    structLogs: []
                  - ...: null
    DebugTraceBlockReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlock
        params:
          type: array
          items:
            anyOf:
              - title: BlockRlp
                type: string
                description: The RLP-encoded block.
              - $ref: '#/components/schemas/TracingOptions'
          example:
            - '0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4'
    DebugTraceBlockResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
          example:
            - result:
                failed: false
                gas: 247922
                returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
                structLogs:
                  - pc: 2
                    op: PUSH1
                    gas: 891341
                    gasCost: 3
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                    memory: []
                    storage: {}
                  - ...: null
    DebugTraceBlockByHashReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockByHash
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockHash'
              - $ref: '#/components/schemas/TracingOptions'
          example:
            - '0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19'
    DebugTraceBlockByHashResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
          example:
            - result:
                failed: false
                gas: 247922
                returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
                structLogs:
                  - pc: 0
                    op: PUSH1
                    gas: 891344
                    gasCost: 3
                    depth: 1
                    stack: []
                    memory: []
                    storage: {}
                  - ...: null
                  - ...: null
                  - ...: null
    BlockNumberInTraceBlockByNumber:
      title: Number
      oneOf:
        - type: number
          title: number
        - format: hex
          type: string
          title: string
    DebugTraceBlockByNumberReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockByNumber
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/BlockNumberInTraceBlockByNumber'
              - $ref: '#/components/schemas/TracingOptions'
          example:
            - 1449
    DebugTraceBlockByNumberResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
          example:
            - result:
                gas: 247922
                failed: false
                returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
                structLogs:
                  - pc: 0
                    op: PUSH1
                    gas: 891344
                    gasCost: 3
                    depth: 1
                    stack: []
                    memory: []
                    storage: {}
                  - pc: 2
                    op: PUSH1
                    gas: 891341
                    gasCost: 3
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                    memory: []
                    storage: {}
                  - pc: 4
                    op: MSTORE
                    gas: 891338
                    gasCost: 12
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                      - '0000000000000000000000000000000000000000000000000000000000000040'
                    memory:
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                    storage: {}
                  - pc: 5
                    op: CALLVALUE
                    gas: 891326
                    gasCost: 2
                    depth: 1
                    stack: []
                    memory:
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                    storage: {}
                  - ...
                  - pc: 322
                    op: RETURN
                    gas: 865278
                    gasCost: 0
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000236'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                    memory:
                      - 60806040526004361061004c576000357c010000000000000000000000000000
                      - 0000000000000000000000000000900463ffffffff16806341c0e1b514610051
                      - 578063cfae321714610068575b600080fd5b34801561005d57600080fd5b5061
                      - 00666100f8565b005b34801561007457600080fd5b5061007d610168565b6040
                      - '5180806020018281038252838181518152602001915080519060200190808383'
                      - 60005b838110156100bd5780820151818401526020810190506100a2565b5050
                      - 5050905090810190601f1680156100ea5780820380516001836020036101000a
                      - 031916815260200191505b509250505060405180910390f35b60008090549061
                      - 01000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffff
                      - ffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffff
                      - ffffffffffffff161415610166573373ffffffffffffffffffffffffffffffff
                      - ffffffff16ff5b565b6060600180546001816001161561010002031660029004
                      - 80601f0160208091040260200160405190810160405280929190818152602001
                      - 828054600181600116156101000203166002900480156102005780601f106101
                      - d557610100808354040283529160200191610200565b82019190600052602060
                      - 0020905b8154815290600101906020018083116101e357829003601f16820191
                      - 5b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6
                      - c4e54ad49014e2faa152e49e7f9d927c932c7287002900000000000000000000
                    storage:
                      '0000000000000000000000000000000000000000000000000000000000000000': 000000000000000000000000b0945862f63b832849a5f20b19e9f8188eb2230a
                      '0000000000000000000000000000000000000000000000000000000000000001': '0000000000000000000000000000000000000000000000000000000000000000'
    DebugTraceBlockByNumberRangeReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockByNumberRange
        params:
          type: array
          example:
            - 21
            - 30
          items:
            anyOf:
              - title: StartBlock
                type: number
                description: Tracing start block number.
                example: 21
              - title: EndBlock
                type: number
                description: Tracing end block number.
                example: 30
              - $ref: '#/components/schemas/TracingOptions'
    DebugTraceBlockByNumberRangeResp:
      type: object
      properties:
        result:
          type: object
          description: Value contains the structured logs created during the execution of KLVM.
          additionalProperties:
            x-additionalPropertiesName: StructuredLogs
            type: object
            properties:
              block:
                type: string
              hash:
                type: string
              traces:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: object
                    txHash:
                      type: string
          example:
            '21':
              block: '0x15'
              hash: '0x24b0a90822e63295623e6d8f5a8e5d47cead5c8d5854e44db00dc42d28e0850e'
              traces:
                - result:
                    ...: null
                  txHash: '0x43ed7e441db8e90f377d74b5d61c6d7d8b85ffd277b965c9f275ce7e93fb1090'
                - result:
                    ...: null
                  txHash: '0x1a448049b21d39cd4320ab95f18b8e91d687bfc7136268f50e041e439181fa0d'
            '22':
              ...: null
            ...: null
    DebugTraceBlockFromFileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockFromFile
        params:
          type: array
          items:
            anyOf:
              - title: FileName
                type: string
                description: The file name which contains the RLP of the block.
              - $ref: '#/components/schemas/TracingOptions'
          example:
            - block.rlp
    DebugTraceBlockFromFileResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            required:
              - failed
              - gas
              - returnValue
              - structLogs
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
                  properties:
                    gas:
                      type: integer
                    failed:
                      type: boolean
                    returnValue:
                      type: string
                    structLogs:
                      type: array
                      items:
                        type: object
          example:
            failed: false
            gas: 247922
            returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
            structLogs:
              - pc: 2
                op: PUSH1
                gas: 891341
                gasCost: 3
                depth: 1
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                memory: []
                storage: {}
              - ...: null
    DebugTraceChainReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceChain
        params:
          type: array
          example:
            - 21
            - 30
            - {}
          items:
            anyOf:
              - title: StartBlockNumber
                type: integer
                description: Tracing start block number.
              - title: EndBlockNumber
                type: integer
                description: Tracing end block number.
              - $ref: '#/components/schemas/TracingOptions'
    DebugTraceChainResp:
      type: object
      properties:
        result:
          type: object
          description: Returns the structured logs created during the execution of EVM between two blocks as a JSON object.
    DebugTraceTransactionReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceTransaction
        params:
          type: array
          items:
            anyOf:
              - title: TxHash
                type: string
                description: The hash of the transaction.
                example: '0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09'
              - $ref: '#/components/schemas/TracingOptions'
          example:
            - '0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09'
    DebugTraceTransactionResp:
      type: object
      properties:
        result:
          type: object
          description: The structured logs created during the execution of KLVM.
          required:
            - failed
            - gas
            - returnValue
            - structLogs
          properties:
            failed:
              type: boolean
            gas:
              type: integer
            returnValue:
              type: string
            structLogs:
              type: array
              items:
                type: object
          example:
            failed: false
            gas: 247922
            returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
            structLogs:
              - depth: 1
                gas: 891344
                gasCost: 3
                memory: []
                op: PUSH1
                pc: 0
                stack: []
                storage: {}
              - depth: 1
                gas: 891341
                gasCost: 3
                memory: []
                op: PUSH1
                pc: 2
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                storage: {}
              - depth: 1
                gas: 891338
                gasCost: 12
                memory:
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                op: MSTORE
                pc: 4
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                  - '0000000000000000000000000000000000000000000000000000000000000040'
                storage: {}
              - depth: 1
                gas: 891326
                gasCost: 2
                memory:
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                op: CALLVALUE
                pc: 5
                stack: []
                storage: {}
              - ...: null
              - depth: 1
                gas: 865281
                gasCost: 3
                memory:
                  - 60806040526004361061004c576000357c010000000000000000000000000000
                  - 0000000000000000000000000000900463ffffffff16806341c0e1b514610051
                  - 578063cfae321714610068575b600080fd5b34801561005d57600080fd5b5061
                  - 00666100f8565b005b34801561007457600080fd5b5061007d610168565b6040
                  - '5180806020018281038252838181518152602001915080519060200190808383'
                  - 60005b838110156100bd5780820151818401526020810190506100a2565b5050
                  - 5050905090810190601f1680156100ea5780820380516001836020036101000a
                  - 031916815260200191505b509250505060405180910390f35b60008090549061
                  - 01000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffff
                  - ffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffff
                  - ffffffffffffff161415610166573373ffffffffffffffffffffffffffffffff
                  - ffffffff16ff5b565b6060600180546001816001161561010002031660029004
                  - 80601f0160208091040260200160405190810160405280929190818152602001
                  - 828054600181600116156101000203166002900480156102005780601f106101
                  - d557610100808354040283529160200191610200565b82019190600052602060
                  - 0020905b8154815290600101906020018083116101e357829003601f16820191
                  - 5b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6
                  - c4e54ad49014e2faa152e49e7f9d927c932c7287002900000000000000000000
                op: PUSH1
                pc: 320
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000236'
                storage:
                  '0': 000000000000000000000000b0945862f63b832849a5f20b19e9f8188eb2230a
                  '1': '0000000000000000000000000000000000000000000000000000000000000000'
              - depth: 1
                gas: 865278
                gasCost: 0
                memory:
                  - 60806040526004361061004c576000357c010000000000000000000000000000
                  - 0000000000000000000000000000900463ffffffff16806341c0e1b514610051
                  - 578063cfae321714610068575b600080fd5b34801561005d57600080fd5b5061
                  - 00666100f8565b005b34801561007457600080fd5b5061007d610168565b6040
                  - '5180806020018281038252838181518152602001915080519060200190808383'
                  - 60005b838110156100bd5780820151818401526020810190506100a2565b5050
                  - 5050905090810190601f1680156100ea5780820380516001836020036101000a
                  - 031916815260200191505b509250505060405180910390f35b60008090549061
                  - 01000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffff
                  - ffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffff
                  - ffffffffffffff161415610166573373ffffffffffffffffffffffffffffffff
                  - ffffffff16ff5b565b6060600180546001816001161561010002031660029004
                  - 80601f0160208091040260200160405190810160405280929190818152602001
                  - 828054600181600116156101000203166002900480156102005780601f106101
                  - d557610100808354040283529160200191610200565b82019190600052602060
                  - 0020905b8154815290600101906020018083116101e357829003601f16820191
                  - 5b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6
                  - c4e54ad49014e2faa152e49e7f9d927c932c7287002900000000000000000000
                op: RETURN
                pc: 322
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000236'
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                storage:
                  '0': 000000000000000000000000b0945862f63b832849a5f20b19e9f8188eb2230a
                  '1': '0000000000000000000000000000000000000000000000000000000000000000'
    TracerCallObject:
      title: TracerCallObject
      type: object
      description: The tracer call object. See the next table for the object's properties.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is simulated to have been sent from. The 0x00..0 address is used if no address is specified.
        to:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is sent to.
        input:
          type: string
          format: DATA
          description: (optional) Hash of the method signature and encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
    TracerObject:
      title: TracerObject
      type: object
      description: Tracer type.
      properties:
        tracer:
          type: string
          enum:
            - 4byteTracer
            - callTracer
            - fastCallTracer
            - evmdisTracer
            - noopTracer
            - opcountTracer
            - prestateTracer
            - revertTracer
            - unigramTracer
            - bigramTracer
            - trigramTracer
          description: |
            Setting this will enable JavaScript-based transaction tracing, described in the next section. If set, the previous four arguments will be ignored. The predefined tracers can also be used as the following table.
            | Tracer Name | Description |
            |-----|-----|
            | 4byteTracer | 4byteTracer searches for 4byte-identifiers, and collects them for post-processing. It collects the methods identifiers along with the size of the supplied data, so a reversed signature can be matched against the size of the data. |
            | callTracer | callTracer is a full-blown transaction tracer that extracts and reports all the internal calls made by a transaction, along with any useful information. |
            | fastCallTracer | fastCallTracer is a Go-native version of callTracer. Since it is not executed on JavaScript VM, it shows more than 10x speedup compared to callTracer. Please use fastCallTracer instead of callTracer if the performance is the matter of the first importance. |
            | evmdisTracer | evmdisTracer returns sufficient information from a trace to perform evmdis-style disassembly. |
            | noopTracer | noopTracer is just the barebone boilerplate code required from a JavaScript object to be usable as a transaction tracer. |
            | opcountTracer | opcountTracer is a sample tracer that just counts the number of instructions executed by the KLVM before the transaction terminated. |
            | prestateTracer | prestateTracer outputs sufficient information to create a local execution of the transaction from a custom assembled genesis block. |
            | revertTracer | revertTracer outputs the error string of REVERT. If the execution is not reverted, it outputs an empty string. |
            | unigramTracer | unigramTracer returns the number of occurrences of each opcode. |
            | bigramTracer | bigramTracer returns the number of occurrences of two consecutive opcodes. |
            | trigramTracer | trigramTracer returns the number of occurrences of three consecutive opcodes. |
    DebugTraceCallReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceCall
        params:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/TracerCallObject'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
              - $ref: '#/components/schemas/TracerObject'
            example:
              - to: '0x46eda75e7ca73cb1c2f83c3927211655420dbc44'
                data: '0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7'
              - latest
              - tracer: revertTracer
    StandardTracingOptions:
      title: StandardTracingOptions
      type: object
      description: You may give trace API function a secondary optional argument, which specifies the options for this specific call.
      properties:
        disableStorage:
          type: boolean
          default: false
          description: Setting this to true will disable storage capture.
        disableMemory:
          type: boolean
          default: false
          description: Setting this to true will disable memory capture.
        disableStack:
          type: boolean
          default: false
          description: Setting this to true will disable stack capture.
        txHash:
          type: string
          description: Setting this value will trace only the specified transaction.
    DebugStandardTraceBadBlockToFileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_standardTraceBadBlockToFile
        params:
          type: array
          items:
            anyOf:
              - title: Hash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              - $ref: '#/components/schemas/StandardTracingOptions'
          example:
            - '0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6'
    DebugStandardTraceBadBlockToFileResp:
      type: object
      properties:
        result:
          type: array
          description: A list of file names. Each represents a tracing result of a transaction. The format of a file name is block_{first 4 bytes of the block hash}-{transaction index}-{first 4 bytes of the transaction hash}-{random string}.
          items:
            type: string
          example:
            - /var/folders/v9/z3vq7j4d42b2jq_vxsv0km6h0000gn/T/block_0x1d5ba00e-0-0xae6f8ed4-608268252
            - /var/folders/v9/z3vq7j4d42b2jq_vxsv0km6h0000gn/T/block_0x1d5ba00e-1-0x2e37321f-315574667
    DebugStandardTraceBlockToFileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_standardTraceBlockToFile
        params:
          type: array
          items:
            anyOf:
              - title: Hash
                type: string
                description: Hash of a block.
                format: 32-byte DATA
              - $ref: '#/components/schemas/StandardTracingOptions'
          example:
            - '0x485fff444481ee28debe50639f312f44e0a09342161a8906a99cf325cc2512a4'
    DebugStandardTraceBlockToFileResp:
      type: object
      properties:
        result:
          type: array
          description: A list of file names. Each represents a tracing result of a transaction. The format of a file name is block_{first 4 bytes of the block hash}-{transaction index}-{first 4 bytes of the transaction hash}-{random string}.
          items:
            type: string
          example:
            - /var/folders/v9/z3vq7j4d42b2jq_vxsv0km6h0000gn/T/block_0x485fff44-0-0xfe8210fc-141224302
    DebugGoTraceReq:
      type: object
      properties:
        method:
          type: string
          default: debug_goTrace
        params:
          type: array
          items:
            anyOf:
              - title: File
                type: string
                description: The filename for the trace output.
              - title: Seconds
                type: integer
                description: The tracing duration in seconds.
          example:
            - go.trace
            - 5
    DebugGoTraceResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugStartGoTraceReq:
      type: object
      properties:
        method:
          type: string
          default: debug_startGoTrace
        params:
          type: array
          description: The filename for the tracing output.
          items:
            title: File
            type: string
          example:
            - go.trace
    DebugStartGoTraceResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugStopGoTraceReq:
      type: object
      properties:
        method:
          type: string
          default: debug_stopGoTrace
    DebugStopGoTraceResp:
      type: object
      properties:
        result:
          type: string
          example: null
    DebugBlockProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_blockProfile
        params:
          type: array
          items:
            anyOf:
              - title: File
                type: string
                description: The filename for the profiling output.
              - title: Seconds
                type: integer
                description: The profiling duration in seconds.
          example:
            - block.profile
            - 10
    DebugBlockProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugCpuProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_cpuProfile
        params:
          type: array
          items:
            anyOf:
              - title: File
                type: string
                description: The filename for the profiling result.
              - title: Seconds
                type: integer
                description: The profiling duration in seconds.
          example:
            - block.profile
            - 10
    DebugCpuProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    IsPProfRunningReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: debug_isPProfRunning
    IsPProfRunningResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the pprof HTTP server is running and false otherwise.
          example: true
    DebugMutexProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_mutexProfile
        params:
          type: array
          items:
            anyOf:
              - title: File
                type: string
                description: The filename for the profiling result.
              - title: Seconds
                type: integer
                description: The profiling duration in seconds.
          example:
            - mutex.profile
            - 10
    DebugMutexProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugSetBlockProfileRateReq:
      type: object
      properties:
        method:
          type: string
          default: debug_setBlockProfileRate
        params:
          type: array
          description: The profiling rate in samples/sec.
          items:
            title: Rate
            type: integer
          example:
            - 3
    DebugSetBlockProfileRateResp:
      type: object
      properties:
        result:
          type: string
          example: null
    setMutexProfileFractionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_setMutexProfileFraction
        params:
          type: array
          items:
            title: rate
            type: integer
          description: rate
          example:
            - 2
    DebugStartCPUProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_startCPUProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - cpu.profile
    DebugStartCPUProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    StartPProfReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_startPProf
        params:
          type: array
          items:
            anyOf:
              - title: Address
                description: pprof HTTP server listening interface
                type: string
              - title: Port
                description: pprof HTTP server listening port
                type: integer
          example:
            - localhost
            - 6000
    StartPProfResp:
      type: object
      properties:
        result:
          type: string
          example: null
    DebugStopCPUProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_stopCPUProfile
    DebugStopCPUProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    StopPProfReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: debug_stopPProf
    StopPProfResp:
      type: object
      properties:
        result:
          type: string
          example: null
    DebugWriteBlockProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_writeBlockProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - block.profile
    DebugWriteBlockProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugWriteMemProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_writeMemProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - mem.profile
    DebugWriteMemProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugWriteMutexProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_writeMutexProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - mutex.profile
    DebugWriteMutexProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    Value:
      type: string
      description: |
        | Key | Description |
        |-----|-----|
        | "governance.governancemode" | STRING. One of the three governance modes. "none", "single", "ballot" |
        | "governance.governingnode" | ADDRESS. Designated governing node's address. It only works if the governance mode is "single" e.g.,"0xe733cb4d279da696f30d470f8c04decb54fcb0d2" |
        | "governance.unitprice" | NUMBER. Price of unit gas. e.g., 25000000000 |
        | "governance.addvalidator" | ADDRESS. Address of a new validator candidate. e.g., 0xe733cb4d279da696f30d470f8c04decb54fcb0d2 |
        | "governance.removevalidator" | ADDRESS. Address of a current validator which need to be removed. e.g., 0xe733cb4d279da696f30d470f8c04decb54fcb0d2 |
        | "governance.deriveshaimpl" | NUMBER. Policy to generate the transaction hash and receipt hash in a block header. See here for available options. e.g., 2 (DeriveShaConcat) |
        | "governance.govparamcontract" | ADDRESS. Address of the GovParam contract. e.g., 0xe733cb4d279da696f30d470f8c04decb54fcb0d2 |
        | "istanbul.epoch" | NUMBER. A period in which votes are gathered in blocks. When an epoch end, all votes which haven't been passed will be cleared. e.g., 86400 |
        | "istanbul.committeesize" | NUMBER. The number of validators in a committee.(sub in chain configuration) e.g., 7 |
        | "reward.mintingamount" | STRING. Amount of Peb minted when a block is generated. Double quotation marks are needed for a value. e.g., "9600000000000000000" |
        | "reward.ratio" | STRING. Distribution rate for a CN/KGF/KIR separated by "/". The sum of all values has to be 100. e.g., "50/40/10" meaning CN 50%, KGF 40%, KIR 10% |
        | "reward.kip82ratio" | STRING. Distribution ratio of the block proposer to stakers separated by "/". The sum of all values has to be "100". See KIP-82 for further details. e.g., "20/80" means that the proposer takes 20% while stakers take 80%. |
        | "reward.useginicoeff" | BOOL. Use the Gini coefficient or not. true, false |
        | "reward.deferredtxfee" | BOOL. The way of giving transaction fee to a proposer. If true, it means the tx fee will be summed up with block reward and distributed to the proposer, KIR and KGF. If not, all tx fee will be given to the proposer. true, false |
        | "reward.minimumstake" | STRING. Amount of Klay required to be a CN (Consensus Node). Double quotation marks are needed for a value. e.g., "5000000" |
        | "kip71.lowerboundbasefee" | NUMBER. The lowest possible base fee. See KIP-71 for further details. e.g., 25000000000 |
        | "kip71.upperboundbasefee" | NUMBER. The highest possible base fee. e.g., 750000000000 |
        | "kip71.gastarget" | NUMBER. The block gas that base fee wants to achieve. The base fee increases when parent block contains more than gas target, and decreases when parent block contains less than gas target. e.g., 30000000 |
        | "kip71.basefeedenominator" | NUMBER. Controls how fast base fee changes. e.g., 20 |
        | "kip71.maxblockgasusedforbasefee" | NUMBER. The maximum block gas perceived in base fee calculation. e.g., 60000000 |
    AddPeerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_addPeer
        params:
          type: array
          description: Peer's kni URL.
          items:
            title: Url
            type: string
          example:
            - kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323
    AddPeerResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the peer was accepted, false otherwise.
          example: true
    DatadirReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_datadir
    DatadirResp:
      type: object
      properties:
        result:
          type: string
          description: The datadir path.
          example: /your/dir/ken/data/dd
    ExportChainReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_exportChain
        params:
          type: array
          description: the fully qualified path to the file where the blockchain must be exported.
          items:
            anyOf:
              - type: string
                title: FileName
              - type: number
                format: integer
                title: FirstBlock
              - type: number
                format: integer
                title: LastBlock
          example:
            - /tmp/chain.txt
            - 1
            - 1000
    ExportChainResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if chain was exported, false if not.
          example: true
    GetSpamThrottlerCandidateListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_getSpamThrottlerCandidateList
    GetSpamThrottlerCandidateListResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example: []
    GetSpamThrottlerThrottleListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_getSpamThrottlerThrottleList
    GetSpamThrottlerThrottleListResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example: []
    GetSpamThrottlerWhiteListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_getSpamThrottlerWhiteList
    GetSpamThrottlerWhiteListResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example:
            - '0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5'
    ImportChainReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_importChain
        params:
          type: array
          description: the fully qualified path to the file containing the chain to be imported.
          items:
            title: FileName
            type: string
          example:
            - /tmp/chain.txt
    ImportChainResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if chain was imported, false if not.
          example: true
    ImportChainFromStringReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_importChainFromString
        params:
          type: array
          description: the RLP-encoded string that represents the blocks to be imported. (equals to the return value of debug.getBlockRlp)
          items:
            title: BlockRlp
            type: string
          example:
            - f9071...080c0
    ImportChainFromStringResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if chain was imported, false if not.
          example: true
    NodeInfoReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_nodeInfo
    NodeInfoResp:
      type: object
      properties:
        result:
          type: object
          description: The node information.
          example:
            id: 377ef808aff73a397d133b3bf160df586054c98c0e6a65c8fce9560e6a0632bc975419f461803d27f28ee270287113cc2359225814debc1bfb2f811061e14c5d
            name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
            kni: kni://377ef808aff73a397d133b3bf160df586054c98c0e6a65c8fce9560e6a0632bc975419f461803d27f28ee270287113cc2359225814debc1bfb2f811061e14c5d@[::]:32323?discport=0
            ip: '::'
            ports:
              discovery: 0
              listener: 32323
            listenAddr: '[::]:32323'
            protocols:
              istanbul:
                network: 1000
                difficulty: 1
                genesis: '0x06806bd8b1e086dfb7098a289da07037a3af58e793d205d20f61c88eeea9351d'
                config:
                  chainId: 1000
                  istanbul:
                    epoch: 30000
                    policy: 0
                    sub: 7
                  isBFT: true
                  unitPrice: 25000000000
                  deriveShaImpl: 0
                head: '0x06806bd8b1e086dfb7098a289da07037a3af58e793d205d20f61c88eeea9351d'
    PeersReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_peers
    PeersResp:
      type: object
      properties:
        result:
          type: array
          description: The information about all connected peers.
          items:
            type: object
          example:
            - id: 144af69d2bb030c6a2a5ceee7445dc613e200f19358547cffc353d56e6c8a5b4186a6953c028b6afd0ab3c2bfc4c86f24b0bf855d0686b964ec65cefd3deec37
              name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
              caps:
                - istanbul/64
              network:
                localAddress: 10.0.10.1:49355
                remoteAddress: 10.0.0.1:32323
                inbound: false
                trusted: false
                static: true
              protocols:
                istanbul:
                  version: 64
                  difficulty: 1285901
                  head: '0x2d04ac52df4af08a9a0e15d5939c29decb00031e7b3f6abd05bc0c731f6b5561'
            - id: a875620f67f0b12edb97d0ec269e7940f2505b1f62576f39858c37e1d7f956318c3a619239f03f806a79ccaa8e7e9b5def343c24a9fd2e9d715964e0952dd995
              name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
              caps:
                - istanbul/64
              networks:
                - localAddress: 10.0.10.2:49353
                  remoteAddress: 10.0.0.2:32323
                  inbound: false
                  trusted: false
                  static: true
              protocols:
                istanbul:
                  version: 64
                  difficulty: 1285901
                  head: '0x2d04ac52df4af08a9a0e15d5939c29decb00031e7b3f6abd05bc0c731f6b5561'
            - id: e18d6d4e0ffac0a51028a8d49a548295ac8ac50d064f3581600799a3ae761a61f0b39c38b4195e163e01f30db616debf61b5b2ddea716bc8fb1c907ce7a1de26
              name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
              caps:
                - istanbul/64
              network:
                localAddress: 10.0.10.3:49354
                remoteAddress: 10.0.0.3:32323
                inbound: false
                trusted: false
                static: true
              protocols:
                istanbul:
                  version: 64
                  difficulty: 1285900
                  head: '0x2e228a45c7c9b9e6729b6c66b31957d6cb62ce53e32cedf156615a4e8a2e253a'
    RemovePeerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_removePeer
        params:
          type: array
          description: Peer's kni URL.
          items:
            title: Url
            type: string
          example:
            - kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323
    RemovePeerResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the peer was accepted, false otherwise.
          example: true
    SaveTrieNodeCacheToDiskReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_saveTrieNodeCacheToDisk
    SaveTrieNodeCacheToDiskResp:
      type: object
      properties:
        result:
          type: string
          description: null if saving the trie node has started, or an error message if not.
          example: null
    SetMaxSubscriptionPerWSConnReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_setMaxSubscriptionPerWSConn
        params:
          type: array
          description: The maximum allowed number of subscriptions per single WebSocket connection.
          items:
            type: integer
            title: Limit
            example: 5
    SetMaxSubscriptionPerWSConnResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          description: null if the limit is set successfully; otherwise, it returns an error message.
          default: null
    SetSpamThrottlerWhiteListReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_setSpamThrottlerWhiteList
        params:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example:
            - - '0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5'
    SetSpamThrottlerWhiteListResp:
      type: object
      properties:
        result:
          type: string
          example: null
    SpamThrottlerConfigReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_spamThrottlerConfig
    SpamThrottlerConfigResp:
      type: object
      properties:
        result:
          type: object
          required:
            - activate_tx_pool_size
            - target_fail_ratio
            - throttle_tps
            - max_candidates
            - increase_weight
            - decrease_weight
            - initial_threshold
            - minimum_threshold
            - threshold_adjustment
            - throttle_seconds
          properties:
            activate_tx_pool_size:
              type: number
            target_fail_ratio:
              type: number
            throttle_tps:
              type: number
            max_candidates:
              type: number
            increase_weight:
              type: number
            decrease_weight:
              type: number
            initial_threshold:
              type: number
            minimum_threshold:
              type: number
            threshold_adjustment:
              type: number
            throttle_seconds:
              type: number
          example:
            activate_tx_pool_size: 0
            target_fail_ratio: 0
            throttle_tps: 0
            max_candidates: 0
            increase_weight: 0
            decrease_weight: 0
            initial_threshold: 0
            minimum_threshold: 0
            threshold_adjustment: 0
            throttle_seconds: 0
    StartHTTPReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_startHTTP
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Host
                description: (optional) network interface to open the listener socket on (default "localhost").
              - type: integer
                title: Port
                description: (optional) network port to open the listener socket on (default 8551).
              - type: string
                title: Cors
                description: (optional) cross-origin resource sharing header to use (default "").
              - type: string
                title: Apis
                description: (optional) API modules to offer over this interface (default "klay,net,rpc").
          example:
            - 127.0.0.1
            - 8551
            - ''
            - klay
    StartHTTPResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the HTTP RPC listener was opened, false if not.
          example: true
    startSpamThrottlerReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_startSpamThrottler
    startSpamThrottlerResp:
      type: object
      properties:
        result:
          type: string
          example: null
    StartStateMigrationReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_startStateMigration
    StartStateMigrationResp:
      type: object
      properties:
        result:
          type: string
          description: null if the state migration has started, or an error message if not.
          example: null
    StartWSReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_startWS
        params:
          type: array
          items:
            anyOf:
              - type: string
                title: Host
                description: (optional) network interface to open the listener socket on (default "localhost").
              - type: integer
                title: Port
                description: (optional) network port to open the listener socket on (default 8552).
              - type: string
                title: Cors
                description: (optional) cross-origin resource sharing header to use (default "").
              - type: string
                title: Apis
                description: (optional) API modules to offer over this interface (default "klay,net,rpc").
          example:
            - 127.0.0.1
            - 8552
            - ''
            - klay
    StartWSResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the WebSocket RPC listener was opened, false if not.
          example: true
    StateMigrationStatusReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stateMigrationStatus
    StateMigrationStatusResp:
      type: object
      properties:
        result:
          type: object
          description: Returns the status information of the state migration
          required:
            - committed
            - err
            - isMigration
            - migrationBlockNumber
            - pending
            - progress
            - read
          properties:
            committed:
              type: integer
              description: committed is the number of trie nodes that have been copied by the state migration.
              example: 1585169
            err:
              type: string
              nullable: true
              description: null if the state migration finished well, or an error if not.
              example: 'null'
            isMigration:
              type: boolean
              description: true if the state migration is running, or false if not.
              example: true
            migrationBlockNumber:
              type: integer
              format: uint64
              description: a blockNumber which the state migration started at. (0 if the state migration is not running.)
              example: 32527233
            pending:
              type: integer
              description: pending represents the number of trie nodes that have not been processed by the state migration.
              example: 27677
            progress:
              type: number
              format: float64
              description: progress is the progress of the state migration calculated in percent.
              example: 0.3662109375
            read:
              type: integer
              description: read represents the number of trie nodes that have been read by the state migration.
              example: 1587473
    StopHTTPReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopHTTP
    StopHTTPResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the endpoint was closed, false if not.
          example: true
    StopSpamThrottlerReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopSpamThrottler
    stopSpamThrottlerResp:
      type: object
      properties:
        result:
          type: string
          example: null
    StopStateMigrationReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopStateMigration
    StopStateMigrationResp:
      type: object
      properties:
        result:
          type: string
          description: null if the state migration is stopped, or an error if not.
          example: null
    StopWSReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopWS
    StopWSResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the endpoint was closed, false if not.
          example: true
    NodeConfigReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_nodeConfig
    NodeConfigResp:
      type: object
      properties:
        result:
          type: object
          description: The node information.
          example:
            Genesis: null
            NetworkId: 203
            SyncMode: full
            NoPruning: false
            WorkerDisable: false
            DownloaderDisable: false
            FetcherDisable: false
            ParentOperatorAddr: null
            AnchoringPeriod: 0
            SentChainTxsLimit: 0
            OverwriteGenesis: false
            StartBlockNumber: 0
            DBType: LevelDB
            SkipBcVersionCheck: false
            SingleDB: false
            NumStateTrieShards: 4
            EnableDBPerfMetrics: true
            LevelDBCompression: 0
            LevelDBBufferPool: true
            LevelDBCacheSize: 768
            DynamoDBConfig:
              TableName: ''
              Region: ap-northeast-2
              Endpoint: ''
              S3Endpoint: ''
              IsProvisioned: false
              ReadCapacityUnits: 10000
              WriteCapacityUnits: 10000
              ReadOnly: false
              PerfCheck: false
            RocksDBConfig:
              Secondary: false
              DumpMallocStat: false
              DisableMetrics: false
              CacheSize: 768
              CompressionType: lz4
              BottommostCompressionType: zstd
              FilterPolicy: ribbon
              MaxOpenFiles: 1024
              CacheIndexAndFilter: false
            TrieCacheSize: 512
            TrieTimeout: 300000000000
            TrieBlockInterval: 128
            TriesInMemory: 128
            LivePruning: false
            LivePruningRetention: 172800
            SenderTxHashIndexing: false
            ParallelDBWrite: true
            TrieNodeCacheConfig:
              CacheType: LocalCache
              NumFetcherPrefetchWorker: 32
              UseSnapshotForPrefetch: false
              LocalCacheSizeMiB: 0
              FastCacheFileDir: /klaytn/fastcache
              FastCacheSavePeriod: 0
              RedisEndpoints: null
              RedisClusterEnable: false
              RedisPublishBlockEnable: false
              RedisSubscribeBlockEnable: false
            SnapshotCacheSize: 0
            SnapshotAsyncGen: false
            ServiceChainSigner: '0x0000000000000000000000000000000000000000'
            ExtraData: null
            GasPrice: 0
            Rewardbase: '0x3208ca99480f82bfe240ca6bc06110cd12bb6366'
            TxPool:
              NoLocals: false
              AllowLocalAnchorTx: false
              DenyRemoteTx: false
              Journal: /klaytn/klay/transactions.rlp
              JournalInterval: 3600000000000
              PriceLimit: 1
              PriceBump: 10
              ExecSlotsAccount: 16384
              ExecSlotsAll: 16384
              NonExecSlotsAccount: 16384
              NonExecSlotsAll: 16384
              KeepLocals: false
              Lifetime: 300000000000
              NoAccountCreation: false
              EnableSpamThrottlerAtRuntime: false
            GPO:
              Blocks: 20
              Percentile: 60
              MaxHeaderHistory: 1024
              MaxBlockHistory: 1024
              Default: null
            EnablePreimageRecording: false
            EnableInternalTxTracing: false
            EnableOpDebug: false
            Istanbul:
              Timeout: 10000
              BlockPeriod: 1
              ProposerPolicy: 0
              Epoch: 30000
              SubGroupSize: 21
            DocRoot: ''
            WsEndpoint: ''
            TxResendInterval: 4
            TxResendCount: 1000
            TxResendUseLegacy: false
            NoAccountCreation: false
            IsPrivate: true
            AutoRestartFlag: true
            RestartTimeOutFlag: 900000000000
            DaemonPathFlag: /klaytn-docker-pkg/bin/kcnd
            RPCGasCap: null
            RPCEVMTimeout: 5000000000
            RPCTxFeeCap: 0
            DisableUnsafeDebug: false
            StateRegenerationTimeLimit: 60000000000
    MainbridgeConvertChildChainBlockHashToParentChainTxHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: mainbridge_convertChildChainBlockHashToParentChainTxHash
        params:
          type: array
          description: The child chain block hash.
          items:
            $ref: '#/components/schemas/BlockHash'
          example:
            - '0xeadc6a3a29a20c13824b5df1ba05cca1ed248d046382a4f2792aac8a6e0d1880'
    MainbridgeConvertChildChainBlockHashToParentChainTxHashResp:
      type: object
      properties:
        result:
          type: string
          format: 32-byte DATA
          description: The anchoring transaction hash that includes the child chain block information.
          example: '0x9a68591c0faa138707a90a7506840c562328aeb7621ac0561467c371b0322d51'
    MainbridgeGetChildChainIndexingEnabledReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: mainbridge_getChildChainIndexingEnabled
    MainbridgeGetChildChainIndexingEnabledResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the indexing was enabled, false otherwise.
          example: '0x0'
    MainbridgeNodeInfoReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: mainbridge_nodeInfo
    MainbridgeNodeInfoResp:
      type: object
      properties:
        result:
          type: object
          description: the bridge node information.
          example:
            kni: kni://f8a1f0cd1e2bebeece571e4fda16e215218fd4b9bc2eddd924f7cd5b5f950fcec8f4b8cd3851390d1d0bacf1b15e1c4a38c882252e429a28d16eeb6edbacd726@[::]:50505?discport=0
            id: f8a1f0cd1e2bebeece571e4fda16e215218fd4b9bc2eddd924f7cd5b5f950fcec8f4b8cd3851390d1d0bacf1b15e1c4a38c882252e429a28d16eeb6edbacd726
            ip: '::'
            listenAddr: '[::]:50505'
            name: '-2'
            ports:
              discovery: 0
              listener: 50505
            protocols:
              servicechain:
                config:
                  chainId: 2018
                  deriveShaImpl: 0
                  isBFT: true
                  istanbul:
                    ...: null
                  unitPrice: 0
                difficulty: 87860
                genesis: '0x711ce9865492659977abb2758d29f68c2b0c82862d9376f25953579f64f95b58'
                head: '0x0d4b130731f1e7560e4531ac73d55ac8c6daccb178abd86af0d96b7aafded7c5'
                network: 1
    schemas-AddPeerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_addPeer
        params:
          type: array
          description: Peer's kni URL.
          items:
            type: string
            title: Url
          example:
            - kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:50505
    AnchoringReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_anchoring
        params:
          type: array
          description: true enables the anchoring feature, false disables it.
          items:
            type: string
            title: Enable
          example:
            - true
    AnchoringResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the anchoring was enabled, false otherwise.
          example: true
    ConvertRequestTxHashToHandleTxHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_convertRequestTxHashToHandleTxHash
        params:
          type: array
          description: Hash of a "request value transfer" transaction.
          items:
            type: string
            format: 32-byte DATA
            title: Hash
          example:
            - '0xc585cfd1e7047b4faae69e62e77db192d8a339701b40d6ab4adb58453b934bec'
    ConvertRequestTxHashToHandleTxHashResp:
      type: object
      properties:
        result:
          type: string
          format: 32-byte DATA
          description: Hash of a "handle value transfer" transaction. zero hash means there is no corresponding "handle value transfer" transaction.
          example: '0x0000000000000000000000000000000000000000000000000000000000000000'
    SubbridgeDeployBridgeReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: subbridge_deployBridge
    SubbridgeDeployBridgeResp:
      type: object
      properties:
        result:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
    SubbridgeDeregisterBridgeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_deregisterBridge
        params:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
    SubbridgeDeregisterBridgeResp:
      type: object
      properties:
        result:
          type: string
          example: null
          description: null if the deregistration succeeds, Error object otherwise.
    SubbridgeDeregisterTokenReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_deregisterToken
        params:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
              - title: TokenChildAccount
                type: string
                format: 20-byte DATA
                description: Address of token contract on child chain.
              - title: TokenParentAccount
                type: string
                format: 20-byte DATA
                description: Address of token contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
            - '0xA4b0c6e12346426a09FaD70dAE0651E6Dbdd5198'
            - '0x865Cca53828C91663BFf0Ca9808827Bac552BAec'
    SubbridgeDeregisterTokenResp:
      type: object
      properties:
        result:
          type: string
          example: null
          description: null if the deregistration succeeds, Error object otherwise.
    GetBridgeInformationReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_getBridgeInformation
        params:
          type: array
          items:
            type: string
            title: account
            format: 20-byte DATA
          description: Address of a bridge contract
          example:
            - '0x27caeba831d98b5fbb1d81ce0ed20801702f443a'
    GetBridgeInformationResp:
      type: object
      properties:
        result:
          type: object
          description: the information of the given bridge contract.
          required:
            - counterPart
            - isRunning
            - isSubscribed
            - onServiceChain
            - pendingEventSize
            - requestNonce
            - handleNonce
            - lowerHandleNonce
          properties:
            counterPart:
              type: string
              format: 20-byte DATA
              description: Address of the counterpart bridge contract. (Not supported yet)
            isRunning:
              type: boolean
              description: true if the bridge contract is running, false otherwise.
            isSubscribed:
              type: boolean
              description: true if the bridge contract is subscribed, false otherwise.
            onServiceChain:
              type: boolean
              description: true if the bridge contact is on child (service) chain, false otherwise.
            pendingEventSize:
              type: string
              format: hex
              description: Number of pending "request value transfer" events generated by the bridge contracts, not handled yet by the sub-bridge.
            requestNonce:
              type: string
              format: hex
              description: Request nonce of the bridge contract.
            handleNonce:
              type: string
              format: hex
              description: Upper handle nonce of the bridge contract.
            lowerHandleNonce:
              type: string
              format: hex
              description: Lower handle nonce of the bridge contract.
          example:
            counterPart: '0x0000000000000000000000000000000000000000'
            handleNonce: 0
            lowerHandleNonce: 0
            isRunning: true
            isSubscribed: true
            onServiceChain: true
            pendingEventSize: 0
            requestNonce: 0
    SubbridgeGetReceiptFromParentChainReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_getReceiptFromParentChain
        params:
          type: array
          items:
            type: string
            format: 32-byte DATA
            description: The child chain block hash that was included the anchoring tx hash.
          example:
            - '0x4f300d6574e71d7940c88fe08f27d9ac45cbc7b81d45c17e848d3772f64377b5'
    SubbridgeGetReceiptFromParentChainResp:
      type: object
      properties:
        result:
          type: object
          description: Object - A transaction receipt object, or null when no receipt was found.
          required:
            - contractAddress
            - gasUsed
            - logs
            - logsBloom
            - status
            - transactionHash
          properties:
            contractAddress:
              type: string
              format: DATA
              description: The contract address created, if the transaction was a contract creation, otherwise null. (will be deprecated)
            gasUsed:
              type: string
              format: hex
              description: The amount of gas used by this specific transaction alone.
            logs:
              type: array
              items:
                type: object
              description: Array of log objects, which this transaction generated.
            logsBloom:
              type: string
              format: 256-byte DATA
              description: Bloom filter for light clients to quickly retrieve related logs.
            status:
              type: string
              format: hex
              description: Either 1 (success) or 0 (failure).
            transactionHash:
              type: string
              format: 32-byte DATA
              description: Hash of the transaction.
          example:
            contractAddress: '0x0000000000000000000000000000000000000000'
            gasUsed: '0x9470'
            logs: []
            logsBloom: '0x
            status: '0x1'
            transactionHash: '0x3641f52359f44ef2a9941ea840aed4befbace5cac28d5cc8cacd94eae211fd1e'
    ListBridgeReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: subbridge_unsubscribeBridge
    ListBridgeResp:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            required:
              - localAddress
              - remoteAddress
              - subscribed
            properties:
              localAddress:
                type: string
                format: 20-byte DATA
                title: account
                description: account
              remoteAddress:
                type: string
                format: 20-byte DATA
                title: account
                description: account
              subscribed:
                type: boolean
                description: true if the pair of bridge contracts is subscribed, false otherwise.
          example:
            - localAddress: '0x27caeba831d98b5fbb1d81ce0ed20801702f443a'
              remoteAddress: '0x22c41ae528627b790233d2e59ea520be12350eb5'
              subscribed: true
            - localAddress: '0x376b72abe1b29cace831bd3f5acdfa967814c9cd'
              remoteAddress: '0x53160735f7cc6ff75e48619f368bb94daff66a1b'
              subscribed: false
            - localAddress: '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
              remoteAddress: '0x23dab942822021bbd6d551ef51003208924877e4'
              subscribed: false
    schemas-NodeInfoReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: subbridge_nodeInfo
    schemas-NodeInfoResp:
      type: object
      properties:
        result:
          type: object
          description: The bridge node information.
          example:
            kni: kni://f8a1f0cd1e2bebeece571e4fda16e215218fd4b9bc2eddd924f7cd5b5f950fcec8f4b8cd3851390d1d0bacf1b15e1c4a38c882252e429a28d16eeb6edbacd726@[::]:50505?discport=0
            id: f8a1f0cd1e2bebeece571e4fda16e215218fd4b9bc2eddd924f7cd5b5f950fcec8f4b8cd3851390d1d0bacf1b15e1c4a38c882252e429a28d16eeb6edbacd726
            ip: '::'
            listenAddr: '[::]:50505'
            name: '-2'
            ports:
              discovery: 0
              listener: 50505
            protocols:
              servicechain:
                config:
                  chainId: 2018
                  deriveShaImpl: 0
                  isBFT: true
                  istanbul:
                    ...: null
                  unitPrice: 0
                difficulty: 87860
                genesis: '0x711ce9865492659977abb2758d29f68c2b0c82862d9376f25953579f64f95b58'
                head: '0x0d4b130731f1e7560e4531ac73d55ac8c6daccb178abd86af0d96b7aafded7c5'
                network: 1
    SubbridgeRegisterBridgeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_registerBridge
        params:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
    SubbridgeRegisterBridgeResp:
      type: object
      properties:
        result:
          type: string
          example: null
          description: null if the registration succeeds, Error object otherwise.
    SubbridgeRegisterTokenReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_registerToken
        params:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
              - title: TokenChildAccount
                type: string
                format: 20-byte DATA
                description: Address of token contract on child chain.
              - title: TokenParentAccount
                type: string
                format: 20-byte DATA
                description: Address of token contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
            - '0xA4b0c6e12346426a09FaD70dAE0651E6Dbdd5198'
            - '0x865Cca53828C91663BFf0Ca9808827Bac552BAec'
    SubbridgeRegisterTokenResp:
      type: object
      properties:
        result:
          type: string
          example: null
          description: null if the registration succeeds, Error object otherwise.
    schemas-RemovePeerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_removePeer
        params:
          type: array
          description: Peer's kni URL.
          items:
            type: string
            title: Url
          example:
            - kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:50505
    schemas-RemovePeerResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the peer was removed, false otherwise.
          example: true
    SubbridgeSubscribeBridgeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_subscribeBridge
        params:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
    SubbridgeSubscribeBridgeResp:
      type: object
      properties:
        result:
          type: string
          example: null
    SubbridgeTxPendingReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: subbridge_txPending
    SubbridgeTxPendingResp:
      type: object
      properties:
        result:
          type: object
          description: List of pending transactions in the bridge transaction pool.
          example:
            '0xa057995175b93ee0d1bdfa54f078ad0f0116130b':
              - from: '0xa057995175b93ee0d1bdfa54f078ad0f0116130b'
                gas: '0x186a0'
                gasPrice: '0x5d21dba00'
                hash: '0x284c8f5bc82ef987c3a14fc8dac7933beb528777745987ff790014441f26ca03'
                input: '0xf8a9a063f41a6ec8e2f8074c30fccf11f2b8479e7ebd8a0e5aa0c171623bc1f3812e33a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0f845557d8dc2175974f29c2e9d12b1a57f634acaafdf56ae7033201a0796bedea056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a09109530b191b47ca3d91012faba70fcf307f13b030f19d932cab38f2c1ece7b78304157c'
                nonce: '0x41589'
                signatures:
                  - ...: null
                type: TxTypeChainDataAnchoring
                typeInt: 72
              - from: '0xa057995175b93ee0d1bdfa54f078ad0f0116130b'
                gas: '0x186a0'
                gasPrice: '0x5d21dba00'
                hash: '0x4dd093916a419608091da28b5d7ffc6e34d894ddaac96328f1904bfef93a4ad0'
                input: '0xf8a9a05b0dd6cc938916e37b17b602690399987b4e8540a14a494626d85e947f721a10a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a063f41a6ec8e2f8074c30fccf11f2b8479e7ebd8a0e5aa0c171623bc1f3812e33a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a09109530b191b47ca3d91012faba70fcf307f13b030f19d932cab38f2c1ece7b78304157d'
                nonce: '0x4158a'
                signatures:
                  - ...: null
                type: TxTypeChainDataAnchoring
                typeInt: 72
    SubbridgeTxPendingCountReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: subbridge_txPendingCount
    SubbridgeTxPendingCountResp:
      type: object
      properties:
        result:
          type: integer
          format: uint64
          description: The number of pending transactions in the bridge transaction pool.
          example: 2
    SubbridgeUnsubscribeBridgeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: subbridge_unsubscribeBridge
        params:
          type: array
          items:
            anyOf:
              - title: ChildAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on child chain.
              - title: ParentAccount
                type: string
                format: 20-byte DATA
                description: Address of bridge contract on parent chain.
          example:
            - '0x87d6b9c567e5b84cd00e03bfbe6d20d88209c33a'
            - '0x23dab942822021bbd6d551ef51003208924877e4'
    SubbridgeUnsubscribeBridgeResp:
      type: object
      properties:
        result:
          type: string
          example: null
x-tagGroups:
  - name: namespaces
    tags:
      - eth
      - klay
      - txpool
      - governance
      - net
      - admin
      - personal
      - debug
      - mainbridge
      - subbridge
