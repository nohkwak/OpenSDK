plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

group 'foundation.klaytn'
version 'v0.9.7'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "foundation.klaytn:web3rpc-java:v0.9.6"
    implementation "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    implementation "org.web3j:core:4.9.8"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.14.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'org.json:json:20230618'
    
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'web3j-ext'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = project.name
                description = project.description
                version = project.version
                url = "https://docs.klaytn.com/"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/content/repositories/releases/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}
if (System.getenv("PUBLISH_TO_MAVEN_PUBLIC")) {
    signing {
        def signingPassword = System.getenv("ORG_GRADLE_PROJECT_SIGNINGPASSWORD")

        def signingKey_base64 = System.getenv('ORG_GRADLE_PROJECT_SIGNINGKEY')
        def signingKey = (signingKey_base64 == null? null:
                new String(Base64.getMimeDecoder().decode(signingKey_base64.toString()), "utf-8"))
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven

    }
}

nexusStaging {
    username= System.getenv("MAVEN_USERNAME")
    password= System.getenv("MAVEN_PASSWORD")
}

test {
    useJUnitPlatform()
}